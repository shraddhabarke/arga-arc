[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "return tf.transpose(tf.stack([in1, tf.range(tf.shape(in1)[0])]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([tf.broadcast_to(in1, [2, tf.reduce_max(in1)+1]),\ntf.tile(tf.range(tf.reduce_max(in1)+1), [tf.shape(in1)[0]])], axis=-1)",
            "return tf.stack([in1, tf.cast(tf.range(tf.shape(in1)[0]), tf.int64)], axis=-1)",
            "def transform(in1):\n    pairs = tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n    return pairs\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "\nreturn tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.squeeze(tf.where(tf.ones_like(in1) == in1)[:, 1:])",
            "return tf.transpose(tf.stack([in1, tf.range(in1.shape[0])]))",
            "def transform(in1):\n    pairs = tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    return pairs\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose([tf.range(tf.size(in1)), in1])\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "\nreturn tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    in1 = tf.expand_dims(in1, 1)\n    out = tf.concat([indices, in1], axis=1)\n    return out\n",
            "return tf.transpose(tf.stack([tf.repeat(tf.range(tf.size(in1)), tf.ones_like(in1)), in1]))",
            "return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)\n",
            "return tf.transpose(tf.stack([tf.repeat(tf.range(tf.size(in1)), repeats=2), tf.cast(in1, tf.int32)]))",
            "return tf.transpose([tf.tile(tf.range(tf.size(in1)), [2, 1]), [in1]])\n\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n",
            "return tf.transpose([tf.broadcast_to(in1, [2, tf.reduce_prod(tf.shape(in1))])])",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.transpose([tf.cast(tf.range(tf.size(in1)), tf.int64), in1])",
            "return tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in1]))",
            "return tf.stack([in1, tf.argsort(in1)], axis=1)\n",
            "def transform(input_tensor):\n    indices = tf.expand_dims(input_tensor, axis=1)\n    values = tf.zeros_like(indices)\n    return tf.concat([indices, values], axis=1)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.concat([tf.zeros_like(indices), tf.reshape(in1, (-1, 1))], axis=1)\n    return indices\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    values = tf.cast(tf.expand_dims(in1, axis=1), tf.int64)\n    return tf.concat([indices, values], axis=1)\n",
            "def transform(in1):\n    idx = tf.argsort(in1)\n    idx_pairs = tf.stack([tf.range(tf.shape(idx)[0]), idx], axis=1)\n    return idx_pairs\n",
            "return tf.transpose(tf.meshgrid(tf.range(tf.size(in1)), tf.range(tf.reduce_max(in1)+1), indexing='ij'), perm=[1, 0])",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    row_indices = tf.tile(tf.range(tf.shape(indices)[0])[:, tf.newaxis], [1, tf.shape(indices)[1]])\n    return tf.stack([row_indices, indices], axis=2)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.cast(in1, tf.int64)\n    row_indices = tf.range(tf.shape(indices)[0])\n    indices_pairs = tf.stack([row_indices, indices], axis=1)\n    return indices_pairs\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)\n    indices = tf.concat([tf.reshape(in1, (-1, 1)), indices], axis=1)\n    return indices\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.transpose(tf.stack([tf.cast(in1, tf.int32), tf.range(tf.size(in1))]))",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    arr = tf.concat([tf.reshape(in1, (-1, 1)), indices], axis=1)\n    return arr\n",
            "return tf.concat([tf.expand_dims(tf.range(tf.size(in1)), 1), tf.expand_dims(in1, 1)], axis=1)",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    return tf.cast(indices, tf.int32)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([tf.tile(tf.range(tf.shape(in1)[0]), [tf.math.count_nonzero(in1)]), tf.boolean_mask(tf.range(tf.reduce_max(in1)+1), tf.tile(tf.expand_dims(in1, 1), [1, tf.shape(in1)[0]]))]))\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    updates = tf.expand_dims(in1, axis=1)\n    return tf.concat([indices, updates], axis=1)\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([tf.range(tf.size(in1)), in1], axis=1)",
            "return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    indices = tf.repeat(indices, 2, axis=1)\n    values = tf.range(tf.reduce_max(indices) + 1)\n    output = tf.gather(values, indices)\n    return output\n",
            "return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.argsort(in1)], axis=1)\n",
            "return tf.concat([tf.expand_dims(in1, -1), tf.range(tf.size(in1), dtype=tf.int32)], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.tile(indices, [1, 2])\n    pairs = tf.stack([in1, tf.argmax(indices, axis=1)], axis=1)\n    return pairs\n",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    output = tf.stack([row_indices, tf.squeeze(indices)], axis=1)\n    return output\n",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "return tf.transpose(tf.tile(tf.expand_dims(tf.range(tf.size(in1)), 1), [1, 2]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.shape(in1)[0])]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([tf.broadcast_to(in1, [2, tf.reduce_max(in1)+1]),\n    tf.tile(tf.range(tf.reduce_max(in1)+1), [tf.shape(in1)[0]])], axis=-1)",
            "def transform(in1):\n    return tf.stack([in1, tf.cast(tf.range(tf.shape(in1)[0]), tf.int64)], axis=-1)",
            "def transform(in1):\n    pairs = tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n    return pairs\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    \n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.squeeze(tf.where(tf.ones_like(in1) == in1)[:, 1:])",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(in1.shape[0])]))",
            "def transform(in1):\n    pairs = tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    return pairs\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.transpose([tf.range(tf.size(in1)), in1])\n    ",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    \n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    in1 = tf.expand_dims(in1, 1)\n    out = tf.concat([indices, in1], axis=1)\n    return out\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.repeat(tf.range(tf.size(in1)), tf.ones_like(in1)), in1]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)\n    ",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.repeat(tf.range(tf.size(in1)), repeats=2), tf.cast(in1, tf.int32)]))",
            "def transform(in1):\n    return tf.transpose([tf.tile(tf.range(tf.size(in1)), [2, 1]), [in1]])\n    \n    ",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n    ",
            "def transform(in1):\n    return tf.transpose([tf.broadcast_to(in1, [2, tf.reduce_prod(tf.shape(in1))])])",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.transpose([tf.cast(tf.range(tf.size(in1)), tf.int64), in1])",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in1]))",
            "def transform(in1):\n    return tf.stack([in1, tf.argsort(in1)], axis=1)\n    ",
            "def transform(input_tensor):\n    indices = tf.expand_dims(input_tensor, axis=1)\n    values = tf.zeros_like(indices)\n    return tf.concat([indices, values], axis=1)\n",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.concat([tf.zeros_like(indices), tf.reshape(in1, (-1, 1))], axis=1)\n    return indices\n",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    values = tf.cast(tf.expand_dims(in1, axis=1), tf.int64)\n    return tf.concat([indices, values], axis=1)\n",
            "def transform(in1):\n    idx = tf.argsort(in1)\n    idx_pairs = tf.stack([tf.range(tf.shape(idx)[0]), idx], axis=1)\n    return idx_pairs\n",
            "def transform(in1):\n    return tf.transpose(tf.meshgrid(tf.range(tf.size(in1)), tf.range(tf.reduce_max(in1)+1), indexing='ij'), perm=[1, 0])",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    row_indices = tf.tile(tf.range(tf.shape(indices)[0])[:, tf.newaxis], [1, tf.shape(indices)[1]])\n    return tf.stack([row_indices, indices], axis=2)\n",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.cast(in1, tf.int64)\n    row_indices = tf.range(tf.shape(indices)[0])\n    indices_pairs = tf.stack([row_indices, indices], axis=1)\n    return indices_pairs\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)\n    indices = tf.concat([tf.reshape(in1, (-1, 1)), indices], axis=1)\n    return indices\n",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.cast(in1, tf.int32), tf.range(tf.size(in1))]))",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    arr = tf.concat([tf.reshape(in1, (-1, 1)), indices], axis=1)\n    return arr\n",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(tf.range(tf.size(in1)), 1), tf.expand_dims(in1, 1)], axis=1)",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    return tf.cast(indices, tf.int32)\n",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.tile(tf.range(tf.shape(in1)[0]), [tf.math.count_nonzero(in1)]), tf.boolean_mask(tf.range(tf.reduce_max(in1)+1), tf.tile(tf.expand_dims(in1, 1), [1, tf.shape(in1)[0]]))]))\n    ",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    updates = tf.expand_dims(in1, axis=1)\n    return tf.concat([indices, updates], axis=1)\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([tf.range(tf.size(in1)), in1], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    indices = tf.repeat(indices, 2, axis=1)\n    values = tf.range(tf.reduce_max(indices) + 1)\n    output = tf.gather(values, indices)\n    return output\n",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.argsort(in1)], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(in1, -1), tf.range(tf.size(in1), dtype=tf.int32)], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1)), axis=1)\n    indices = tf.tile(indices, [1, 2])\n    pairs = tf.stack([in1, tf.argmax(indices, axis=1)], axis=1)\n    return pairs\n",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    output = tf.stack([row_indices, tf.squeeze(indices)], axis=1)\n    return output\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    return tf.transpose(tf.stack([tf.range(tf.size(in1)), in1]))",
            "def transform(in1):\n    return tf.transpose(tf.tile(tf.expand_dims(tf.range(tf.size(in1)), 1), [1, 2]))",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))"
        ],
        "tf_operators": {
            "tf.transpose": 37,
            "tf.shape": 17,
            "tf.range": 94,
            "tf.stack": 82,
            "tf.size": 76,
            "tf.reduce_max": 4,
            "tf.tile": 6,
            "tf.broadcast_to": 2,
            "tf.cast": 7,
            "tf.int64": 5,
            "tf.ones_like": 2,
            "tf.squeeze": 2,
            "tf.where": 2,
            "tf.expand_dims": 15,
            "tf.concat": 9,
            "tf.repeat": 4,
            "tf.int32": 4,
            "tf.reduce_prod": 1,
            "tf.argsort": 3,
            "tf.zeros_like": 2,
            "tf.reshape": 3,
            "tf.meshgrid": 1,
            "tf.newaxis": 1,
            "tf.not_equal": 1,
            "tf.boolean_mask": 1,
            "tf.math.count_nonzero": 1,
            "tf.gather": 1,
            "tf.argmax": 1
        },
        "coverage_percentage": 60.0,
        "total_covered": 3,
        "total_in_target": 5,
        "parsed_constants": [
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1,
                1,
                0,
                -1
            ],
            [
                0,
                -1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                2
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                0
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1,
                0
            ],
            [
                1
            ],
            [],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                0,
                1,
                1,
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                2,
                1,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                2,
                1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                1,
                2
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 116,
            "shape_tuple": 0,
            "input_var": 243,
            "tf_int64": 6,
            "tf_int32": 4,
            "axis": 0,
            "provided": 9,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "output_indices = in1.indices[in1.indices[:, 0] == 0]\noutput_values = tf.boolean_mask(in1.values, tf.equal(in1.indices[:, 0], 0))\noutput_dense_shape = tf.concat([[1], in1.dense_shape[1:]], 0)\nresult = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn result\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\nreturn result\n",
            "output_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n",
            "out_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\nout_values = tf.slice(in1.values, [0], [2])\nout_shape = tf.slice(in1.dense_shape, [0], [2])\nreturn tf.SparseTensor(indices=out_indices, values=out_values, dense_shape=out_shape)\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0], dtype=tf.int64), tf.constant([1, 2, 800], dtype=tf.int64))",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "sp_input = in1\nindices = sp_input.indices\nvalues = sp_input.values\ndense_shape = sp_input.dense_shape\nsliced_indices = tf.sparse.slice(indices, start=[0, 0, 0], size=[2, -1, -1])\nsliced_values = tf.sparse.slice(values, start=[0], size=[2])\nsliced_dense_shape = tf.constant([1, dense_shape[1].numpy(), dense_shape[2].numpy()], dtype=tf.int64)\nreturn tf.SparseTensor(indices=sliced_indices, values=sliced_values, dense_shape=sliced_dense_shape)\n",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [2, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "output_indices = tf.sparse.slice(in1.indices, [0, 0], [2, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1, -1])\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "out_indices = in1.indices[in1.indices[:, 0] == 0]\nout_values = tf.gather(in1.values, tf.where(in1.indices[:, 0] == 0)[:, 0])\nout_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\nreturn tf.SparseTensor(indices=out_indices, values=out_values, dense_shape=out_dense_shape)\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "result = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\nreturn result\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [2, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, tf.constant([0, 0, 0]), tf.constant([1, 2, 800]))",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "output_indices = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).indices\noutput_values = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).values\noutput_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\noutput = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\nreturn output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "output = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\nreturn output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n",
            "\ndef transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\nreturn result\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "output_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1])\n\nreturn tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0,0,0], [1,2,800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "sp_input = in1\nstart = tf.constant([0, 0, 0], dtype=tf.int64)\nsize = tf.constant([1, tf.shape(sp_input.indices)[1]], dtype=tf.int64)\nsp_output = tf.sparse.slice(sp_input, start, size)\nreturn sp_output\n",
            "output_indices = in1.indices[in1.indices[:, 0] < 1]\noutput_values = in1.values[in1.indices[:, 0] < 1]\noutput_shape = tf.concat([[1], tf.slice(in1.dense_shape, [1], [-1])], axis=0)\nreturn tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_shape)\n",
            "result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\nreturn result\n",
            "result = tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\nreturn result\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    output_indices = in1.indices[in1.indices[:, 0] == 0]\n    output_values = tf.boolean_mask(in1.values, tf.equal(in1.indices[:, 0], 0))\n    output_dense_shape = tf.concat([[1], in1.dense_shape[1:]], 0)\n    result = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n    return result\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, in1.dense_shape[1], in1.dense_shape[2]])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    return result\n    ",
            "def transform(in1):\n    output_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\n    output_values = tf.sparse.slice(in1.values, [0], [2])\n    output_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\n    output = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n    return output\n    ",
            "def transform(in1):\n    out_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\n    out_values = tf.slice(in1.values, [0], [2])\n    out_shape = tf.slice(in1.dense_shape, [0], [2])\n    return tf.SparseTensor(indices=out_indices, values=out_values, dense_shape=out_shape)\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0], dtype=tf.int64), tf.constant([1, 2, 800], dtype=tf.int64))",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    sp_input = in1\n    indices = sp_input.indices\n    values = sp_input.values\n    dense_shape = sp_input.dense_shape\n    sliced_indices = tf.sparse.slice(indices, start=[0, 0, 0], size=[2, -1, -1])\n    sliced_values = tf.sparse.slice(values, start=[0], size=[2])\n    sliced_dense_shape = tf.constant([1, dense_shape[1].numpy(), dense_shape[2].numpy()], dtype=tf.int64)\n    return tf.SparseTensor(indices=sliced_indices, values=sliced_values, dense_shape=sliced_dense_shape)\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [2, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    output_indices = tf.sparse.slice(in1.indices, [0, 0], [2, -1])\n    output_values = tf.sparse.slice(in1.values, [0], [2])\n    output_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1, -1])\n    output = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n    return output\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "def transform(in1):\n    out_indices = in1.indices[in1.indices[:, 0] == 0]\n    out_values = tf.gather(in1.values, tf.where(in1.indices[:, 0] == 0)[:, 0])\n    out_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\n    return tf.SparseTensor(indices=out_indices, values=out_values, dense_shape=out_dense_shape)\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    result = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n    return result\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [2, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0]), tf.constant([1, 2, 800]))",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    output_indices = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).indices\n    output_values = tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1]).values\n    output_dense_shape = tf.concat([[1], in1.dense_shape[1:]], axis=0)\n    output = tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n    return output\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    output = tf.sparse.slice(in1, start=[0, 0, 0], size=[1, -1, -1])\n    return output\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    ",
            "\ndef transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    return result\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    output_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\n    output_values = tf.sparse.slice(in1.values, [0], [2])\n    output_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1])\n    \n    return tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0,0,0], [1,2,800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "def transform(in1):\n    return tf.sparse.slice(in1, start=[0, 0, 0], size=[1, 2, 800])",
            "def transform(in1):\n    sp_input = in1\n    start = tf.constant([0, 0, 0], dtype=tf.int64)\n    size = tf.constant([1, tf.shape(sp_input.indices)[1]], dtype=tf.int64)\n    sp_output = tf.sparse.slice(sp_input, start, size)\n    return sp_output\n    ",
            "def transform(in1):\n    output_indices = in1.indices[in1.indices[:, 0] < 1]\n    output_values = in1.values[in1.indices[:, 0] < 1]\n    output_shape = tf.concat([[1], tf.slice(in1.dense_shape, [1], [-1])], axis=0)\n    return tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_shape)\n    ",
            "def transform(in1):\n    result = tf.sparse.slice(in1, [0, 0, 0], [1, -1, -1])\n    return result\n    ",
            "def transform(in1):\n    result = tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    return result\n    ",
            "def transform(in1):\n    return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n    "
        ],
        "tf_operators": {
            "tf.sparse.slice": 97,
            "tf.concat": 5,
            "tf.boolean_mask": 1,
            "tf.equal": 1,
            "tf.SparseTensor": 9,
            "tf.slice": 2,
            "tf.constant": 4,
            "tf.int64": 3,
            "tf.gather": 1,
            "tf.where": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                0,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                0,
                2
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                2,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                2,
                -1,
                0,
                2,
                0,
                1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                0,
                0,
                2,
                -1,
                -1,
                1,
                1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                1
            ],
            [
                0,
                1,
                0,
                1,
                1,
                1,
                -1,
                0
            ],
            [
                0,
                0,
                0,
                1,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            800,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 9,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 13,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 451,
            "shape_tuple": 0,
            "input_var": 96,
            "tf_int64": 5,
            "tf_int32": 0,
            "axis": 97,
            "provided": 0,
            "tf_float32": 0,
            "shape": 79,
            "tf_bool": 0
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, [4, 3, 2])\n",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.transpose(tf.reshape(in1, (4, 3, 2)), perm=[1, 0, 2])",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, [4, 3, 2])\n    ",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    ",
            "def transform(in1):\n    return tf.transpose(tf.reshape(in1, (4, 3, 2)), perm=[1, 0, 2])",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n    "
        ],
        "tf_operators": {
            "tf.reshape": 100,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2,
                1,
                0,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "common": 2,
            "shape_tuple": 95,
            "input_var": 100,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 16,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=6, axis=2)\n",
            "return tf.tile(in1, [1, 6])",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(input=in1, repeats=6, axis=1)\n",
            "return tf.tile(in1, [1, 6])",
            "return tf.repeat(in1, 6, axis=1)\n",
            "out1 = tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 6])\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6)",
            "return tf.tile(in1, [1, 6])",
            "return tf.tile(in1, [1, 6])",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6)\n",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 6])",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=6, axis=2)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.stack([tf.fill([6], row) for row in tf.unstack(in1)])\n",
            "return tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 6, 1])\n",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.tile(in1, [1, 6])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "return tf.repeat(in1, 6, axis=0)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=0)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.tile(in1, [1, 6])\n",
            "return tf.tile(in1, [1, 6])",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.tile(in1, [1, 6])\n",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6)\n",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.repeat(in1, 6)",
            "out1 = tf.repeat(in1, repeats=6, axis=0)\nreturn out1\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 6])\n",
            "return tf.repeat(tf.expand_dims(in1, 2), 6, axis=2)",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "output = tf.repeat(in1, repeats=6, axis=1)\nreturn output\n",
            "return tf.repeat(in1, 6, axis=0)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])\n",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(tf.expand_dims(in1, 2), 6, axis=2)",
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, repeats=6, axis=0)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)\n",
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "out = tf.repeat(in1, repeats=6)\nreturn out\n",
            "return tf.broadcast_to(in1, [2, 6, 4])\n",
            "return tf.tile(in1, [1, 6])",
            "return tf.repeat(in1, repeats=6)\n",
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, 6)",
            "result = tf.tile(tf.expand_dims(in1, axis=2), multiples=[1, 1, 6])\nreturn result\n",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.tile(in1, [1, 6])\n",
            "return tf.tile(in1, [1, 6])",
            "return tf.foldl(lambda acc, _: tf.concat([acc, in1], axis=1), tf.range(6), tf.zeros([tf.shape(in1)[0], 0, tf.shape(in1)[1]]))\n",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 6])",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "out1 = tf.repeat(in1, repeats=6, axis=1)\nreturn out1\n",
            "return tf.repeat(tf.expand_dims(in1, axis=1), 6, axis=1)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, 6, axis=1)",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), repeats=6, axis=2)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(input=in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)\n    ",
            "def transform(in1):\n    out1 = tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 6])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), repeats=6, axis=2)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.stack([tf.fill([6], row) for row in tf.unstack(in1)])\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 6, 1])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    out1 = tf.repeat(in1, repeats=6, axis=0)\n    return out1\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 2), 6, axis=2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    output = tf.repeat(in1, repeats=6, axis=1)\n    return output\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=0)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 2), 6, axis=2)",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n    ",
            "def transform(in1):\n    out = tf.repeat(in1, repeats=6)\n    return out\n    ",
            "def transform(in1):\n    return tf.broadcast_to(in1, [2, 6, 4])\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    result = tf.tile(tf.expand_dims(in1, axis=2), multiples=[1, 1, 6])\n    return result\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])\n    ",
            "def transform(in1):\n    return tf.tile(in1, [1, 6])",
            "def transform(in1):\n    return tf.foldl(lambda acc, _: tf.concat([acc, in1], axis=1), tf.range(6), tf.zeros([tf.shape(in1)[0], 0, tf.shape(in1)[1]]))\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 6])",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)\n    ",
            "def transform(in1):\n    out1 = tf.repeat(in1, repeats=6, axis=1)\n    return out1\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), 6, axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 6, axis=2)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=6, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, 6)",
            "def transform(in1):\n    return tf.repeat(in1, 6, axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 6])"
        ],
        "tf_operators": {
            "tf.repeat": 69,
            "tf.expand_dims": 26,
            "tf.tile": 28,
            "tf.fill": 1,
            "tf.unstack": 1,
            "tf.stack": 1,
            "tf.broadcast_to": 1,
            "tf.range": 1,
            "tf.foldl": 1,
            "tf.zeros": 1,
            "tf.shape": 1,
            "tf.concat": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                2,
                6,
                2
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                -1,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                1,
                6
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                -1,
                1,
                1,
                6
            ],
            [
                2,
                6,
                2
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                1,
                1,
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                1,
                6
            ],
            [
                1,
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                0
            ],
            [
                6,
                1
            ],
            [
                6,
                0
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                1,
                6
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6
            ],
            [
                6,
                0
            ],
            [
                -1,
                1,
                1,
                6
            ],
            [
                2,
                6,
                2
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                2,
                6,
                2
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                0
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                2,
                6,
                2
            ],
            [
                6
            ],
            [
                6,
                0
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                6,
                2
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6
            ],
            [
                2,
                6,
                4
            ],
            [
                1,
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                2,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                1,
                6
            ],
            [
                1,
                6
            ],
            [
                1,
                6,
                0,
                0,
                1
            ],
            [
                -1,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                2,
                6,
                2
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                2,
                1,
                1,
                6
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            4,
            6,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 103,
            "shape_tuple": 0,
            "input_var": 102,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 26,
            "provided": 99,
            "tf_float32": 0,
            "shape": 1,
            "tf_bool": 0
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n",
            "def transform(in1, in2):\n    unique_values, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, _ = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, tf.dtypes.cast(tf.argsort(in1), tf.int32))\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(tf.constant(in2), tf.constant(in1))",
            "def transform(in1, in2):\n    unique_elements, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    grouped_max = tf.math.segment_max(data=in2, segment_ids=in1)\n    return grouped_max\n",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    max_group = tf.math.segment_max(in2, in1)\n    return max_group\n",
            "return tf.math.segment_max(in2, in1)",
            "\nreturn tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n",
            "def transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, unique_idx)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return segments\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, idx = tf.unique_with_counts(in1)\n    result = tf.math.segment_max(in2, idx)\n    return result\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    max_values = tf.math.segment_max(in2, segment_ids=in1)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    unique_vals, idx = tf.unique(in1)\n    return tf.math.segment_max(in2, idx)\n",
            "def transform(in1, in2):\n    result = tf.math.segment_max(in2, in1)\n    return result\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.reduce_max(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.gather_nd(in2, tf.expand_dims(tf.argmax(in1, axis=0), axis=1))\n",
            "def transform(in1, in2):\n    max_values, _ = tf.math.segment_max(in2, in1)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    output = tf.math.segment_max(in2, in1)\n    return output\n",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, unique_idx)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    segments = tf.unique(in1).y\n    max_values = tf.math.segment_max(in2, segments)\n    return max_values\n",
            "def transform(in1, in2):\n    indices = tf.argsort(in1)\n    unique_values, _ = tf.unique_with_counts(in1)\n    max_values = tf.math.segment_max(in2, segment_ids=indices)\n    return max_values\n
            "return tf.gather(in2, tf.argmax(in1))\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.gather(in2, tf.argmax(in2, axis=1))\n",
            "return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.gather(params=in2, indices=tf.math.segment_max(data=in1, segment_ids=in2))\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.unsorted_segment_max(tf.cast(in2, tf.int32), tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n",
            "def transform(in1, in2):\n    unique_values, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, _ = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, tf.dtypes.cast(tf.argsort(in1), tf.int32))\n    return max_values\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(tf.constant(in2), tf.constant(in1))",
            "def transform(in1, in2):\n    unique_elements, idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, idx)\n    return max_values\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    grouped_max = tf.math.segment_max(data=in2, segment_ids=in1)\n    return grouped_max\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    max_group = tf.math.segment_max(in2, in1)\n    return max_group\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    \n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n    ",
            "def transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, unique_idx)\n    return max_values\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return segments\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, idx = tf.unique_with_counts(in1)\n    result = tf.math.segment_max(in2, idx)\n    return result\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    max_values = tf.math.segment_max(in2, segment_ids=in1)\n    return max_values\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    unique_vals, idx = tf.unique(in1)\n    return tf.math.segment_max(in2, idx)\n",
            "def transform(in1, in2):\n    result = tf.math.segment_max(in2, in1)\n    return result\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.reduce_max(tf.math.segment_max(in2, in1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(tf.argmax(in1, axis=0), axis=1))\n    ",
            "def transform(in1, in2):\n    max_values, _ = tf.math.segment_max(in2, in1)\n    return max_values\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    output = tf.math.segment_max(in2, in1)\n    return output\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, unique_idx)\n    return max_values\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    segments = tf.unique(in1).y\n    max_values = tf.math.segment_max(in2, segments)\n    return max_values\n",
            "def transform(in1, in2):\n    indices = tf.argsort(in1)\n    unique_values, _ = tf.unique_with_counts(in1)\n    max_values = tf.math.segment_max(in2, segment_ids=indices)\n    return max_values\n
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argmax(in1))\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argmax(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.gather(params=in2, indices=tf.math.segment_max(data=in1, segment_ids=in2))\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(tf.cast(in2, tf.int32), tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 73,
            "tf.unique": 8,
            "tf.math.unsorted_segment_max": 23,
            "tf.reduce_max": 25,
            "tf.int32": 2,
            "tf.dtypes.cast": 1,
            "tf.argsort": 2,
            "tf.constant": 1,
            "tf.unique_with_counts": 2,
            "tf.argmax": 3,
            "tf.gather_nd": 1,
            "tf.expand_dims": 1,
            "tf.gather": 3,
            "tf.unsorted_segment_max": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 28,
            "shape_tuple": 0,
            "input_var": 229,
            "tf_int64": 0,
            "tf_int32": 3,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.math.segment_max(in2, unique_idx)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "return tf.tensordot(tf.cast(in1, tf.int32), tf.one_hot(in2, tf.reduce_max(in2) + 1), axes=1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)",
            "def transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return tf.math.argmax(in2, axis=0)\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    groups = tf.argsort(in1)\n    sorted_values = tf.gather(in2, groups)\n    max_indices = tf.argmax(sorted_values, axis=-1, output_type=tf.int32)\n    return tf.gather(groups, max_indices)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    segment_ids = tf.cast(in1, tf.int32)\n    data = in2\n    seg_max = tf.math.segment_max(data, segment_ids)\n    return tf.argmax(seg_max, axis=0)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n",
            "return tf.argmax(tf.segment_max(in1, in2), axis=1)\n",
            "values = tf.gather(in2, in1)\nreturn tf.math.argmax(values, axis=0, output_type=tf.int32)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=-1)",
            "return tf.argmax(tf.unstack(in2), axis=1)",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.unsorted_segment_max(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n",
            "def transform(in1, in2):\n    unique_values, unique_indices = tf.unique(in1)\n    return tf.math.argmax(tf.gather(in2, unique_indices))",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, 6), axis=0)\n",
            "def transform(in1, in2):\n    unique_elements, _ = tf.unique(in1)\n    max_indices = tf.gather(tf.argmax(in2, axis=0), unique_elements)\n    return max_indices\n",
            "return tf.argmax(tf.unstack(in2, in1), axis=1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)\n",
            "return tf.math.unsorted_segment_max(in2, in1, 6)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_vals, _ = tf.unique(in1)\n    argmax_vals = tf.argmax(tf.scatter_nd(tf.expand_dims(in1, 1), in2, (tf.reduce_max(in1) + 1)))\n    return tf.gather(argmax_vals, tf.searchsorted(unique_vals, in1, side='left'))\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=1)",
            "def transform(in1, in2):\n    grouped_max = tf.math.segment_max(in2, segment_ids=in1)\n    result = tf.argmax(grouped_max, axis=1)\n    return result\n",
            "values = tf.cast(in1, tf.float32)\nsegment_ids = in2\nmax_indices = tf.math.segment_max(values, segment_ids)\nreturn max_indices\n",
            "max_values, _ = tf.math.top_k(in2, k=1)\nreturn tf.unsorted_segment_max(max_values, in1, num_segments=tf.reduce_max(in1)+1)\n",
            "return tf.argmax(tf.unsorted_segment_max(in2, in1, num_segments=tf.reduce_max(in1)+1), axis=1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    unique_segments, _ = tf.unique(in1)\n    argmax_values = tf.gather(tf.math.argmax(in2, axis=0), unique_segments)\n    return argmax_values\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n      ",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=1)",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    unique_values, unique_idx, _ = tf.unique_with_counts(in1)\n    group_max_values = tf.gather(in2, tf.math.unsorted_segment_max(in2, unique_idx, tf.size(unique_values)))\n    return group_max_values\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=0)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    unique_segments, _ = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, in1)\n    return tf.argmax(max_values, axis=1)\n",
            "def transform(in1, in2):\n    segment_ids = in1\n    data = in2\n    max_indices = tf.math.segment_max(data, segment_ids)\n    return max_indices\n",
            "return tf.math.segment_max(in2, in1)",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nunique_indices, _ = tf.unique(sorted_indices)\nmax_values = tf.gather(sorted_values, tf.argmax(sorted_values, axis=-1))\nresult = tf.gather(max_values, unique_indices)\nreturn result\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.unstack(in2), axis=1)\n",
            "return tf.argmax(tf.math.segment_max(in1, in2), axis=1)\n",
            "def transform(in1, in2):\n    unique_groups, _ = tf.unique(in1)\n    result = tf.argmax(in2, axis=0)\n    return tf.gather(result, unique_groups)\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.argmax(tf.unstack(in2), axis=1)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.math.segment_max(in2, unique_idx)\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in1, tf.int32), tf.one_hot(in2, tf.reduce_max(in2) + 1), axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)",
            "def transform(in1, in2):\n    segments = tf.math.segment_max(in2, in1)\n    return tf.math.argmax(in2, axis=0)\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    groups = tf.argsort(in1)\n    sorted_values = tf.gather(in2, groups)\n    max_indices = tf.argmax(sorted_values, axis=-1, output_type=tf.int32)\n    return tf.gather(groups, max_indices)\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    segment_ids = tf.cast(in1, tf.int32)\n    data = in2\n    seg_max = tf.math.segment_max(data, segment_ids)\n    return tf.argmax(seg_max, axis=0)\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.segment_max(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    values = tf.gather(in2, in1)\n    return tf.math.argmax(values, axis=0, output_type=tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=-1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.unstack(in2), axis=1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n    ",
            "def transform(in1, in2):\n    unique_values, unique_indices = tf.unique(in1)\n    return tf.math.argmax(tf.gather(in2, unique_indices))",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, 6), axis=0)\n    ",
            "def transform(in1, in2):\n    unique_elements, _ = tf.unique(in1)\n    max_indices = tf.gather(tf.argmax(in2, axis=0), unique_elements)\n    return max_indices\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.unstack(in2, in1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, 6)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    unique_vals, _ = tf.unique(in1)\n    argmax_vals = tf.argmax(tf.scatter_nd(tf.expand_dims(in1, 1), in2, (tf.reduce_max(in1) + 1)))\n    return tf.gather(argmax_vals, tf.searchsorted(unique_vals, in1, side='left'))\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.argmax(tf.math.segment_max(in2, in1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=1)",
            "def transform(in1, in2):\n    grouped_max = tf.math.segment_max(in2, segment_ids=in1)\n    result = tf.argmax(grouped_max, axis=1)\n    return result\n",
            "def transform(in1, in2):\n    values = tf.cast(in1, tf.float32)\n    segment_ids = in2\n    max_indices = tf.math.segment_max(values, segment_ids)\n    return max_indices\n    ",
            "def transform(in1, in2):\n    max_values, _ = tf.math.top_k(in2, k=1)\n    return tf.unsorted_segment_max(max_values, in1, num_segments=tf.reduce_max(in1)+1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.unsorted_segment_max(in2, in1, num_segments=tf.reduce_max(in1)+1), axis=1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    unique_segments, _ = tf.unique(in1)\n    argmax_values = tf.gather(tf.math.argmax(in2, axis=0), unique_segments)\n    return argmax_values\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n          ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    unique_values, unique_idx, _ = tf.unique_with_counts(in1)\n    group_max_values = tf.gather(in2, tf.math.unsorted_segment_max(in2, unique_idx, tf.size(unique_values)))\n    return group_max_values\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=0)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    unique_segments, _ = tf.unique(in1)\n    max_values = tf.math.segment_max(in2, in1)\n    return tf.argmax(max_values, axis=1)\n",
            "def transform(in1, in2):\n    segment_ids = in1\n    data = in2\n    max_indices = tf.math.segment_max(data, segment_ids)\n    return max_indices\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in2, sorted_indices)\n    unique_indices, _ = tf.unique(sorted_indices)\n    max_values = tf.gather(sorted_values, tf.argmax(sorted_values, axis=-1))\n    result = tf.gather(max_values, unique_indices)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.unstack(in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    unique_groups, _ = tf.unique(in1)\n    result = tf.argmax(in2, axis=0)\n    return tf.gather(result, unique_groups)\n",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    return tf.argmax(tf.unstack(in2), axis=1)\n    "
        ],
        "tf_operators": {
            "tf.math.unsorted_segment_max": 22,
            "tf.reduce_max": 26,
            "tf.unique": 8,
            "tf.math.segment_max": 59,
            "tf.argmax": 39,
            "tf.int32": 4,
            "tf.cast": 3,
            "tf.one_hot": 1,
            "tf.tensordot": 1,
            "tf.unsorted_segment_max": 5,
            "tf.math.argmax": 5,
            "tf.gather": 9,
            "tf.argsort": 2,
            "tf.segment_max": 1,
            "tf.unstack": 4,
            "tf.scatter_nd": 1,
            "tf.expand_dims": 1,
            "tf.searchsorted": 1,
            "tf.float32": 1,
            "tf.math.top_k": 1,
            "tf.unique_with_counts": 1,
            "tf.size": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 3,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [
                1
            ],
            [],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [],
            [],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                6,
                0
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                6
            ],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [
                1,
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1,
            6
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 71,
            "shape_tuple": 0,
            "input_var": 228,
            "tf_int64": 0,
            "tf_int32": 4,
            "axis": 0,
            "provided": 2,
            "tf_float32": 1,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "mask = tf.sequence_mask(in1)\nreturn mask\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    sequence_mask = tf.sequence_mask(in1)\n    return sequence_mask\n",
            "def transform(input_lengths):\n    max_length = tf.reduce_max(input_lengths)\n    mask = tf.sequence_mask(input_lengths, max_length)\n    return mask",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "return tf.transpose(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)))\n",
            "return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n",
            "def transform(input):\n    return tf.sequence_mask(input)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    max_len = tf.reduce_max(in1)\n    lengths = tf.expand_dims(in1, axis=-1)\n    range_tensor = tf.range(max_len)\n    mask = tf.less(range_tensor, lengths)\n    padded_mask = tf.pad(mask, paddings=[[0, 0], [0, tf.maximum(0, tf.reduce_max(max_len - in1))]], mode='CONSTANT', constant_values=0)\n    return tf.cast(padded_mask, tf.int32)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.cast(tf.sequence_mask(in1), tf.int32)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    mask = tf.sequence_mask(in1)\n    return mask\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    sequence_mask = tf.sequence_mask(in1)\n    return sequence_mask\n",
            "def transform(input_lengths):\n    max_length = tf.reduce_max(input_lengths)\n    mask = tf.sequence_mask(input_lengths, max_length)\n    return mask",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.transpose(tf.sequence_mask(in1, maxlen=tf.reduce_max(in1)))\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, 5), tf.int32)\n    ",
            "def transform(input):\n    return tf.sequence_mask(input)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    max_len = tf.reduce_max(in1)\n    lengths = tf.expand_dims(in1, axis=-1)\n    range_tensor = tf.range(max_len)\n    mask = tf.less(range_tensor, lengths)\n    padded_mask = tf.pad(mask, paddings=[[0, 0], [0, tf.maximum(0, tf.reduce_max(max_len - in1))]], mode='CONSTANT', constant_values=0)\n    return tf.cast(padded_mask, tf.int32)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.cast(tf.sequence_mask(in1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.sequence_mask(in1)",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=5)\n    "
        ],
        "tf_operators": {
            "tf.sequence_mask": 99,
            "tf.reduce_max": 13,
            "tf.transpose": 1,
            "tf.int32": 4,
            "tf.cast": 4,
            "tf.range": 1,
            "tf.pad": 1,
            "tf.maximum": 1,
            "tf.less": 1,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [
                -1,
                0,
                0,
                0,
                0,
                0
            ],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [
                5
            ],
            [],
            [],
            [],
            [
                5
            ],
            [],
            [],
            [],
            [
                5
            ],
            [
                5
            ],
            [
                5
            ]
        ],
        "all_constants": [
            0,
            5,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 6,
            "shape_tuple": 0,
            "input_var": 114,
            "tf_int64": 0,
            "tf_int32": 4,
            "axis": 0,
            "provided": 17,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "segmented_data = tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\nsorted_indices = tf.argsort(in1)\nreturn tf.gather(segmented_data, sorted_indices)\n",
            "seg_data = tf.math.unsorted_segment_sum(in2, in1, 3)\nsorted_indices = tf.argsort(in1)\nreturn tf.gather(seg_data, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.math.segment_min(in2, in1)",
            "return tf.math.unsorted_segment_sum(in2, in1, 3)\n",
            "perm = tf.argsort(in1)\nreturn tf.gather(in2, perm)\n",
            "return tf.math.segment_max(in2, in1)\n",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.math.unsorted_segment_sum(in2, in1, 3)\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "def transform(in1, in2):\n    values, indices = tf.sort(in2, axis=0)\n    return tf.gather(values, indices)\n",
            "segments = tf.math.segment_sum(in2, in1)\nsorted_segments = tf.sort(segments)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    data = tf.constant(in2)\n    segment_ids = tf.constant(in1)\n    sorted_data = tf.math.unsorted_segment_min(data, segment_ids, num_segments=tf.reduce_max(segment_ids)+1)\n    return sorted_data\n",
            "values, _ = tf.unique(in1)\nreturn tf.gather(values, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "segments = tf.argsort(in1)\nout = tf.gather(in2, segments)\nreturn out\n",
            "segments = tf.argsort(in1)\nresult = tf.gather(in2, segments)\nreturn result\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n",
            "return tf.math.unsorted_segment_max(in2, in1, 3)\n",
            "values = tf.stack([in1, in2], axis=1)\nsorted_values = tf.gather(values, tf.argsort(values[:, 0]))\nreturn sorted_values[:, 1]\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "values = tf.gather(params=in2, indices=tf.argsort(in1))\nreturn values\n",
            "segments = tf.math.segment_sum(in2, in1)\nsorted_segments = tf.argsort(segments)\nreturn tf.gather(in2, sorted_segments)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    out1 = tf.gather(in2, sorted_indices)\n    return out1\n",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn tf.scatter_nd(tf.expand_dims(tf.cast(tf.range(tf.size(in1)), tf.int32), 1), sorted_values, tf.shape(in2))\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "values = tf.gather(in2, tf.argsort(in1))\nreturn values\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn sorted_values\n",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "segment_ids_unique, _ = tf.unique(in1)\nsorted_idx = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_idx)\nreturn tf.segment_sum(sorted_values, segment_ids_unique)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "indices = tf.argsort(in1)\nreturn tf.gather(in2, indices)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "def transform(in1, in2):\n    indices = tf.argsort(in1)\n    out = tf.gather(in2, indices)\n    return out\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "batch_dims = 0\nreturn tf.gather(params=in2, indices=tf.argsort(in1), axis=0, batch_dims=batch_dims)\n",
            "return tf.gather_nd(tf.stack([in2, in1], axis=1), tf.argsort(in1))",
            "return tf.math.unsorted_segment_min(in2, in1, tf.reduce_max(in1)+1)\n",
            "return tf.boolean_mask(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1, stable=True))",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1, axis=0))",
            "return tf.boolean_mask(in2, tf.argsort(in1))\n",
            "sorted_indices = tf.argsort(in1)\nout = tf.gather(in2, sorted_indices)\nreturn out\n",
            "# Sort input values based on segment_ids\nsorted_values, _ = tf.math.top_k(tf.gather(in2, tf.argsort(in1)), k=tf.shape(in2)[0])\nreturn sorted_values\n",
            "sorted_indices = tf.argsort(in1)\nout = tf.gather(in2, sorted_indices)\nreturn out\n",
            "return tf.math.segment_max(in2, in1)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "concatenated = tf.stack([in1, in2], axis=1)\nsorted_concatenated = tf.gather_nd(concatenated, tf.argsort(concatenated[:, 0]))\nreturn tf.gather_nd(sorted_concatenated, tf.argsort(tf.argsort(concatenated[:, 0])))\n",
            "def transform(in1, in2):\n    data = in2\n    segment_ids = in1\n    sorted_indices = tf.argsort(segment_ids)\n    sorted_data = tf.gather(data, sorted_indices)\n    return sorted_data\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1), axis=0)\n",
            "sorted_indices = tf.argsort(in1)\nsorted_in2 = tf.gather(in2, sorted_indices)\nreturn sorted_in2\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n",
            "values = tf.gather(in2, tf.argsort(in1))\nreturn values\n",
            "return tf.math.unsorted_segment_max(in2, in1, 3)\n  ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2",
            "return tf.gather(in2, tf.argsort(in1), axis=0)\n",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)\n",
            "perm = tf.argsort(in1)\nreturn tf.gather(in2, perm)\n",
            "return tf.math.segment_min(in2, in1)\n",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1)+1)\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "return tf.math.unsorted_segment_sum(in2, tf.argsort(in1), tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n",
            "return tf.boolean_mask(tf.sort(in2), tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "segment_ids, sorted_indices = tf.math.top_k(in1, k=tf.reduce_max(in1) + 1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn sorted_values\n",
            "return tf.boolean_mask(in2, tf.argsort(in1))",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "sorted_indices = tf.argsort(in1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn tf.math.segment_sum(sorted_values, in1)\n",
            "return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.gather(in2, tf.argsort(in1))",
            "values = tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\nsorted_values, _ = tf.sort(values)\nreturn sorted_values\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n",
            "seg_indices, _ = tf.unique(in1)\nsorted_indices = tf.argsort(seg_indices)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn tf.concat(sorted_values, axis=0)\n",
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "return tf.gather(params=in2, indices=tf.argsort(in1))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    segmented_data = tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(segmented_data, sorted_indices)\n    ",
            "def transform(in1, in2):\n    seg_data = tf.math.unsorted_segment_sum(in2, in1, 3)\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(seg_data, sorted_indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_min(in2, in1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, in1, 3)\n    ",
            "def transform(in1, in2):\n    perm = tf.argsort(in1)\n    return tf.gather(in2, perm)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    sorted_values = tf.gather(in2, segments)\n    return sorted_values\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, in1, 3)\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n    ",
            "def transform(in1, in2):\n    values, indices = tf.sort(in2, axis=0)\n    return tf.gather(values, indices)\n",
            "def transform(in1, in2):\n    segments = tf.math.segment_sum(in2, in1)\n    sorted_segments = tf.sort(segments)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    data = tf.constant(in2)\n    segment_ids = tf.constant(in1)\n    sorted_data = tf.math.unsorted_segment_min(data, segment_ids, num_segments=tf.reduce_max(segment_ids)+1)\n    return sorted_data\n",
            "def transform(in1, in2):\n    values, _ = tf.unique(in1)\n    return tf.gather(values, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    out = tf.gather(in2, segments)\n    return out\n    ",
            "def transform(in1, in2):\n    segments = tf.argsort(in1)\n    result = tf.gather(in2, segments)\n    return result\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, 3)\n    ",
            "def transform(in1, in2):\n    values = tf.stack([in1, in2], axis=1)\n    sorted_values = tf.gather(values, tf.argsort(values[:, 0]))\n    return sorted_values[:, 1]\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    values = tf.gather(params=in2, indices=tf.argsort(in1))\n    return values\n    ",
            "def transform(in1, in2):\n    segments = tf.math.segment_sum(in2, in1)\n    sorted_segments = tf.argsort(segments)\n    return tf.gather(in2, sorted_segments)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    out1 = tf.gather(in2, sorted_indices)\n    return out1\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in2, sorted_indices)\n    return tf.scatter_nd(tf.expand_dims(tf.cast(tf.range(tf.size(in1)), tf.int32), 1), sorted_values, tf.shape(in2))\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    values = tf.gather(in2, tf.argsort(in1))\n    return values\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in2, sorted_indices)\n    return sorted_values\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n    ",
            "def transform(in1, in2):\n    segment_ids_unique, _ = tf.unique(in1)\n    sorted_idx = tf.argsort(in1)\n    sorted_values = tf.gather(in2, sorted_idx)\n    return tf.segment_sum(sorted_values, segment_ids_unique)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    indices = tf.argsort(in1)\n    return tf.gather(in2, indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    indices = tf.argsort(in1)\n    out = tf.gather(in2, indices)\n    return out\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    batch_dims = 0\n    return tf.gather(params=in2, indices=tf.argsort(in1), axis=0, batch_dims=batch_dims)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(tf.stack([in2, in1], axis=1), tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_min(in2, in1, tf.reduce_max(in1)+1)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, stable=True))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1, axis=0))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    out = tf.gather(in2, sorted_indices)\n    return out\n    ",
            "def transform(in1, in2):\n    # Sort input values based on segment_ids\n    sorted_values, _ = tf.math.top_k(tf.gather(in2, tf.argsort(in1)), k=tf.shape(in2)[0])\n    return sorted_values\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    out = tf.gather(in2, sorted_indices)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_max(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n    ",
            "def transform(in1, in2):\n    concatenated = tf.stack([in1, in2], axis=1)\n    sorted_concatenated = tf.gather_nd(concatenated, tf.argsort(concatenated[:, 0]))\n    return tf.gather_nd(sorted_concatenated, tf.argsort(tf.argsort(concatenated[:, 0])))\n    ",
            "def transform(in1, in2):\n    data = in2\n    segment_ids = in1\n    sorted_indices = tf.argsort(segment_ids)\n    sorted_data = tf.gather(data, sorted_indices)\n    return sorted_data\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1), axis=0)\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n",
            "def transform(in1, in2):\n    values = tf.gather(in2, tf.argsort(in1))\n    return values\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_max(in2, in1, 3)\n      ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)\n    ",
            "def transform(in1, in2):\n    perm = tf.argsort(in1)\n    return tf.gather(in2, perm)\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_min(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1)+1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in2, tf.argsort(in1), tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(tf.sort(in2), tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    segment_ids, sorted_indices = tf.math.top_k(in1, k=tf.reduce_max(in1) + 1)\n    sorted_values = tf.gather(in2, sorted_indices)\n    return sorted_values\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in2, sorted_indices)\n    return tf.math.segment_sum(sorted_values, in1)\n    ",
            "def transform(in1, in2):\n    return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))",
            "def transform(in1, in2):\n    values = tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n    sorted_values, _ = tf.sort(values)\n    return sorted_values\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.argsort(in1))\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    sorted_in2 = tf.gather(in2, sorted_indices)\n    return sorted_in2\n",
            "def transform(in1, in2):\n    seg_indices, _ = tf.unique(in1)\n    sorted_indices = tf.argsort(seg_indices)\n    sorted_values = tf.gather(in2, sorted_indices)\n    return tf.concat(sorted_values, axis=0)\n    ",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in2, indices=tf.argsort(in1))\n    "
        ],
        "tf_operators": {
            "tf.gather": 76,
            "tf.argsort": 81,
            "tf.math.unsorted_segment_max": 4,
            "tf.reduce_max": 11,
            "tf.math.unsorted_segment_sum": 8,
            "tf.math.segment_min": 2,
            "tf.math.segment_max": 2,
            "tf.sort": 4,
            "tf.math.segment_sum": 3,
            "tf.math.unsorted_segment_min": 2,
            "tf.constant": 1,
            "tf.unique": 3,
            "tf.stack": 3,
            "tf.range": 1,
            "tf.shape": 2,
            "tf.size": 1,
            "tf.int32": 1,
            "tf.scatter_nd": 1,
            "tf.cast": 1,
            "tf.expand_dims": 1,
            "tf.segment_sum": 1,
            "tf.gather_nd": 2,
            "tf.boolean_mask": 4,
            "tf.math.top_k": 2,
            "tf.unsorted_segment_max": 1,
            "tf.concat": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                1
            ],
            [
                3
            ],
            [],
            [],
            [
                3
            ],
            [],
            [],
            [],
            [],
            [
                3
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                3
            ],
            [
                1,
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                1,
                0,
                0
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                3
            ],
            [],
            [
                0
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            3
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 24,
            "shape_tuple": 0,
            "input_var": 225,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 0,
            "provided": 5,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "\nreturn tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "output = tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\nreturn output\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.cast(tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1), tf.int32)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.cast(tf.math.count_nonzero(tf.greater(in1, 0), axis=1), tf.int32)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    \n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0.0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n     ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    output = tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    return output\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.cast(tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.cast(tf.math.count_nonzero(tf.greater(in1, 0), axis=1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n    "
        ],
        "tf_operators": {
            "tf.int32": 52,
            "tf.greater": 100,
            "tf.reduce_sum": 51,
            "tf.cast": 52,
            "tf.math.count_nonzero": 49
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 196,
            "shape_tuple": 0,
            "input_var": 100,
            "tf_int64": 0,
            "tf_int32": 53,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "return tf.logical_and(in1 >= 0, in1 <= 1)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "result = tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\nreturn tf.cast(result, tf.int32)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "out = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn out\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), 1, 0)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(in1 >= 0, in1 <= 1)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(in1 >= 0, in1 <= 1)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.where(tf.logical_and(in1 >= 0, in1 <= 1), 1, 0)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "result = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\nreturn result\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "result = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn result\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "\nreturn tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "output = tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\nreturn tf.cast(output, tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), 1, 0)\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(in1 >= 0, in1 <= 1)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)).numpy().astype(int)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.where(tf.logical_and(in1 >= 0, in1 <= 1), 1, 0)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.ones_like(in1), tf.zeros_like(in1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "output = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), dtype=tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.logical_and(in1 >= 0, in1 <= 1)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    result = tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    return tf.cast(result, tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    out = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n    return out\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), 1, 0)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(in1 >= 0, in1 <= 1)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(in1 >= 0, in1 <= 1)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.where(tf.logical_and(in1 >= 0, in1 <= 1), 1, 0)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    result = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n    return result\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    result = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n    return result\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    \n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    output = tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    return tf.cast(output, tf.int32)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), 1, 0)\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(in1 >= 0, in1 <= 1)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less(in1, 1)).numpy().astype(int)\n",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.where(tf.logical_and(in1 >= 0, in1 <= 1), 1, 0)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.ones_like(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n    ",
            "def transform(in1):\n    output = tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), dtype=tf.int32)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "def transform(in1):\n    return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)"
        ],
        "tf_operators": {
            "tf.logical_and": 97,
            "tf.greater_equal": 88,
            "tf.int32": 34,
            "tf.less_equal": 84,
            "tf.cast": 34,
            "tf.where": 5,
            "tf.less": 4,
            "tf.math.logical_and": 3,
            "tf.ones_like": 1,
            "tf.zeros_like": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 208,
            "shape_tuple": 0,
            "input_var": 203,
            "tf_int64": 0,
            "tf_int32": 34,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "result = tf.concat([in1, in2], axis=1)\nreturn result\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "output = tf.concat([in1, in2], axis=1)\nreturn output\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n  ",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    result = tf.concat([in1, in2], axis=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    output = tf.concat([in1, in2], axis=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n      ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1, in2], axis=-1)\n    "
        ],
        "tf_operators": {
            "tf.concat": 100
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 100,
            "shape_tuple": 0,
            "input_var": 200,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "pad_top = tf.constant([[0, 0], [0, 1]])\npad_bottom = tf.constant([[0, 0], [1, 0]])\npad_left = tf.constant([[0, 0], [1, 0]])\npad_right = tf.constant([[0, 0], [0, 1]])\ntop_values = tf.pad(in1[:, :-1], pad_top)\nbottom_values = tf.pad(in1[:, 1:], pad_bottom)\nleft_values = tf.pad(in1[:, 1:], pad_left)\nright_values = tf.pad(in1[:, :-1], pad_right)\ncircular_buffer = tf.concat([top_values, bottom_values, left_values, right_values], axis=1)\nreturn circular_buffer\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "\nreturn tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, 1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=-1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n  ",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, 1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(tf.transpose(in1), shift=1, axis=0)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, 1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, 1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=-1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    pad_top = tf.constant([[0, 0], [0, 1]])\n    pad_bottom = tf.constant([[0, 0], [1, 0]])\n    pad_left = tf.constant([[0, 0], [1, 0]])\n    pad_right = tf.constant([[0, 0], [0, 1]])\n    top_values = tf.pad(in1[:, :-1], pad_top)\n    bottom_values = tf.pad(in1[:, 1:], pad_bottom)\n    left_values = tf.pad(in1[:, 1:], pad_left)\n    right_values = tf.pad(in1[:, :-1], pad_right)\n    circular_buffer = tf.concat([top_values, bottom_values, left_values, right_values], axis=1)\n    return circular_buffer\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    \n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, 1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n  ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, 1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(tf.transpose(in1), shift=1, axis=0)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, 1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, 1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n    "
        ],
        "tf_operators": {
            "tf.roll": 99,
            "tf.pad": 1,
            "tf.concat": 1,
            "tf.constant": 1,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                -1,
                1,
                1,
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 21,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 219,
            "shape_tuple": 0,
            "input_var": 103,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(input):\n    return tf.pad(input, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "\nreturn tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0,0],[0,1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], \"CONSTANT\")\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n  ",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0,0],[0,1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(input):\n    return tf.pad(input, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    \n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0,0],[0,1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], \"CONSTANT\")\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n      ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0,0],[0,1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n    "
        ],
        "tf_operators": {
            "tf.pad": 100
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 400,
            "shape_tuple": 0,
            "input_var": 100,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n  ",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats=in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats)\n",
            "return tf.repeat(in1, repeats)\n",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "result = tf.repeat(in1, in2)\nreturn result\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2, axis=0)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, repeats)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "output = tf.repeat(in1, in2)\nreturn output\n",
            "result = tf.repeat(in1, in2)\nresult = tf.boolean_mask(result, tf.not_equal(result, 0))\nreturn result\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "output = tf.repeat(in1, in2)\nreturn output\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "result = tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "repeated = tf.repeat(in1, in2)\nreturn repeated\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, repeats=in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, repeats)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "out = tf.repeat(in1, in2)\nreturn out\n",
            "return tf.repeat(in1, in2)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n      ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, repeats=in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, repeats)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, repeats)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    out = tf.repeat(in1, in2)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    result = tf.repeat(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, repeats)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    output = tf.repeat(in1, in2)\n    return output\n    ",
            "def transform(in1, in2):\n    result = tf.repeat(in1, in2)\n    result = tf.boolean_mask(result, tf.not_equal(result, 0))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    out = tf.repeat(in1, in2)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    out = tf.repeat(in1, in2)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    out = tf.repeat(in1, in2)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    output = tf.repeat(in1, in2)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    out = tf.repeat(in1, in2)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, repeats)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    result = tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    repeated = tf.repeat(in1, in2)\n    return repeated\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, repeats=in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, repeats)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)",
            "def transform(in1, in2):\n    out = tf.repeat(in1, in2)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.repeat(in1, in2)\n    "
        ],
        "tf_operators": {
            "tf.repeat": 100,
            "tf.boolean_mask": 1,
            "tf.not_equal": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 2,
            "shape_tuple": 0,
            "input_var": 195,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10 * in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(in2))\n",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    condition = tf.convert_to_tensor(in1, dtype=tf.bool)\n    data = tf.convert_to_tensor(in2, dtype=tf.int32)\n    \n    result = tf.where(condition, data, -10 * data)\n    \nreturn result.numpy()\n",
            "return tf.where(tf.expand_dims(in1, axis=-1), in2, -1*in2)",
            "return tf.where(in1, in2, -10*in2)",
            "output = tf.where(in1, in2, -10 * in2)\n",
            "return tf.where(in1, in2, -in2)\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(tf.expand_dims(in1, axis=-1), in2, -10 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10 * in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10 * in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, in2 * -10)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -1 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(tf.cast(in1, tf.bool), in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -1*in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, in2 * -10)",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, -in2)\n  ",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.multiply(tf.where(in1, in2, -in2), tf.cast(in2, tf.int32))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -10 * in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(in2))\n",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    condition = tf.convert_to_tensor(in1, dtype=tf.bool)\n    data = tf.convert_to_tensor(in2, dtype=tf.int32)\n    \n    result = tf.where(condition, data, -10 * data)\n    \nreturn result.numpy()\n",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in1, axis=-1), in2, -1*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    output = tf.where(in1, in2, -10 * in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in1, axis=-1), in2, -10 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(in2))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, in2 * -10)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -1 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(tf.cast(in1, tf.bool), in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)\n    ",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -1*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(in2))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, in2 * -10)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)\n      ",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    return tf.multiply(tf.where(in1, in2, -in2), tf.cast(in2, tf.int32))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(in2))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10 * in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, tf.math.negative(in2))",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -in2)"
        ],
        "tf_operators": {
            "tf.where": 100,
            "tf.math.negative": 5,
            "tf.bool": 2,
            "tf.int32": 2,
            "tf.convert_to_tensor": 1,
            "tf.expand_dims": 2,
            "tf.cast": 2,
            "tf.multiply": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -10
            ],
            [],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [],
            [],
            [],
            [
                -10
            ],
            [
                -1,
                -1
            ],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [],
            [
                -1,
                -10
            ],
            [
                -10
            ],
            [],
            [],
            [
                -10
            ],
            [],
            [],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [
                -10
            ],
            [],
            [],
            [
                -10
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [],
            [
                -10
            ],
            [],
            [
                -1
            ],
            [
                -10
            ],
            [],
            [],
            [],
            [
                -10
            ],
            [],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [],
            [],
            [],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -10
            ],
            [],
            [],
            [
                -10
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            -10,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 5,
            "shape_tuple": 0,
            "input_var": 300,
            "tf_int64": 0,
            "tf_int32": 2,
            "axis": 0,
            "provided": 34,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 2
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, 3)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "segmented_sum = tf.math.segment_sum(in1, in2)\nreturn segmented_sum\n",
            "return tf.math.segment_sum(in1, in2)",
            "# Sum of elements in the first tensor but partitioned by the second tensor\nresult = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "segment_sum = tf.math.segment_sum(in1, in2)\nreturn segment_sum\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "segmented_sum = tf.math.segment_sum(in1, in2)\nreturn segmented_sum\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "\nreturn tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "segments_sum = tf.math.segment_sum(in1, in2)\nreturn segments_sum\n",
            "return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "return tf.math.segment_sum(in1, in2)\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "return tf.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "sum_segments = tf.math.segment_sum(in1, in2)\nreturn sum_segments\n",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "return tf.math.unsorted_segment_sum(in1, in2, 3)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.cast(tf.math.segment_sum(in1, in2), tf.int32)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, 3)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    result = tf.math.segment_sum(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    # Sum of elements in the first tensor but partitioned by the second tensor\n    result = tf.math.segment_sum(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segment_sum = tf.math.segment_sum(in1, in2)\n    return segment_sum\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    result = tf.math.segment_sum(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    \n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    result = tf.math.segment_sum(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1), in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segments_sum = tf.math.segment_sum(in1, in2)\n    return segments_sum\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    result = tf.math.segment_sum(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    sum_segments = tf.math.segment_sum(in1, in2)\n    return sum_segments\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    result = tf.math.segment_sum(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, 3)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, 4)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.cast(tf.math.segment_sum(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    segmented_sum = tf.math.segment_sum(in1, in2)\n    return segmented_sum\n",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)"
        ],
        "tf_operators": {
            "tf.reduce_max": 59,
            "tf.math.unsorted_segment_sum": 63,
            "tf.math.segment_sum": 36,
            "tf.gather": 1,
            "tf.unsorted_segment_sum": 1,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                3
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                4
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                4
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                3
            ],
            [
                1
            ],
            [
                4
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 59,
            "shape_tuple": 0,
            "input_var": 260,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 0,
            "provided": 5,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "result = tf.scatter_nd(tf.expand_dims(in2, axis=-1), in1, tf.shape(in1))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))",
            "return tf.gather_nd(in1, in2)",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=1)",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "\nreturn tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.scatter_nd(in2, in1, tf.shape(in1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), tf.argmax(in2, axis=1)], axis=1))",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=-1))\n",
            "return tf.scatter_nd(in2, in1, in1.shape)\n",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "output = tf.tensor_scatter_nd_update(in1, tf.expand_dims(in2, axis=-1), tf.gather_nd(in1, tf.expand_dims(in2, axis=-1)))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "return tf.gather(in1, tf.argsort(tf.argsort(in2, stable=True), stable=True, axis=1), axis=1)\n",
            "return tf.gather_nd(in1, tf.transpose(in2))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))\n",
            "return tf.scatter_nd(in2, in1, tf.shape(in2))\n",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.scatter_nd(tf.expand_dims(in2, 1), in1, in1.shape)",
            "return tf.scatter_nd(in2, in1, [3, 3])\n",
            "output = tf.scatter_nd(in2, in1, tf.shape(in1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.tensor_scatter_nd_update(in1, tf.argsort(in2[0]), in1)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.scatter_nd(in2, in1, tf.shape(in1))\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1), updates=in1, shape=tf.shape(in1))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in2))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.tensor_scatter_nd_update(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1), tf.transpose(in1, perm=[1, 0]))",
            "return tf.gather_nd(in1, tf.transpose(in2))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "result = tf.scatter_nd(indices=tf.cast(in2, tf.int32), updates=in1, shape=(3, 3))\nreturn result\n",
            "result = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\n",
            "return tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=tf.shape(in1))\n",
            "return tf.gather_nd(in1, in2)",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.reshape(tf.range(tf.shape(in2)[0]), (-1, 1)), in2], axis=1)))",
            "\nreturn tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in2)[0])[:, tf.newaxis], in2], axis=-1), updates=in1, shape=tf.shape(in2))\n",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.tensor_scatter_nd_update(in1, tf.transpose(in2), tf.transpose(in1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "output = tf.scatter_nd(indices=in2, updates=in1, shape=(3,3))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, in2)\n",
            "result = tf.scatter_nd(indices=tf.transpose(tf.stack([tf.range(tf.size(in2)), tf.reshape(in2, [-1])])), updates=tf.reshape(in1, [-1]), shape=tf.shape(in1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "output = tf.tensor_scatter_nd_update(in1, in2, tf.gather_nd(in1, in2))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.transpose(tf.gather_nd(in1, in2))",
            "return tf.scatter_nd(in2, in1, [3, 3])\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(3), in2])))\n",
            "return tf.scatter_nd(in2, in1, [3,3])\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.scatter_nd(in2, in1, tf.shape(in1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather_nd(in1, tf.stack(in2, axis=1))",
            "return tf.gather_nd(in1, in2)",
            "return tf.gather_nd(in1, tf.stack((tf.range(tf.shape(in2)[0]), in2), axis=1))\n",
            "output = tf.scatter_nd(indices=in2, updates=in1, shape=tf.shape(in1))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), tf.math.floormod(in2 + 1, 3)], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, in2)",
            "output = tf.scatter_nd(in2, in1, [3, 3])\nreturn output\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.gather_nd(in1, input)\n",
            "return tf.gather_nd(in1, tf.transpose(in2))",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))",
            "return tf.scatter_nd(tf.transpose(in2), in1, tf.shape(in1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "output = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "output = tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=(3,3))\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    result = tf.scatter_nd(tf.expand_dims(in2, axis=-1), in1, tf.shape(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    \n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), tf.argmax(in2, axis=1)], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, in1.shape)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    output = tf.tensor_scatter_nd_update(in1, tf.expand_dims(in2, axis=-1), tf.gather_nd(in1, tf.expand_dims(in2, axis=-1)))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.argsort(tf.argsort(in2, stable=True), stable=True, axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(tf.expand_dims(in2, 1), in1, in1.shape)",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 3])\n    ",
            "def transform(in1, in2):\n    output = tf.scatter_nd(in2, in1, tf.shape(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.argsort(in2[0]), in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1), updates=in1, shape=tf.shape(in1))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in2))\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1), tf.transpose(in1, perm=[1, 0]))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    result = tf.scatter_nd(indices=tf.cast(in2, tf.int32), updates=in1, shape=(3, 3))\n    return result\n    ",
            "def transform(in1, in2):\n    result = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=tf.shape(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.reshape(tf.range(tf.shape(in2)[0]), (-1, 1)), in2], axis=1)))",
            "def transform(in1, in2):\n    \n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in2)[0])[:, tf.newaxis], in2], axis=-1), updates=in1, shape=tf.shape(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.transpose(in2), tf.transpose(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    output = tf.scatter_nd(indices=in2, updates=in1, shape=(3,3))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    result = tf.scatter_nd(indices=tf.transpose(tf.stack([tf.range(tf.size(in2)), tf.reshape(in2, [-1])])), updates=tf.reshape(in1, [-1]), shape=tf.shape(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    output = tf.tensor_scatter_nd_update(in1, in2, tf.gather_nd(in1, in2))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather_nd(in1, in2))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 3])\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(3), in2])))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3,3])\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack((tf.range(tf.shape(in2)[0]), in2), axis=1))\n    ",
            "def transform(in1, in2):\n    output = tf.scatter_nd(indices=in2, updates=in1, shape=tf.shape(in1))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), tf.math.floormod(in2 + 1, 3)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)",
            "def transform(in1, in2):\n    output = tf.scatter_nd(in2, in1, [3, 3])\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, input)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(in2))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in2)[0]), in2])))",
            "def transform(in1, in2):\n    return tf.scatter_nd(tf.transpose(in2), in1, tf.shape(in1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    output = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    output = tf.scatter_nd(indices=tf.transpose(in2), updates=in1, shape=(3,3))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    "
        ],
        "tf_operators": {
            "tf.shape": 46,
            "tf.expand_dims": 3,
            "tf.scatter_nd": 24,
            "tf.transpose": 27,
            "tf.range": 46,
            "tf.gather_nd": 71,
            "tf.stack": 47,
            "tf.gather": 2,
            "tf.argmax": 1,
            "tf.tensor_scatter_nd_update": 5,
            "tf.argsort": 2,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.reshape": 2,
            "tf.newaxis": 1,
            "tf.size": 1,
            "tf.math.floormod": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1
            ],
            [
                0
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1,
                1
            ],
            [],
            [],
            [
                0
            ],
            [],
            [
                0,
                -1
            ],
            [],
            [],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                -1,
                -1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                3,
                3
            ],
            [],
            [
                0,
                1
            ],
            [],
            [],
            [
                0
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                0,
                1,
                1,
                0
            ],
            [],
            [
                0,
                1
            ],
            [
                3,
                3
            ],
            [
                3,
                3
            ],
            [],
            [],
            [],
            [
                0,
                -1,
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                -1
            ],
            [],
            [],
            [
                0,
                1
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                -1,
                -1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0
            ],
            [],
            [],
            [
                3,
                3
            ],
            [
                3
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            [],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1,
                3,
                1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                3,
                3
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [
                0,
                1
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ],
            [
                3,
                3
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 99,
            "shape_tuple": 5,
            "input_var": 254,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 10,
            "tf_bool": 0
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)\n",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return sorted_indices\n",
            "return tf.argsort(in1)",
            "return tf.math.top_k(in1, len(in1)).indices",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "\nreturn tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)\n",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1)",
            "return tf.gather(tf.argsort(in1), tf.argsort(tf.argsort(in1)))",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=0)\n",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "\nvalues, indices = tf.nn.top_k(in1, k=tf.shape(in1)[0])\nreturn indices",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, stable=True)",
            "\nreturn tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, direction='ASCENDING')",
            "sorted_indices = tf.argsort(in1)\n  ",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.argsort(in1, axis=0)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=0)",
            "return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "return tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1, axis=0)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)",
            "return tf.gather(tf.argsort(in1), tf.argsort(tf.argsort(in1)))",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "return tf.argsort(in1, direction='ASCENDING')",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=-1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.math.top_k(in1, k=len(in1)).indices",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, stable=True)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)\n    ",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return sorted_indices\n",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.math.top_k(in1, len(in1)).indices",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    \n    return tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)\n",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1)",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.gather(tf.argsort(in1), tf.argsort(tf.argsort(in1)))",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0)\n    ",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    \n    values, indices = tf.nn.top_k(in1, k=tf.shape(in1)[0])\n    return indices",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)",
            "def transform(in1):\n    \n    return tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n      ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1, axis=0)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, axis=0)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "def transform(in1):\n    return tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1, axis=0)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1)",
            "def transform(in1):\n    return tf.gather(tf.argsort(in1), tf.argsort(tf.argsort(in1)))",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "def transform(in1):\n    return tf.argsort(in1, direction='ASCENDING')",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, axis=-1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return tf.argsort(sorted_indices)\n",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.math.top_k(in1, k=len(in1)).indices",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    ",
            "def transform(in1):\n    return tf.argsort(in1)",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)"
        ],
        "tf_operators": {
            "tf.argsort": 97,
            "tf.math.top_k": 2,
            "tf.gather": 2,
            "tf.shape": 1,
            "tf.nn.top_k": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                -1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [
                -1
            ],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 17,
            "shape_tuple": 0,
            "input_var": 106,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "result = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn result\n",
            "tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "output = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn output\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "output = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn output\n",
            "result = tf.tensor_scatter_nd_update(tensor, indices, updates)\nreturn result\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n"
        ],
        "normalized_completions": [
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    result = tf.tensor_scatter_nd_update(tensor, indices, updates)\n    return result\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    output = tf.tensor_scatter_nd_update(tensor, indices, updates)\n    return output\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    output = tf.tensor_scatter_nd_update(tensor, indices, updates)\n    return output\n    ",
            "def transform(tensor, indices, updates):\n    result = tf.tensor_scatter_nd_update(tensor, indices, updates)\n    return result\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n    ",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 100
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 0,
            "shape_tuple": 0,
            "input_var": 300,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "row_indices = tf.range(tf.shape(in1)[0])\nindices = tf.stack([row_indices, in1])\nreturn tf.reshape(indices, [-1, 2])\n",
            "indices = tf.argsort(tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1]), direction='ASCENDING')\nreturn tf.gather_nd(tf.tile(in1, [2, 1]), indices)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "indices = tf.range(tf.shape(in1)[0])\nindices = tf.repeat(indices, repeats=2)\nreturn tf.stack([tf.tile(indices, multiples=[2]), tf.reshape(in1, [-1])], axis=1)\n",
            "return tf.repeat(tf.tile(in1, [1, 2]), repeats=2, axis=0)",
            "return tf.repeat(tf.cast(tf.range(tf.shape(in1)[0]), tf.int32), 2) + tf.reshape(tf.tile(in1, [1, 2]), [-1])",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nreturn tf.concat([tf.tile(indices, [1, 2]), in1], axis=1)\n",
            "return tf.broadcast_to(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [tf.shape(in1)[0], 2])\n",
            "idx = tf.range(tf.shape(in1)[0])\nidx = tf.reshape(tf.tile(idx, [2]), [-1, 1])\nreturn tf.concat([tf.repeat(in1, repeats=2, axis=0), idx], axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "def transform(in1):\n    pairs = tf.gather(tf.tile(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [1, 2]), tf.reshape(in1, [-1]))\n    return pairs\n",
            "return tf.tile(tf.reshape(in1, (-1, 1)), [1, 2])",
            "def transform(in1):\n    row_indices = tf.range(tf.cast(tf.shape(in1)[0], tf.int64))\n    pair_indices = tf.repeat(row_indices, repeats=2)\n    new_indices = tf.transpose(tf.stack([pair_indices, tf.reshape(in1, [-1])]))\n    return new_indices\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0) \n",
            "idx = tf.range(tf.shape(in1)[0])\nidx = tf.tile(idx, [2])\nidx = tf.expand_dims(idx, 1)\nidx = tf.tile(idx, [1, 2])\nin1 = tf.cast(in1, tf.int32)\nreturn tf.concat([tf.repeat(in1, 2, axis=0), idx], axis=1)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "indices = tf.range(tf.shape(in1)[0])\nreturn tf.repeat(in1, 2, axis=1) + tf.repeat(tf.expand_dims(indices, 1), 2, axis=1)\n",
            "return tf.tile(in1, multiples=[2, 1])",
            "index = tf.range(tf.shape(in1)[0])\nreturn tf.repeat(in1, repeats=2, axis=0) + tf.repeat(index, repeats=tf.shape(in1)[1])\n",
            "row_indices = tf.range(tf.shape(in1)[0])\nreturn tf.repeat(row_indices, repeats=len(in1[0]))[:, tf.newaxis]\n",
            "indices = tf.argsort(in1[:, 0])\nreturn tf.gather(in1, indices)\n",
            "row_indices = tf.range(tf.shape(in1)[0])\nreturn tf.repeat(in1, repeats=2, axis=0) + tf.broadcast_to(row_indices, [2, tf.shape(in1)[0]]).transpose()\n",
            "def transform(in1):\n    idx = tf.argsort(in1[:,0])\n    return tf.concat([tf.repeat(tf.expand_dims(idx, 1), repeats=[1, 2], axis=1), in1], axis=0)\n",
            "indices = tf.range(0, tf.shape(in1)[0])\nreturn tf.repeat(indices, in1[:, 1] - in1[:, 0] + 1) + tf.range(0, in1[:, 1] - in1[:, 0] + 1)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    pairs = tf.expand_dims(in1, axis=1)\n    indices = tf.range(tf.shape(in1)[0], dtype=tf.int32)\n    indices = tf.expand_dims(indices, axis=1)\n    indices = tf.tile(indices, multiples=[1, tf.shape(in1)[1]])\n    output = tf.concat([indices, pairs], axis=1)\n    return output\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)\n    return tf.concat([indices, in1], axis=1)\n",
            "\nreturn tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n",
            "return tf.repeat(in1, 2, axis=1)",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, 2, axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(in1, 2, axis=0), tf.repeat(tf.range(tf.shape(in1)[0]), 2)])\n",
            "return tf.repeat(in1, 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 0), [2, 1])\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "return tf.repeat(in1, 2, axis=0) - tf.cast(tf.range(in1.shape[0])[:, None] // 2, in1.dtype)\n                                                                                                                                                                                                                ",
            "return tf.repeat(in1, [2, 2, 2], axis=0)",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "return tf.tile(in1, [1, 2])\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nreturn tf.concat([tf.reshape(tf.tile(indices, [1, 2]), [-1, 1]), in1], axis=1)\n",
            "return tf.tile(in1, [2, 1]) + tf.repeat(tf.range(len(in1)), 2)\n",
            "indices = tf.reshape(tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1), [-1, 2])\nreturn indices\n",
            "def transform(in1):\n    indices = tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1])\n    result = tf.concat([indices, in1], axis=1)\n    return result\n",
            "indices = tf.range(tf.shape(in1)[0])\nreturn tf.repeat(in1, repeats=2, axis=1) * tf.reshape(tf.ones((2, tf.shape(in1)[0])), [-1])\n",
            "return tf.repeat(in1, 2, axis=0) + tf.tile(tf.cast(tf.reduce_min(in1, axis=0), tf.int32), [tf.shape(in1)[0], 1])\n",
            "return tf.repeat(in1, 2, axis=1)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "return tf.repeat(in1, [1, 2], axis=0)",
            "return tf.tile(in1, [2, 1]) // tf.shape(in1)[0]\n",
            "indices = tf.repeat(tf.range(len(in1)), 2)\nupdates = tf.reshape(in1, [-1])\nshape = [len(in1), 2]\nreturn tf.scatter_nd(tf.expand_dims(indices, 1), updates, shape)\n",
            "indices = tf.tile(tf.expand_dims(in1, axis=-1), [1, 2])\nrow_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\nreturn tf.stack([row_indices, tf.reshape(indices, [-1])], axis=1)\n",
            "indices = tf.range(tf.shape(in1)[0])\nreturn tf.repeat(in1, 2, axis=1) * tf.cast(tf.expand_dims(indices, 1), in1.dtype)\n",
            "return tf.repeat(in1, 2, axis=1)",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.tile(in1, [2, 1])",
            "return tf.tile(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), [1, 2])\n",
            "return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "row_indices = tf.range(in1.shape[0])\nrepeated_indices = tf.repeat(row_indices, repeats=2, axis=0)\nreturn tf.stack([tf.tile(in1, multiples=[1, 1]), tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 2])], axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2, 1])\n",
            "indices = tf.reshape(tf.tile(tf.range(tf.shape(in1)[0]), [tf.shape(in1)[1]]), [-1, 1])\nreturn tf.concat([indices, tf.reshape(in1, [-1, 1])], axis=1)",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, repeats=2,axis=0)",
            "return tf.repeat(in1, 2, axis=1)\n",
            "return tf.repeat(in1, 2, axis=0)\n",
            "def transform(in1):\n    indices = tf.argsort(in1[:, 0], stable=True)\n    updates = tf.tensor_scatter_nd_update(in1, tf.expand_dims(indices, 1), tf.zeros_like(in1))\n    result = tf.repeat(updates, [2, 2, 2], axis=0)\n    return result\n",
            "return tf.repeat(in1, 2, axis=0)\n",
            "indices = tf.reshape(tf.stack(tf.meshgrid(tf.range(tf.shape(in1)[0]), tf.constant([0]), indexing='ij'), -1), [-1, 1])\nreturn tf.concat([indices, in1], axis=1)\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nind = tf.repeat(indices, tf.reduce_sum(in1, axis=1), axis=1)\nreturn tf.gather_nd(tf.concat([ind, in1], axis=1), tf.argsort(ind[:, 1]))\n",
            "indices = tf.cast(tf.range(tf.shape(in1)[0]), tf.int64)\nreturn tf.repeat(in1, repeats=2, axis=0) + tf.scatter_nd(tf.expand_dims(indices, 1), in1, [tf.shape(in1)[0]*2, tf.shape(in1)[1]])\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "indices = tf.range(tf.shape(in1)[0])\nreturn tf.tile(tf.expand_dims(indices, 1), [1, 2])\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nreturn tf.concat([tf.repeat(indices, 2, 1), in1], axis=1)\n",
            "indices = tf.tile(tf.expand_dims(in1, 1), [1, 2])\nrow_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\nreturn tf.stack([row_indices, tf.reshape(indices, [-1])], 1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n",
            "indices = tf.range(tf.shape(in1)[0])\nreturn tf.tile(tf.expand_dims(indices, 1), [1, 2])\n",
            "def transform(in1):\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    pair_indices = tf.tile(in1, multiples=[2, 1])\n    return tf.stack([row_indices, pair_indices], axis=1)\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "return tf.repeat(in1, repeats=2, axis=1)\n",
            "return tf.tile(in1, [2, 1])\n",
            "row_idx = tf.range(tf.shape(in1)[0])\npair_idx = tf.gather(tf.tile(row_idx, [2]), tf.argsort(in1[:,0]))\nreturn tf.stack([tf.repeat(pair_idx, 2), tf.cast(tf.unstack(in1), tf.int32)], axis=1)\n",
            "def transform(in1):\n    pair_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    row_indices = tf.tile(tf.range(2), tf.shape(in1)[0])\nreturn tf.stack([pair_indices, in1[row_indices]], axis=1)\n",
            "idx = tf.range(tf.shape(in1)[0])\nreturn tf.stack([tf.repeat(idx, 2), tf.reshape(in1, [-1])], 1)\n",
            "return tf.repeat(in1, 2, axis=0)\n",
            "return tf.tile(in1, [2, 1])\n",
            "return tf.repeat(in1, 2, axis=1)",
            "row_idx = tf.range(tf.shape(in1)[0])\nexpanded_idx = tf.repeat(row_idx, 2)\nreturn tf.transpose(tf.stack([expanded_idx, tf.reshape(in1, [-1])]))\n",
            "return tf.repeat(in1, repeats=2, axis=0) // tf.shape(in1)[1]\n",
            "indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\nreturn tf.concat([tf.repeat(indices, 2, axis=1), in1], axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)  # pair with row index\n",
            "return tf.repeat(in1, repeats=2, axis=0)\n",
            "indices = tf.reshape(in1, [-1])\nrow_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\nreturn tf.transpose(tf.stack([row_indices, indices]))\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    row_indices = tf.range(tf.shape(in1)[0])\n    indices = tf.stack([row_indices, in1])\n    return tf.reshape(indices, [-1, 2])\n    ",
            "def transform(in1):\n    indices = tf.argsort(tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1]), direction='ASCENDING')\n    return tf.gather_nd(tf.tile(in1, [2, 1]), indices)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[0])\n    indices = tf.repeat(indices, repeats=2)\n    return tf.stack([tf.tile(indices, multiples=[2]), tf.reshape(in1, [-1])], axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.tile(in1, [1, 2]), repeats=2, axis=0)",
            "def transform(in1):\n    return tf.repeat(tf.cast(tf.range(tf.shape(in1)[0]), tf.int32), 2) + tf.reshape(tf.tile(in1, [1, 2]), [-1])",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    ",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    return tf.concat([tf.tile(indices, [1, 2]), in1], axis=1)\n    ",
            "def transform(in1):\n    return tf.broadcast_to(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [tf.shape(in1)[0], 2])\n    ",
            "def transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    idx = tf.reshape(tf.tile(idx, [2]), [-1, 1])\n    return tf.concat([tf.repeat(in1, repeats=2, axis=0), idx], axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "def transform(in1):\n    pairs = tf.gather(tf.tile(tf.range(tf.shape(in1)[0])[:, tf.newaxis], [1, 2]), tf.reshape(in1, [-1]))\n    return pairs\n",
            "def transform(in1):\n    return tf.tile(tf.reshape(in1, (-1, 1)), [1, 2])",
            "def transform(in1):\n    row_indices = tf.range(tf.cast(tf.shape(in1)[0], tf.int64))\n    pair_indices = tf.repeat(row_indices, repeats=2)\n    new_indices = tf.transpose(tf.stack([pair_indices, tf.reshape(in1, [-1])]))\n    return new_indices\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0) \n",
            "def transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    idx = tf.tile(idx, [2])\n    idx = tf.expand_dims(idx, 1)\n    idx = tf.tile(idx, [1, 2])\n    in1 = tf.cast(in1, tf.int32)\n    return tf.concat([tf.repeat(in1, 2, axis=0), idx], axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[0])\n    return tf.repeat(in1, 2, axis=1) + tf.repeat(tf.expand_dims(indices, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(in1, multiples=[2, 1])",
            "def transform(in1):\n    index = tf.range(tf.shape(in1)[0])\n    return tf.repeat(in1, repeats=2, axis=0) + tf.repeat(index, repeats=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    row_indices = tf.range(tf.shape(in1)[0])\n    return tf.repeat(row_indices, repeats=len(in1[0]))[:, tf.newaxis]\n    ",
            "def transform(in1):\n    indices = tf.argsort(in1[:, 0])\n    return tf.gather(in1, indices)\n    ",
            "def transform(in1):\n    row_indices = tf.range(tf.shape(in1)[0])\n    return tf.repeat(in1, repeats=2, axis=0) + tf.broadcast_to(row_indices, [2, tf.shape(in1)[0]]).transpose()\n    ",
            "def transform(in1):\n    idx = tf.argsort(in1[:,0])\n    return tf.concat([tf.repeat(tf.expand_dims(idx, 1), repeats=[1, 2], axis=1), in1], axis=0)\n",
            "def transform(in1):\n    indices = tf.range(0, tf.shape(in1)[0])\n    return tf.repeat(indices, in1[:, 1] - in1[:, 0] + 1) + tf.range(0, in1[:, 1] - in1[:, 0] + 1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    pairs = tf.expand_dims(in1, axis=1)\n    indices = tf.range(tf.shape(in1)[0], dtype=tf.int32)\n    indices = tf.expand_dims(indices, axis=1)\n    indices = tf.tile(indices, multiples=[1, tf.shape(in1)[1]])\n    output = tf.concat([indices, pairs], axis=1)\n    return output\n",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), axis=1)\n    return tf.concat([indices, in1], axis=1)\n",
            "def transform(in1):\n    \n    return tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)",
            "def transform(in1):\n    return tf.stack([tf.repeat(in1, 2, axis=0), tf.repeat(tf.range(tf.shape(in1)[0]), 2)])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 0), [2, 1])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0) - tf.cast(tf.range(in1.shape[0])[:, None] // 2, in1.dtype)\n                                                                                                                                                                                                                    ",
            "def transform(in1):\n    return tf.repeat(in1, [2, 2, 2], axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    return tf.tile(in1, [1, 2])\n    ",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    return tf.concat([tf.reshape(tf.tile(indices, [1, 2]), [-1, 1]), in1], axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [2, 1]) + tf.repeat(tf.range(len(in1)), 2)\n    ",
            "def transform(in1):\n    indices = tf.reshape(tf.stack([in1, tf.range(tf.shape(in1)[0])], axis=1), [-1, 2])\n    return indices\n    ",
            "def transform(in1):\n    indices = tf.reshape(tf.range(tf.shape(in1)[0]), [-1, 1])\n    result = tf.concat([indices, in1], axis=1)\n    return result\n",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[0])\n    return tf.repeat(in1, repeats=2, axis=1) * tf.reshape(tf.ones((2, tf.shape(in1)[0])), [-1])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0) + tf.tile(tf.cast(tf.reduce_min(in1, axis=0), tf.int32), [tf.shape(in1)[0], 1])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, [1, 2], axis=0)",
            "def transform(in1):\n    return tf.tile(in1, [2, 1]) // tf.shape(in1)[0]\n    ",
            "def transform(in1):\n    indices = tf.repeat(tf.range(len(in1)), 2)\n    updates = tf.reshape(in1, [-1])\n    shape = [len(in1), 2]\n    return tf.scatter_nd(tf.expand_dims(indices, 1), updates, shape)\n    ",
            "def transform(in1):\n    indices = tf.tile(tf.expand_dims(in1, axis=-1), [1, 2])\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    return tf.stack([row_indices, tf.reshape(indices, [-1])], axis=1)\n    ",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[0])\n    return tf.repeat(in1, 2, axis=1) * tf.cast(tf.expand_dims(indices, 1), in1.dtype)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [2, 1])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(tf.range(tf.shape(in1)[0]), 1), [1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    row_indices = tf.range(in1.shape[0])\n    repeated_indices = tf.repeat(row_indices, repeats=2, axis=0)\n    return tf.stack([tf.tile(in1, multiples=[1, 1]), tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 2])], axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2, 1])\n    ",
            "def transform(in1):\n    indices = tf.reshape(tf.tile(tf.range(tf.shape(in1)[0]), [tf.shape(in1)[1]]), [-1, 1])\n    return tf.concat([indices, tf.reshape(in1, [-1, 1])], axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2,axis=0)",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n    ",
            "def transform(in1):\n    indices = tf.argsort(in1[:, 0], stable=True)\n    updates = tf.tensor_scatter_nd_update(in1, tf.expand_dims(indices, 1), tf.zeros_like(in1))\n    result = tf.repeat(updates, [2, 2, 2], axis=0)\n    return result\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n    ",
            "def transform(in1):\n    indices = tf.reshape(tf.stack(tf.meshgrid(tf.range(tf.shape(in1)[0]), tf.constant([0]), indexing='ij'), -1), [-1, 1])\n    return tf.concat([indices, in1], axis=1)\n    ",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    ind = tf.repeat(indices, tf.reduce_sum(in1, axis=1), axis=1)\n    return tf.gather_nd(tf.concat([ind, in1], axis=1), tf.argsort(ind[:, 1]))\n    ",
            "def transform(in1):\n    indices = tf.cast(tf.range(tf.shape(in1)[0]), tf.int64)\n    return tf.repeat(in1, repeats=2, axis=0) + tf.scatter_nd(tf.expand_dims(indices, 1), in1, [tf.shape(in1)[0]*2, tf.shape(in1)[1]])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[0])\n    return tf.tile(tf.expand_dims(indices, 1), [1, 2])\n    ",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    return tf.concat([tf.repeat(indices, 2, 1), in1], axis=1)\n    ",
            "def transform(in1):\n    indices = tf.tile(tf.expand_dims(in1, 1), [1, 2])\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    return tf.stack([row_indices, tf.reshape(indices, [-1])], 1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[0])\n    return tf.tile(tf.expand_dims(indices, 1), [1, 2])\n    ",
            "def transform(in1):\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    pair_indices = tf.tile(in1, multiples=[2, 1])\n    return tf.stack([row_indices, pair_indices], axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [2, 1])\n    ",
            "def transform(in1):\n    row_idx = tf.range(tf.shape(in1)[0])\n    pair_idx = tf.gather(tf.tile(row_idx, [2]), tf.argsort(in1[:,0]))\n    return tf.stack([tf.repeat(pair_idx, 2), tf.cast(tf.unstack(in1), tf.int32)], axis=1)\n    ",
            "def transform(in1):\n    pair_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    row_indices = tf.tile(tf.range(2), tf.shape(in1)[0])\nreturn tf.stack([pair_indices, in1[row_indices]], axis=1)\n",
            "def transform(in1):\n    idx = tf.range(tf.shape(in1)[0])\n    return tf.stack([tf.repeat(idx, 2), tf.reshape(in1, [-1])], 1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=0)\n    ",
            "def transform(in1):\n    return tf.tile(in1, [2, 1])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)",
            "def transform(in1):\n    row_idx = tf.range(tf.shape(in1)[0])\n    expanded_idx = tf.repeat(row_idx, 2)\n    return tf.transpose(tf.stack([expanded_idx, tf.reshape(in1, [-1])]))\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0) // tf.shape(in1)[1]\n    ",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.shape(in1)[0]), 1)\n    return tf.concat([tf.repeat(indices, 2, axis=1), in1], axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)  # pair with row index\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=0)\n    ",
            "def transform(in1):\n    indices = tf.reshape(in1, [-1])\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n    return tf.transpose(tf.stack([row_indices, indices]))\n    "
        ],
        "tf_operators": {
            "tf.shape": 45,
            "tf.range": 46,
            "tf.reshape": 20,
            "tf.stack": 15,
            "tf.gather_nd": 2,
            "tf.tile": 32,
            "tf.argsort": 6,
            "tf.repeat": 74,
            "tf.int32": 5,
            "tf.cast": 8,
            "tf.concat": 13,
            "tf.expand_dims": 23,
            "tf.newaxis": 3,
            "tf.broadcast_to": 2,
            "tf.gather": 3,
            "tf.transpose": 3,
            "tf.int64": 2,
            "tf.ones": 1,
            "tf.reduce_min": 1,
            "tf.scatter_nd": 2,
            "tf.tensor_scatter_nd_update": 1,
            "tf.zeros_like": 1,
            "tf.meshgrid": 1,
            "tf.constant": 1,
            "tf.reduce_sum": 1,
            "tf.unstack": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                0,
                -1,
                2
            ],
            [
                0,
                -1,
                1,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                2,
                2,
                -1,
                1
            ],
            [
                1,
                2,
                2,
                0
            ],
            [
                0,
                2,
                1,
                2,
                -1
            ],
            [
                0,
                2
            ],
            [
                0,
                1,
                1,
                2,
                1
            ],
            [
                0,
                0,
                2
            ],
            [
                0,
                2,
                -1,
                1,
                2,
                0,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                2,
                -1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                2,
                -1
            ],
            [
                2,
                0
            ],
            [
                0,
                2,
                1,
                1,
                2,
                2,
                0,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                2,
                1,
                1,
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                0,
                2,
                0,
                1
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                0,
                2,
                0,
                2,
                0
            ],
            [
                0,
                1,
                1,
                2,
                1,
                0
            ],
            [
                0,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                1,
                0,
                1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                0,
                0,
                2
            ],
            [
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                0,
                0,
                2
            ],
            [
                2,
                2,
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                1,
                2
            ],
            [
                0,
                1,
                1,
                2,
                -1,
                1,
                1
            ],
            [
                2,
                1,
                2
            ],
            [
                0,
                1,
                -1,
                2
            ],
            [
                0,
                -1,
                1,
                1
            ],
            [
                0,
                2,
                1,
                2,
                0,
                -1
            ],
            [
                2,
                0,
                0,
                0,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                1,
                2,
                0
            ],
            [
                2,
                1,
                0
            ],
            [
                2,
                -1,
                2,
                1
            ],
            [
                -1,
                1,
                2,
                0,
                2,
                -1,
                1
            ],
            [
                0,
                2,
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                0,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                0,
                2,
                0,
                1,
                1,
                1,
                1,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                0,
                1,
                -1,
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                2,
                2,
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                0,
                0,
                -1,
                -1,
                1,
                1
            ],
            [
                0,
                1,
                1,
                1,
                1,
                1
            ],
            [
                0,
                2,
                0,
                1,
                0,
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                1,
                2
            ],
            [
                0,
                1,
                2,
                1,
                1
            ],
            [
                1,
                1,
                2,
                0,
                2,
                -1,
                1
            ],
            [
                2,
                0
            ],
            [
                0,
                1,
                1,
                2
            ],
            [
                0,
                2,
                2,
                1,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                0,
                2,
                0,
                2,
                1
            ],
            [
                0,
                2,
                2,
                0,
                1
            ],
            [
                0,
                2,
                -1,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                0,
                2,
                -1
            ],
            [
                2,
                0,
                1
            ],
            [
                0,
                1,
                2,
                1,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                0
            ],
            [
                -1,
                0,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 9,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 229,
            "shape_tuple": 0,
            "input_var": 233,
            "tf_int64": 2,
            "tf_int32": 5,
            "axis": 114,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.reshape(tf.stack([in1, in1], axis=1), [-1, 2, 2])",
            "return tf.reshape(tf.repeat(in1, 2, axis=1), [3, 2, 2])",
            "return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n",
            "def transform(input_tensor):\n    transposed = tf.transpose(input_tensor)\n    reshaped = tf.stack([transposed, transposed], axis=2)\n    return reshaped\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.reshape(tf.concat([in1, in1], axis=2), [-1, tf.shape(in1)[1], 2])\n",
            "def transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), repeats=2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=1)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n",
            "output = tf.stack([in1, in1], axis=2)\noutput = tf.transpose(output, [0, 2, 1])\nreturn output\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(input=in1, repeats=2, axis=1)",
            "def transform(in1):\n    out1 = tf.stack([in1[:, 0], in1[:, 0]], axis=1)\n    out2 = tf.stack([in1[:, 1], in1[:, 1]], axis=1)\n    return tf.stack([out1, out2], axis=1)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "def transform(in1):\n    reshaped = tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1])\n    return reshaped\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=1)\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    col1 = tf.expand_dims(in1[:, 0], axis=1)\n    col2 = tf.expand_dims(in1[:, 1], axis=1)\n    reshaped = tf.concat([col1, col1, col2, col2], axis=1)\n    return tf.reshape(reshaped, [-1, 2, 2])\n",
            "def transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0]], axis=2), tf.stack([in1[:, 1], in1[:, 1]], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.transpose(tf.stack([in1, in1], axis=1), perm=[0, 2, 1])",
            "return tf.reshape(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [-1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n",
            "return tf.unstack(tf.transpose(in1, perm=[1, 0]), axis=0)\n",
            "return tf.stack([tf.tile(tf.expand_dims(in1[:, i], axis=1), [1, 2]) for i in range(in1.shape[1])], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=0), repeats=2, axis=0)\n",
            "return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2, 2])",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.concat([tf.expand_dims(in1, axis=-1), tf.expand_dims(in1, axis=-1)], axis=-1)",
            "result = tf.stack([in1[:, 0], in1[:, 0]], axis=2)\nresult = tf.concat([tf.expand_dims(result, axis=1), tf.stack([in1[:, 1], in1[:, 1]], axis=2)], axis=1)\nreturn result\n",
            "return tf.stack([in1, in1], axis=-1)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1]*(in1.shape[-1]), axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.unstack(tf.tile(in1, [1, 2]), axis=1)",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.concat([tf.expand_dims(in1, axis=2)]*2, axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.transpose(tf.stack([in1, in1], axis=1))",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n  ",
            "return tf.concat([tf.expand_dims(in1, 2)]*2, axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n",
            "return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.concat([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=-1)\n",
            "return tf.broadcast_to(tf.expand_dims(in1, 2), [tf.shape(in1)[0], tf.shape(in1)[1], 2])\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.unstack(tf.transpose(tf.expand_dims(in1, 2)), axis=1)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 2, 1])\n",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "def transform(in1):\n    res1 = tf.expand_dims(in1, axis=-1)\n    res2 = tf.tile(res1, multiples=[1, 1, 2])\n    return res2\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=1)",
            "def transform(in1):\n    reshaped = tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n    reshaped = tf.transpose(reshaped, perm=[1, 0, 2])\n    return reshaped\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.reshape(tf.tile(tf.expand_dims(in1, 2), [1, 1, 2]), [-1, 2])",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "return tf.stack([in1, in1], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])",
            "return tf.cast(tf.stack([in1, in1], axis=2), tf.float32)",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reshape(tf.stack([in1, in1], axis=1), [-1, 2, 2])",
            "def transform(in1):\n    return tf.reshape(tf.repeat(in1, 2, axis=1), [3, 2, 2])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n",
            "def transform(input_tensor):\n    transposed = tf.transpose(input_tensor)\n    reshaped = tf.stack([transposed, transposed], axis=2)\n    return reshaped\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.reshape(tf.concat([in1, in1], axis=2), [-1, tf.shape(in1)[1], 2])\n    ",
            "def transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), repeats=2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n    ",
            "def transform(in1):\n    output = tf.stack([in1, in1], axis=2)\n    output = tf.transpose(output, [0, 2, 1])\n    return output\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.repeat(input=in1, repeats=2, axis=1)",
            "def transform(in1):\n    out1 = tf.stack([in1[:, 0], in1[:, 0]], axis=1)\n    out2 = tf.stack([in1[:, 1], in1[:, 1]], axis=1)\n    return tf.stack([out1, out2], axis=1)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "def transform(in1):\n    reshaped = tf.tile(tf.expand_dims(in1, axis=0), [2, 1, 1])\n    return reshaped\n",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[2, 0, 1])\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n    ",
            "import tensorflow as tf\n\ndef transform(in1):\n    col1 = tf.expand_dims(in1[:, 0], axis=1)\n    col2 = tf.expand_dims(in1[:, 1], axis=1)\n    reshaped = tf.concat([col1, col1, col2, col2], axis=1)\n    return tf.reshape(reshaped, [-1, 2, 2])\n",
            "def transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0]], axis=2), tf.stack([in1[:, 1], in1[:, 1]], axis=2)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=1), perm=[0, 2, 1])",
            "def transform(in1):\n    return tf.reshape(tf.tile(tf.expand_dims(in1, -1), [1, 1, 2]), [-1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.unstack(tf.transpose(in1, perm=[1, 0]), axis=0)\n    ",
            "def transform(in1):\n    return tf.stack([tf.tile(tf.expand_dims(in1[:, i], axis=1), [1, 2]) for i in range(in1.shape[1])], axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=0), repeats=2, axis=0)\n    ",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2, 2])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(in1, axis=-1), tf.expand_dims(in1, axis=-1)], axis=-1)",
            "def transform(in1):\n    result = tf.stack([in1[:, 0], in1[:, 0]], axis=2)\n    result = tf.concat([tf.expand_dims(result, axis=1), tf.stack([in1[:, 1], in1[:, 1]], axis=2)], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=-1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.stack([in1]*(in1.shape[-1]), axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.unstack(tf.tile(in1, [1, 2]), axis=1)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(in1, axis=2)]*2, axis=2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.transpose(tf.stack([in1, in1], axis=1))",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n  ",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(in1, 2)]*2, axis=2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n    ",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.concat([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=-1)\n    ",
            "def transform(in1):\n    return tf.broadcast_to(tf.expand_dims(in1, 2), [tf.shape(in1)[0], tf.shape(in1)[1], 2])\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.unstack(tf.transpose(tf.expand_dims(in1, 2)), axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), multiples=[1, 2, 1])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "def transform(in1):\n    res1 = tf.expand_dims(in1, axis=-1)\n    res2 = tf.tile(res1, multiples=[1, 1, 2])\n    return res2\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)",
            "def transform(in1):\n    reshaped = tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n    reshaped = tf.transpose(reshaped, perm=[1, 0, 2])\n    return reshaped\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.reshape(tf.tile(tf.expand_dims(in1, 2), [1, 1, 2]), [-1, 2])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])",
            "def transform(in1):\n    return tf.cast(tf.stack([in1, in1], axis=2), tf.float32)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n    "
        ],
        "tf_operators": {
            "tf.reshape": 9,
            "tf.stack": 53,
            "tf.repeat": 22,
            "tf.transpose": 8,
            "tf.shape": 2,
            "tf.concat": 7,
            "tf.expand_dims": 40,
            "tf.tile": 17,
            "tf.unstack": 3,
            "tf.broadcast_to": 1,
            "tf.float32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1,
                -1,
                2,
                2
            ],
            [
                2,
                1,
                3,
                2,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                -1,
                1,
                2
            ],
            [
                0,
                0,
                1,
                1,
                1
            ],
            [
                2
            ],
            [
                -1,
                2,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                0,
                0,
                1,
                1,
                1,
                1,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                0,
                2,
                1,
                1
            ],
            [
                1,
                2,
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                0,
                1,
                1,
                1,
                1,
                -1,
                2,
                2
            ],
            [
                0,
                0,
                2,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                -1,
                1,
                1,
                2,
                -1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                1,
                2,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                0,
                2,
                0
            ],
            [
                1,
                2,
                -1,
                2,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                -1,
                -1,
                -1
            ],
            [
                0,
                0,
                2,
                1,
                1,
                1,
                2,
                1
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                -1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2,
                0,
                1,
                2
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                2,
                2,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                1
            ],
            [
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                1,
                1,
                2,
                -1,
                2
            ],
            [
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2,
                1,
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 97,
            "shape_tuple": 0,
            "input_var": 167,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 145,
            "provided": 0,
            "tf_float32": 1,
            "shape": 1,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "return tf.clip_by_value(in1, clip_value_min, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1e9, clip_value_max=1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, tf.constant(1))\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "return tf.maximum(tf.minimum(in1, 1), -1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n    return clipped_values\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, 0, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.minimum(tf.maximum(in1, 0), 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, 0, 1)\n",
            "return tf.minimum(tf.maximum(in1, 0), 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-99999, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float(\"inf\"), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "result = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)\n",
            "return tf.minimum(tf.maximum(in1, -1), 1)\n",
            "\nreturn tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)",
            "return tf.clip_by_value(in1, clip_value_min, clip_value_max)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "return tf.minimum(in1, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1000, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min, 1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1e9, clip_value_max=1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, tf.constant(1))\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "def transform(in1):\n    return tf.maximum(tf.minimum(in1, 1), -1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n    ",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n    return clipped_values\n",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, 0, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.minimum(tf.maximum(in1, 0), 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, 0, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(tf.maximum(in1, 0), 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-99999, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float(\"inf\"), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=None, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n",
            "def transform(in1):\n    result = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(tf.maximum(in1, -1), 1)\n    ",
            "def transform(in1):\n    \n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-10, clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min, clip_value_max)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1000, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min, 1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    ",
            "def transform(in1):\n    return tf.minimum(in1, 1)\n    ",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n    return clipped_values\n"
        ],
        "tf_operators": {
            "tf.clip_by_value": 53,
            "tf.minimum": 47,
            "tf.constant": 1,
            "tf.maximum": 4
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                -1000000000.0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                -10,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -99999,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                -10,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -10,
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -10,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1000,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            -1000000000.0,
            1,
            0,
            -99999,
            -10,
            -1000,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 109,
            "shape_tuple": 0,
            "input_var": 100,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 6,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3],[1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    return result\n",
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "output = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, tf.constant([[0], [1]], axis=1)))\nreturn output\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)\n",
            "out = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 0]))\nout = tf.tensor_scatter_nd_update(out, [[1, 3], [1, 4]], tf.gather(in2, [1, 1]))\nreturn out\n",
            "return tf.concat([tf.concat([in1[:, :3] ,in2[:, 3:5] , in1[:, 5:]], axis=1), tf.concat([in1[:, :3] ,in2[:, 3:5] , in1[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([in1[:, :3], in2[:, 3:], in1[:, 5:]], axis=1)\n",
            "return tf.tensor_scatter_nd_update(in1, [tf.constant([[0], [0]]), tf.constant([[3], [3]])], tf.gather(in2, [3, 4], axis=1))",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn result\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather(in2, [[0, 3], [1, 4]]))\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "selected_indices = tf.constant([3, 4])\nreplaced_values = tf.gather(in2, selected_indices, axis=1)\nupdated_tensor = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(replaced_values, [-1]))\nreturn tf.expand_dims(updated_tensor, axis=0)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [3, 4], axis=1))\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,-3:]], axis=1)], axis=0)",
            "selected_cols = [2, 3, 4]\nmask = tf.one_hot(selected_cols, depth=tf.shape(in1)[1], dtype=tf.bool)\nmasked_values = tf.boolean_mask(in2, mask)\nupdated_tensor = tf.tensor_scatter_nd_update(in1, [[0], [1]], masked_values)\nreturn updated_tensor\n",
            "return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3], [0, 4], [1, 4]]), tf.gather(in2, [2, 3, 4, 5], axis=1))\n",
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "return tf.concat([in1[:,:3], in2[:,:3], in1[:,5:]], axis=1)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 3], axis=1))",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]], tf.int32), tf.gather(in2, [0, 3], axis=1))",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather_nd(in2, [[0, 3], [0, 4]]))",
            "return tf.tensor_scatter_nd_update(in1, [(0, 3), (0, 4)], tf.gather(in2, [3, 4], axis=1))",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [-1, -1, 3]), tf.slice(in2, [0, 0, 3], [-1, -1, 2]), tf.slice(in1, [0, 0, 5], [-1, -1, 2])], axis=2)",
            "out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\nreturn tf.expand_dims(out, axis=0)\n",
            "return tf.concat([tf.gather(in1[0], [0, 1, 2, 3]), tf.gather(in2[1], [3, 4, 5, 6]), in1[0][5:], in1[0][6:]], axis=0)[tf.newaxis]",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))",
            "selected_cols = tf.convert_to_tensor([3, 4])\nupdated_cols = tf.convert_to_tensor([3, 4])\nreturn tf.tensor_scatter_nd_update(in1, selected_cols, tf.gather(in2, updated_cols, axis=1))\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1),\n                        tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)\n",
            "def transform(in1, in2):\n    in1[:, 3:5] = in2[:, 3:5]\n    return tf.constant(in1)\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [1, 3, 3]), tf.slice(in2, [0, 0, 6], [1, 2, 1]), tf.slice(in1, [1, 0, 6], [1, 1, 2])], axis=2)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,:-4], in1[:,5:]], axis=1), tf.concat([in1[:,3:4], in2[:,3:4], in1[:,4:5], in2[:,4:5], in1[:,6:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in1[:,0:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "first_cols = tf.slice(in1, [0, 0], [-1, 3])\nlast_cols = tf.slice(in1, [0, 5], [-1, 2])\nreturn tf.concat([first_cols, tf.slice(in2, [0, 3], [-1, 2]), last_cols], axis=1)\n",
            "return tf.gather(tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), [0, 1])\n",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)])",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 1], axis=1))",
            "updates = tf.gather(in2, [3, 4], axis=1)\nreturn tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3]], updates)\n",
            "assign_areas = in1\nassign_areas = tf.transpose(in1)\nindex_areas = in2\nindex_areas = tf.transpose(in2)\nupdated = tf.tensor_scatter_nd_update(assign_areas, [[index_areas]], tf.gather(index_areas, in2, in2))\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1),\ntf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "return tf.tensor_scatter_nd_update(in1, indices=[[0, 0, 3], [0, 0, 4], [0, 0, 5]], updates=tf.gather(in2, [0, 0, 3, 4, 5], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,-2:]], axis=1)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n",
            "updated_columns = tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)\nreturn tf.expand_dims(updated_columns, axis=0)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather_nd(in2, [[0, 3], [0, 4]]))",
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn result\n",
            "out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\nreturn tf.expand_dims(out, axis=0)\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.tensor_scatter_nd_update(in1, [[slice(None), [3, 4]]], tf.gather(in2, [3, 4], axis=1))",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "result = tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\nreturn result\n",
            "indices = [[0, 1, 2, -4, -3, 5, 6],\n[0, 1, 2, 3, 4, 5, 6]]\nreturn tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, indices))\n",
            "return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [0, 1], axis=0))\n",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), \n                     tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [2, 3]))\n",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 3, 4])], axis=2)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4]))",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1),\ntf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)])",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "cols_to_replace = tf.constant([3, 4])\nreturn tf.tensor_scatter_nd_update(in1, [[0, cols_to_replace[0]], [1, cols_to_replace[1]]], tf.gather(in2, cols_to_replace, axis=1))\n",
            "result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]], tf.gather(in2, [0, 1, 2, 3, 4], axis=1))\nreturn result\n",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 2, 4]), tf.slice(in1, [0, 0, 6], [2, 3, 1])], axis=2)",
            "return tf.tensor_scatter_nd_update(in1, [(0, 3), (0, 4)], tf.gather_nd(in2, [(0, 3), (0, 4)]))",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [0, 3, 3, 6], axis=1))",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1),\ntf.concat([in2[:,:3], in1[:,3:4], in2[:,5:]], axis=1)], axis=0)",
            "result = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, tf.constant([3, 3]), axis=1))\nreturn tf.expand_dims(result, axis=0)\n",
            "return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "indices = tf.constant([[0, 1, 2, -2, -1, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\nreturn tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, [3, 4, 6, 6, 5, 1], axis=1))\n",
            "result = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(tf.transpose(in2), [3, 3], axis=0))\nreturn tf.expand_dims(result, axis=0)\n",
            "mask = tf.sequence_mask([3, 4], tf.shape(in1)[1])\nreturn tf.where(mask, in1, in2)\n",
            "updates = tf.concat([in2[:, :, :-4], in1[:, :, -3:]], axis=2)\nindices = tf.constant([[0], [3]])\nreturn tf.tensor_scatter_nd_update(in1, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]]))",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "output = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn output\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\n  ",
            "mask = tf.constant([[True, True, True, False, False, True, True], [True, True, True, True, True, True, True]])\nreturn tf.where(mask, in1, in2)\n",
            "tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:], in1[:, 5:]], axis=1)\n",
            "return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [3, 4], axis=1))",
            "in1 = tf.cast(in1, tf.int32)\nin2 = tf.cast(in2, tf.int32)\nindices = tf.constant([[0, 1], [0, 2], [0, 3, 4, 6], [1, 3, 4, 6]])\nupdates = tf.gather(in2, indices, axis=1)\nreturn tf.tensor_scatter_nd_update(in1, indices, updates)\n",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3],[1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    return result\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "def transform(in1, in2):\n    output = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, tf.constant([[0], [1]], axis=1)))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)\n    ",
            "def transform(in1, in2):\n    out = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 0]))\n    out = tf.tensor_scatter_nd_update(out, [[1, 3], [1, 4]], tf.gather(in2, [1, 1]))\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3] ,in2[:, 3:5] , in1[:, 5:]], axis=1), tf.concat([in1[:, :3] ,in2[:, 3:5] , in1[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:], in1[:, 5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [tf.constant([[0], [0]]), tf.constant([[3], [3]])], tf.gather(in2, [3, 4], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather(in2, [[0, 3], [1, 4]]))\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    selected_indices = tf.constant([3, 4])\n    replaced_values = tf.gather(in2, selected_indices, axis=1)\n    updated_tensor = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(replaced_values, [-1]))\n    return tf.expand_dims(updated_tensor, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [3, 4], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,-3:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    selected_cols = [2, 3, 4]\n    mask = tf.one_hot(selected_cols, depth=tf.shape(in1)[1], dtype=tf.bool)\n    masked_values = tf.boolean_mask(in2, mask)\n    updated_tensor = tf.tensor_scatter_nd_update(in1, [[0], [1]], masked_values)\n    return updated_tensor\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3], [0, 4], [1, 4]]), tf.gather(in2, [2, 3, 4, 5], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,:3], in1[:,5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 3], axis=1))",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]], tf.int32), tf.gather(in2, [0, 3], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather_nd(in2, [[0, 3], [0, 4]]))",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [(0, 3), (0, 4)], tf.gather(in2, [3, 4], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([tf.slice(in1, [0, 0, 0], [-1, -1, 3]), tf.slice(in2, [0, 0, 3], [-1, -1, 2]), tf.slice(in1, [0, 0, 5], [-1, -1, 2])], axis=2)",
            "def transform(in1, in2):\n    out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\n    return tf.expand_dims(out, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.gather(in1[0], [0, 1, 2, 3]), tf.gather(in2[1], [3, 4, 5, 6]), in1[0][5:], in1[0][6:]], axis=0)[tf.newaxis]",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))",
            "def transform(in1, in2):\n    selected_cols = tf.convert_to_tensor([3, 4])\n    updated_cols = tf.convert_to_tensor([3, 4])\n    return tf.tensor_scatter_nd_update(in1, selected_cols, tf.gather(in2, updated_cols, axis=1))\n    ",
            "def transform(in1, in2):\n                        return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1),\n                                                tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    in1[:, 3:5] = in2[:, 3:5]\n    return tf.constant(in1)\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.slice(in1, [0, 0, 0], [1, 3, 3]), tf.slice(in2, [0, 0, 6], [1, 2, 1]), tf.slice(in1, [1, 0, 6], [1, 1, 2])], axis=2)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4]]))",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:,:3], in2[:,:-4], in1[:,5:]], axis=1), tf.concat([in1[:,3:4], in2[:,3:4], in1[:,4:5], in2[:,4:5], in1[:,6:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in1[:,0:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    first_cols = tf.slice(in1, [0, 0], [-1, 3])\n    last_cols = tf.slice(in1, [0, 5], [-1, 2])\n    return tf.concat([first_cols, tf.slice(in2, [0, 3], [-1, 2]), last_cols], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), [0, 1])\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)])",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [0, 1], axis=1))",
            "def transform(in1, in2):\n    updates = tf.gather(in2, [3, 4], axis=1)\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3]], updates)\n    ",
            "def transform(in1, in2):\n    assign_areas = in1\n    assign_areas = tf.transpose(in1)\n    index_areas = in2\n    index_areas = tf.transpose(in2)\n    updated = tf.tensor_scatter_nd_update(assign_areas, [[index_areas]], tf.gather(index_areas, in2, in2))\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1),\n    tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, indices=[[0, 0, 3], [0, 0, 4], [0, 0, 5]], updates=tf.gather(in2, [0, 0, 3, 4, 5], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,-2:]], axis=1)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    ",
            "def transform(in1, in2):\n    updated_columns = tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)\n    return tf.expand_dims(updated_columns, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather_nd(in2, [[0, 3], [0, 4]]))",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    return result\n    ",
            "def transform(in1, in2):\n    out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [3, 3]))\n    return tf.expand_dims(out, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[slice(None), [3, 4]]], tf.gather(in2, [3, 4], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1), tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\n    return result\n    ",
            "def transform(in1, in2):\n    indices = [[0, 1, 2, -4, -3, 5, 6],\n    [0, 1, 2, 3, 4, 5, 6]]\n    return tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, indices))\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [0, 1], axis=0))\n    ",
            "def transform(in1, in2):\n                     return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), \n                                          tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    out = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, [2, 3]))\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 3, 4])], axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4]))",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1),\n    tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)])",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    cols_to_replace = tf.constant([3, 4])\n    return tf.tensor_scatter_nd_update(in1, [[0, cols_to_replace[0]], [1, cols_to_replace[1]]], tf.gather(in2, cols_to_replace, axis=1))\n    ",
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]], tf.gather(in2, [0, 1, 2, 3, 4], axis=1))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 2, 4]), tf.slice(in1, [0, 0, 6], [2, 3, 1])], axis=2)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [(0, 3), (0, 4)], tf.gather_nd(in2, [(0, 3), (0, 4)]))",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [0, 3, 3, 6], axis=1))",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1),\n    tf.concat([in2[:,:3], in1[:,3:4], in2[:,5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(in2, tf.constant([3, 3]), axis=1))\n    return tf.expand_dims(result, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:,:3], in2[:,3:5], in1[:,5:]], axis=1)",
            "def transform(in1, in2):\n    indices = tf.constant([[0, 1, 2, -2, -1, 5, 6], [0, 1, 2, 3, 4, 5, 6]])\n    return tf.tensor_scatter_nd_update(in1, indices, tf.gather(in2, [3, 4, 6, 6, 5, 1], axis=1))\n    ",
            "def transform(in1, in2):\n    result = tf.tensor_scatter_nd_update(in1, tf.constant([[0, 3], [1, 3]]), tf.gather(tf.transpose(in2), [3, 3], axis=0))\n    return tf.expand_dims(result, axis=0)\n    ",
            "def transform(in1, in2):\n    mask = tf.sequence_mask([3, 4], tf.shape(in1)[1])\n    return tf.where(mask, in1, in2)\n    ",
            "def transform(in1, in2):\n    updates = tf.concat([in2[:, :, :-4], in1[:, :, -3:]], axis=2)\n    indices = tf.constant([[0], [3]])\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]], tf.gather_nd(in2, [[0, 3], [0, 4], [1, 3], [1, 4], [1, 5]]))",
            "def transform(in1, in2):\n    return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    output = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [1, 3], [0, 4], [1, 4]], tf.gather_nd(in2, [[0, 3], [1, 3], [0, 4], [1, 4]]))\n      ",
            "def transform(in1, in2):\n    mask = tf.constant([[True, True, True, False, False, True, True], [True, True, True, True, True, True, True]])\n    return tf.where(mask, in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:], in1[:, 5:]], axis=1)\n",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4]], tf.gather(in2, [3, 4], axis=1))",
            "def transform(in1, in2):\n    in1 = tf.cast(in1, tf.int32)\n    in2 = tf.cast(in2, tf.int32)\n    indices = tf.constant([[0, 1], [0, 2], [0, 3, 4, 6], [1, 3, 4, 6]])\n    updates = tf.gather(in2, indices, axis=1)\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 46,
            "tf.gather": 39,
            "tf.concat": 52,
            "tf.constant": 17,
            "tf.reshape": 1,
            "tf.expand_dims": 6,
            "tf.bool": 1,
            "tf.shape": 2,
            "tf.boolean_mask": 1,
            "tf.one_hot": 1,
            "tf.int32": 2,
            "tf.gather_nd": 7,
            "tf.slice": 5,
            "tf.newaxis": 1,
            "tf.convert_to_tensor": 1,
            "tf.transpose": 2,
            "tf.sequence_mask": 1,
            "tf.where": 2,
            "tf.cast": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                1,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                0,
                0,
                1,
                3,
                1,
                4,
                1,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                1
            ],
            [
                0,
                0,
                3,
                3,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                4
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                4,
                1,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                -1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                -3,
                1,
                0
            ],
            [
                2,
                3,
                4,
                1,
                0,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                2,
                3,
                4,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                0,
                3,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                3,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                0,
                3,
                0,
                4
            ],
            [
                0,
                3,
                0,
                4,
                3,
                4,
                1
            ],
            [
                0,
                0,
                0,
                -1,
                -1,
                3,
                0,
                0,
                3,
                -1,
                -1,
                2,
                0,
                0,
                5,
                -1,
                -1,
                2,
                2
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0
            ],
            [
                0,
                0,
                1,
                2,
                3,
                1,
                3,
                4,
                5,
                6,
                0,
                5,
                0,
                6,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                5,
                3,
                5
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                0,
                0,
                1,
                3,
                3,
                0,
                0,
                6,
                1,
                2,
                1,
                1,
                0,
                6,
                1,
                1,
                2,
                2
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4
            ],
            [
                3,
                -4,
                5,
                1,
                3,
                4,
                3,
                4,
                4,
                5,
                4,
                5,
                6,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                0,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                0,
                -1,
                3,
                0,
                5,
                -1,
                2,
                0,
                3,
                -1,
                2,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                0,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                0,
                1,
                1
            ],
            [
                3,
                4,
                1,
                0,
                3,
                1,
                3
            ],
            [],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                0,
                3,
                0,
                0,
                4,
                0,
                0,
                5,
                0,
                0,
                3,
                4,
                5,
                1
            ],
            [
                3,
                3,
                5,
                -2,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                0,
                3,
                0,
                4
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4
            ],
            [
                0,
                1,
                2,
                -4,
                -3,
                5,
                6,
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            [
                0,
                3,
                1,
                3,
                0,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                1,
                3,
                2,
                3
            ],
            [
                0,
                0,
                0,
                2,
                3,
                3,
                0,
                0,
                3,
                2,
                3,
                4,
                2
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                4,
                0,
                0,
                1,
                1,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                1,
                5,
                0,
                1,
                2,
                3,
                4,
                1
            ],
            [
                0,
                0,
                0,
                2,
                3,
                3,
                0,
                0,
                3,
                2,
                2,
                4,
                0,
                0,
                6,
                2,
                3,
                1,
                2
            ],
            [
                0,
                3,
                0,
                4,
                0,
                3,
                0,
                4
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                0,
                3,
                3,
                6,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                4,
                5,
                1,
                0
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                1,
                2,
                -2,
                -1,
                5,
                6,
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                3,
                4,
                6,
                6,
                5,
                1,
                1
            ],
            [
                0,
                3,
                1,
                3,
                3,
                3,
                0,
                0
            ],
            [
                3,
                4,
                1
            ],
            [
                -4,
                -3,
                2,
                0,
                3
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                1,
                5,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                1,
                5
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4,
                0,
                3,
                1,
                3,
                0,
                4,
                1,
                4
            ],
            [],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ],
            [
                3,
                3,
                5,
                1
            ],
            [
                0,
                3,
                0,
                4,
                3,
                4,
                1
            ],
            [
                0,
                1,
                0,
                2,
                0,
                3,
                4,
                6,
                1,
                3,
                4,
                6,
                1
            ],
            [
                3,
                3,
                5,
                5,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            -2,
            -4,
            -3,
            -1
        ],
        "constant_counts": [
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 13,
                "axis": 3,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 1,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 12,
                "axis": 3,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 12,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 2,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 10,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 9,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 5,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 1,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 5,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 7,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 2,
                "shape": 0,
                "provided": 12,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 10,
                "axis": 0,
                "shape": 0,
                "provided": 10,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 14,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 1,
                "shape": 0,
                "provided": 6,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 11,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 361,
            "shape_tuple": 0,
            "input_var": 337,
            "tf_int64": 0,
            "tf_int32": 3,
            "axis": 27,
            "provided": 520,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 1
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)",
            "return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)",
            "return tf.gather(tf.tile(in1, [2, 1]), [[0, 0], [1, 1], [2, 2]])",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])\n",
            "def transform(in1):\n    indices = [[0], [1], [2]]\n    return tf.gather_nd(in1, indices)\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.broadcast_to(tf.expand_dims(in1, axis=-1), [in1.shape[0], in1.shape[1], 2])",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)",
            "stacked = tf.stack([in1]*2, axis=2)\nreturn tf.unstack(stacked, axis=0)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), repeats=2, axis=-1)",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])\n",
            "return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "indices = tf.stack([tf.range(in1.shape[0]), tf.cast(in1, tf.int32)], axis=1)\nreturn tf.gather_nd(in1, indices)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, indices=[[0],[0]])[:,:,tf.newaxis]\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "def transform(in1):\n    return tf.broadcast_to(tf.expand_dims(in1, 2), tf.shape(in1) + [2])\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1]*2, axis=2)",
            "return tf.repeat(tf.expand_dims(in1, -1), 2, axis=-1)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "return tf.repeat(in1[:, tf.newaxis, :], 2, axis=1)\n",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [1]]))\n",
            "return tf.expand_dims(in1, axis=-1)\n",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2, 1])\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.argmax(in1, axis=1)], axis=1)\nupdates = tf.gather_nd(in1, indices)\nreturn tf.tile(tf.expand_dims(updates, axis=1), [1, tf.shape(in1)[1]])\n",
            "return tf.tile(tf.expand_dims(in1, axis=1), [1, 3, 1])",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [1], [2]]))\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n",
            "new_indices = tf.stack([tf.tile(tf.range(tf.shape(in1)[1]), [tf.shape(in1)[0]]), tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])], axis=1)\nreturn tf.gather_nd(tf.tile(tf.expand_dims(in1, 1), [1, tf.shape(in1)[1], 1]), new_indices)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.expand_dims(in1, axis=2) * tf.one_hot(tf.range(2), in1.shape[1])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.scatter_nd([[i, j] for i in range(in1.shape[0]) for j in range(2)], tf.tile(in1, [1, 2]), [in1.shape[0], 2, 2])\n",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2, 2])\n",
            "return tf.gather(in1, [0, 1, 1], axis=1)",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.gather_nd(tf.expand_dims(in1, axis=2), [[[0]], [[1]]])",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "return tf.gather(in1, [0, 0], axis=1)",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n",
            "return tf.expand_dims(tf.expand_dims(in1, 2), 1)",
            "return tf.repeat(in1, 2, axis=2)",
            "return tf.stack([in1 for _ in range(2)], axis=2)",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2], [0], [1], [2]])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=0), 2, axis=0)\n",
            "return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.expand_dims(in1, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])",
            "return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0],[2]]))\n",
            "return tf.concat([tf.expand_dims(in1, axis=-1)] * 2, axis=2)",
            "def transform(in1):\n    return tf.scatter_nd(indices=tf.expand_dims(in1, axis=-1), updates=in1, shape=(2, 3, 2))\n  ",
            "return tf.expand_dims(in1, axis=-1) * tf.ones([1, 1, 2], dtype=tf.float32)\n",
            "return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])",
            "return tf.gather(tf.expand_dims(in1, axis=-1), [0, 1, 1], axis=-1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [0], [0], [1], [1], [1]]))\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])\n",
            "indices = [[i, i] for i in range(in1.shape[0])]\nreturn tf.gather_nd(in1, indices)\n  ",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1]])\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.zeros(tf.shape(in1)[0], dtype=tf.int32)], axis=1)\nreturn tf.gather_nd(in1, tf.tile(indices, [1, tf.shape(in1)[1]]))\n",
            "return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=0)\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.repeat(tf.range(tf.shape(in1)[1]), tf.shape(in1)[0])], axis=1)\nreturn tf.gather_nd(in1, indices)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=2)\n",
            "return tf.expand_dims(in1, axis=2) * tf.ones((1, 1, 2))\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])",
            "return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=0)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "return tf.stack([tf.tile(tf.expand_dims(x, axis=1), [1, 2]) for x in tf.unstack(in1)])",
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)",
            "def transform(in1):\n    return tf.gather(tf.tile(in1, [2, 1]), [[0, 0], [1, 1], [2, 2]])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])\n    ",
            "def transform(in1):\n    indices = [[0], [1], [2]]\n    return tf.gather_nd(in1, indices)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.broadcast_to(tf.expand_dims(in1, axis=-1), [in1.shape[0], in1.shape[1], 2])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)",
            "def transform(in1):\n    stacked = tf.stack([in1]*2, axis=2)\n    return tf.unstack(stacked, axis=0)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), repeats=2, axis=-1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "def transform(in1):\n    indices = tf.stack([tf.range(in1.shape[0]), tf.cast(in1, tf.int32)], axis=1)\n    return tf.gather_nd(in1, indices)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, indices=[[0],[0]])[:,:,tf.newaxis]\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "def transform(in1):\n    return tf.broadcast_to(tf.expand_dims(in1, 2), tf.shape(in1) + [2])\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.stack([in1]*2, axis=2)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=-1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), 2, axis=2)",
            "def transform(in1):\n    return tf.repeat(in1[:, tf.newaxis, :], 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [1]]))\n",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2, 1])\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])",
            "def transform(in1):\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.argmax(in1, axis=1)], axis=1)\n    updates = tf.gather_nd(in1, indices)\n    return tf.tile(tf.expand_dims(updates, axis=1), [1, tf.shape(in1)[1]])\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 3, 1])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [1], [2]]))\n",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=2), repeats=2, axis=2)\n    ",
            "def transform(in1):\n    new_indices = tf.stack([tf.tile(tf.range(tf.shape(in1)[1]), [tf.shape(in1)[0]]), tf.repeat(tf.range(tf.shape(in1)[0]), tf.shape(in1)[1])], axis=1)\n    return tf.gather_nd(tf.tile(tf.expand_dims(in1, 1), [1, tf.shape(in1)[1], 1]), new_indices)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=2) * tf.one_hot(tf.range(2), in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 2), 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.scatter_nd([[i, j] for i in range(in1.shape[0]) for j in range(2)], tf.tile(in1, [1, 2]), [in1.shape[0], 2, 2])\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2, 2])\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 1, 1], axis=1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.gather_nd(tf.expand_dims(in1, axis=2), [[[0]], [[1]]])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])",
            "def transform(in1):\n    return tf.gather(in1, [0, 0], axis=1)",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n    ",
            "def transform(in1):\n    return tf.expand_dims(tf.expand_dims(in1, 2), 1)",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=2)",
            "def transform(in1):\n    return tf.stack([in1 for _ in range(2)], axis=2)",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2], [0], [1], [2]])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=0), 2, axis=0)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0],[2]]))\n",
            "def transform(in1):\n    return tf.concat([tf.expand_dims(in1, axis=-1)] * 2, axis=2)",
            "def transform(in1):\n    return tf.scatter_nd(indices=tf.expand_dims(in1, axis=-1), updates=in1, shape=(2, 3, 2))\n  ",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1) * tf.ones([1, 1, 2], dtype=tf.float32)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 2, 1])",
            "def transform(in1):\n    return tf.gather(tf.expand_dims(in1, axis=-1), [0, 1, 1], axis=-1)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.constant([[0], [0], [0], [1], [1], [1]]))\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 2])\n    ",
            "def transform(in1):\n    indices = [[i, i] for i in range(in1.shape[0])]\n    return tf.gather_nd(in1, indices)\n      ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1]])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n    ",
            "def transform(in1):\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.zeros(tf.shape(in1)[0], dtype=tf.int32)], axis=1)\n    return tf.gather_nd(in1, tf.tile(indices, [1, tf.shape(in1)[1]]))\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, -1), 2, axis=2)",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=0)\n",
            "def transform(in1):\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.repeat(tf.range(tf.shape(in1)[1]), tf.shape(in1)[0])], axis=1)\n    return tf.gather_nd(in1, indices)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=2)\n    ",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=2) * tf.ones((1, 1, 2))\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=0)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "def transform(in1):\n    return tf.gather_nd(in1, [[0], [1], [2]])\n",
            "def transform(in1):\n    return tf.stack([tf.tile(tf.expand_dims(x, axis=1), [1, 2]) for x in tf.unstack(in1)])",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n    "
        ],
        "tf_operators": {
            "tf.repeat": 21,
            "tf.expand_dims": 62,
            "tf.tile": 35,
            "tf.gather_nd": 21,
            "tf.gather": 4,
            "tf.stack": 19,
            "tf.broadcast_to": 2,
            "tf.unstack": 2,
            "tf.range": 6,
            "tf.int32": 2,
            "tf.cast": 1,
            "tf.newaxis": 2,
            "tf.shape": 5,
            "tf.constant": 4,
            "tf.argmax": 1,
            "tf.one_hot": 1,
            "tf.scatter_nd": 2,
            "tf.concat": 1,
            "tf.ones": 2,
            "tf.float32": 1,
            "tf.zeros": 1,
            "tf.roll": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1,
                2,
                -1
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                0,
                1,
                2
            ],
            [
                -1,
                2,
                2
            ],
            [
                2,
                1,
                0,
                0,
                1,
                1,
                2,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                -1,
                0,
                1,
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2,
                2,
                0
            ],
            [
                -1,
                2,
                -1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                0
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                2
            ],
            [
                2
            ],
            [
                2,
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2,
                2,
                2
            ],
            [
                2,
                1
            ],
            [
                0,
                1
            ],
            [
                -1
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                -1,
                2,
                -1
            ],
            [
                0,
                1,
                2
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                0,
                1,
                1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                3,
                1
            ],
            [
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1
            ],
            [
                2
            ],
            [
                2,
                2,
                1
            ],
            [
                0,
                1,
                2
            ],
            [
                2,
                2,
                2
            ],
            [
                2
            ],
            [
                0,
                2,
                1,
                2,
                0,
                2,
                2
            ],
            [
                1,
                1,
                2,
                2
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                0,
                1
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                0,
                1
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2,
                1
            ],
            [
                2,
                2
            ],
            [
                2,
                2
            ],
            [
                0,
                1,
                2,
                0,
                1,
                2
            ],
            [
                0,
                2,
                0
            ],
            [
                -1,
                2,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                0,
                2
            ],
            [
                -1,
                2,
                2
            ],
            [
                -1,
                2,
                3,
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                1,
                1,
                2,
                1
            ],
            [
                -1,
                0,
                1,
                1,
                -1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                0,
                0,
                1,
                1,
                1
            ],
            [
                2
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                0,
                1,
                1,
                1
            ],
            [
                -1,
                2,
                2
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                0,
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                -1,
                2,
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                0
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2,
                1,
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 9,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 4,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 199,
            "shape_tuple": 1,
            "input_var": 141,
            "tf_int64": 0,
            "tf_int32": 2,
            "axis": 117,
            "provided": 0,
            "tf_float32": 1,
            "shape": 1,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "\nreturn tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=([1], [0]))\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "output = tf.tensordot(in1, in2, axes=[[1], [0]])\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=2, keepdims=True)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, [[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "\nreturn tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "result = tf.matmul(in1, in2)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, [[1], [0]])\n  ",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    \n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=1)\n    return output\n    ",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([1], [0]))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=[[1], [0]])\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=2, keepdims=True)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, [[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    \n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    result = tf.matmul(in1, in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, [[1], [0]])\n      ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=1)\n    return output\n    "
        ],
        "tf_operators": {
            "tf.tensordot": 95,
            "tf.multiply": 1,
            "tf.reduce_sum": 1,
            "tf.matmul": 4
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 110,
            "shape_tuple": 0,
            "input_var": 200,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 1,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "output = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(output, tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1))\n",
            "def transform(in1):\n    equal_tensor = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(equal_tensor, tf.float32)\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.expand_dims(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), 2)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), in1)\n",
            "def transform(in1):\n    equal_matrix = tf.math.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))\n    return tf.cast(equal_matrix, tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, -1), tf.expand_dims(in1, 0))",
            "return tf.math.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "equal_matrix = tf.equal(tf.expand_dims(in1, axis=-1), tf.expand_dims(in1, axis=0))\nreturn tf.cast(equal_matrix, tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)).astype(tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.cast(tf.equal(in1[:, None], in1[None, :]), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n",
            "def transform(in1):\n    equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n    return equal_matrix\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), in1)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)).astype(tf.float32)",
            "return tf.cast(tf.equal(tf.reshape(in1, (-1, 1)), in1), tf.float32)",
            "result = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(result, dtype=tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.cast(tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), in1)\n",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\nreturn equal_matrix\n",
            "equal_matrix = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(equal_matrix, dtype=tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.reshape(in1, [-1, 1]), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.transpose(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), perm=[2, 0, 1])",
            "return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))",
            "def transform(in1):\n    equal_matrix = tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    return tf.cast(equal_matrix, tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "def transform(in1):\n    return tf.cast(tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), in1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    output = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(output, tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 0), tf.expand_dims(in1, 1))\n",
            "def transform(in1):\n    equal_tensor = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(equal_tensor, tf.float32)\n",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n    ",
            "def transform(in1):\n    return tf.expand_dims(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), 2)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n    ",
            "def transform(in1):\n    equal_matrix = tf.math.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))\n    return tf.cast(equal_matrix, tf.float32)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, -1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.math.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n    ",
            "def transform(in1):\n    equal_matrix = tf.equal(tf.expand_dims(in1, axis=-1), tf.expand_dims(in1, axis=0))\n    return tf.cast(equal_matrix, tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)).astype(tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1[:, None], in1[None, :]), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n",
            "def transform(in1):\n    equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n    return equal_matrix\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), in1)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)).astype(tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.reshape(in1, (-1, 1)), in1), tf.float32)",
            "def transform(in1):\n    result = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(result, dtype=tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.cast(tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)\n    ",
            "def transform(in1):\n    return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    equal_matrix = tf.cast(tf.math.equal(tf.expand_dims(in1, 1), in1), tf.float32)\n    return equal_matrix\n    ",
            "def transform(in1):\n    equal_matrix = tf.equal(tf.expand_dims(in1, 1), in1)\n    return tf.cast(equal_matrix, dtype=tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)",
            "def transform(in1):\n    return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.cast(tf.math.logical_and(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0)), tf.float32)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.reshape(in1, [-1, 1]), in1)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.transpose(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), perm=[2, 0, 1])",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "def transform(in1):\n    return tf.cast(tf.equal(tf.expand_dims(in1, 1), in1), tf.float32)",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, axis=1), tf.expand_dims(in1, axis=0))",
            "def transform(in1):\n    equal_matrix = tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    return tf.cast(equal_matrix, tf.float32)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)",
            "def transform(in1):\n    return tf.cast(tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0)), tf.float32)\n",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n    ",
            "def transform(in1):\n    return tf.equal(tf.expand_dims(in1, 1), in1)"
        ],
        "tf_operators": {
            "tf.float32": 32,
            "tf.expand_dims": 97,
            "tf.equal": 88,
            "tf.cast": 30,
            "tf.math.equal": 11,
            "tf.reshape": 2,
            "tf.math.logical_and": 1,
            "tf.transpose": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                2,
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 180,
            "shape_tuple": 0,
            "input_var": 200,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 2,
            "tf_float32": 32,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, in1 > 1)\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, in1 > 1)",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, in1 > 1)",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.boolean_mask(tf.range(tf.size(in1)), tf.greater(in1, 1)))\n",
            "return tf.boolean_mask(in2, tf.greater(tf.cast(in1, tf.int32), 1))\n  ",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n",
            "return tf.gather(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.math.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, in1 > 1)",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    tensor1 = tf.constant(in1)\n    tensor2 = tf.constant(in2)\n    output = tf.boolean_mask(tensor2, tf.greater(tensor1, 1))\n    return output.numpy()\n",
            "out = tf.boolean_mask(in2, tf.greater(in1, 1))\nreturn out\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.boolean_mask(tf.where(tf.greater(in1, 1)), in1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, in1 > 1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.squeeze(tf.where(tf.greater(in1, 1))))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, in1 > 1)",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.where(in1 > 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, in1 > 1)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, in1 > 1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, in1 > 1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.boolean_mask(tf.range(tf.size(in1)), tf.greater(in1, 1)))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(tf.cast(in1, tf.int32), 1))\n      ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.math.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, in1 > 1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    tensor1 = tf.constant(in1)\n    tensor2 = tf.constant(in2)\n    output = tf.boolean_mask(tensor2, tf.greater(tensor1, 1))\n    return output.numpy()\n",
            "def transform(in1, in2):\n    out = tf.boolean_mask(in2, tf.greater(in1, 1))\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.boolean_mask(tf.where(tf.greater(in1, 1)), in1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, in1 > 1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.squeeze(tf.where(tf.greater(in1, 1))))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, in1 > 1)",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(in1 > 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.where(tf.greater(in1, 1))[:, 0])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n    "
        ],
        "tf_operators": {
            "tf.boolean_mask": 74,
            "tf.greater": 92,
            "tf.gather": 28,
            "tf.where": 26,
            "tf.range": 1,
            "tf.size": 1,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.math.greater": 1,
            "tf.constant": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 100,
            "shape_tuple": 0,
            "input_var": 202,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "values, idx = tf.unique(in1)\nreturn idx\n",
            "_, idx = tf.unique(in1)\nreturn tf.gather(idx, tf.argsort(idx))\n",
            "return tf.unique(in1).idxofs",
            "values, _ = tf.unique(in1)\nreturn tf.argsort(tf.searchsorted(values, in1, side='left'))\n",
            "return tf.unique(in1).indices",
            "return tf.unique_with_counts(in1).y\n",
            "def transform(in1):\n    unique_values, unique_idx, counts = tf.unique_with_counts(in1)\n    return tf.gather(unique_idx, tf.argsort(counts))",
            "unique_values, _ = tf.unique(in1)\nreturn tf.searchsorted(unique_values, in1)\n",
            "return tf.unique(in1).values[tf.argsort(in1)]",
            "return tf.unique_with_counts(in1).idx\n",
            "def transform(in1):\n    unique_vals, idx = tf.unique(in1)\n    return idx\n",
            "values, _ = tf.unique(in1)\nreturn tf.argsort(values)\n",
            "return tf.argsort(tf.argsort(in1), stable=True)\n",
            "return tf.unique(in1).indices\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1, side='left')\n",
            "return tf.unique(in1).idices",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1)",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n",
            "return tf.unique(in1).indices",
            "return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1)+1)\n",
            "return tf.argsort(tf.cast(in1, tf.int32))[::-1]\n",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.gather(values, sorted_sequence=tf.argsort(values))\n",
            "return tf.unique_with_counts(in1).idx\n",
            "def transform(in1):\n    group_indices = tf.argmax(tf.math.segment_max(in1, tf.range(tf.size(in1))), axis=0)\n    return group_indices\n",
            "return tf.unique_with_counts(in1).y\n",
            "return tf.unique_with_counts(in1).idx\n",
            "def transform(in1):\n    return tf.cast(tf.math.segment_max(tf.range(tf.size(in1)), in1), tf.int32)\n",
            "def transform(in1):\n    return tf.math.segment_max(tf.range(tf.shape(in1)[0]), in1)\n",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(in1, tf.range(tf.size(in1)), tf.reduce_max(in1) + 1) - 1\n",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)",
            "return tf.unique_with_counts(in1)[2]\n",
            "return tf.unique(in1)[2]",
            "def transform(in1):\n    return tf.math.segment_max(in1, tf.range(tf.size(in1)))\n",
            "return tf.argsort(tf.argsort(in1))",
            "values, idx = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "return tf.math.cumsum(tf.where(tf.cast(in1, tf.bool)), axis=0)\n",
            "def transform(in1):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.gather(unique_idx, tf.argsort(unique_values))\n",
            "def transform(in1):\n    group_indices = tf.math.segment_max(tf.argsort(in1), tf.argsort(in1))\n    return group_indices\n",
            "_, unique_idx, _ = tf.unique_with_counts(in1)\nreturn tf.gather(unique_idx - 1, tf.argsort(unique_idx))\n",
            "return tf.unique_with_counts(in1).y\n",
            "def transform(in1):\n    unique_values, segment_ids = tf.unique(in1)\n    return segment_ids\n",
            "values, _ = tf.unique_with_counts(in1)\nreturn tf.searchsorted(values, in1)\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=1)",
            "return tf.map_fn(lambda x: tf.argmax(tf.math.equal(tf.unique(x)[0], x), output_type=tf.int32), in1)\n",
            "return tf.unique(in1).id",
            "_, idx = tf.unique(in1)\nreturn idx\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1, side='left')\n",
            "return tf.unique(in1).indices",
            "return tf.unique_with_counts(in1).y\n",
            "return tf.nn.top_k(-tf.nn.top_k(-in1, k=in1.shape[0]).indices, k=in1.shape[0]).indices[:,0]\n",
            "return tf.cast(tf.math.segment_max(tf.argsort(in1), in1), tf.int32)\n",
            "values, indices = tf.unique(in1)\nreturn tf.gather(values, tf.argsort(indices))\n",
            "return tf.argsort(tf.unique_with_counts(in1).y, stable=True)\n",
            "def transform(in1):\n    return tf.math.segment_max(in1, in1)\n",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx",
            "def transform(in1):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.gather(unique_idx, tf.argsort(in1))",
            "return tf.math.segment_sum(tf.argsort(in1), tf.argsort(in1))\n",
            "return tf.math.segment_max(in1, tf.range(tf.shape(in1)[0]))\n",
            "return tf.argsort(tf.unique_with_counts(in1).y, stable=True)\n",
            "def transform(in1):\n    group_indices = tf.unique_with_counts(in1).y\n    return group_indices\n",
            "return tf.unique(in1)[2]\n",
            "def transform(in1): \n    return tf.math.segment_max(in1, tf.range(tf.size(in1)))\n",
            "def transform(in1):\n    segment_ids = tf.argsort(in1, stable=True)\n    _, unique_indices = tf.unique(in1)\n    group_indices = tf.searchsorted(unique_indices, in1, side='left')\n    return group_indices\n",
            "return tf.math.segment_min(tf.argsort(in1), tf.argsort(in1))",
            "return tf.cast(tf.argsort(tf.unique_with_counts(in1).y, stable=True), tf.int32)",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n",
            "values, _ = tf.unique(in1)\nreturn tf.argsort(tf.argsort(in1) + tf.cumsum(tf.ones_like(in1)) * (in1 // values), axis=-1, stable=True)\n",
            "def transform(in1):\n    group_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in1, group_indices)\n    unique_values, _ = tf.unique_with_counts(sorted_values)\n    group_indices = tf.searchsorted(unique_values, sorted_values)\n    return group_indices\n  ",
            "def transform(in1):\n    unique_values, idx = tf.unique(in1)\n    group_indices = tf.map_fn(lambda x: tf.argmax(tf.cast(tf.equal(in1, x), tf.int64)), unique_values)\n    group_indices = tf.gather(group_indices, idx)\n    return group_indices\n",
            "return tf.unique(in1).idx[tf.unique(in1).idx]",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1, side='left')\n",
            "def transform(in1):\n    return tf.math.unsorted_segment_mean(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n",
            "return tf.unique_with_counts(in1).y",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1)\n",
            "def transform(in1):\n    return tf.math.segment_mean(tf.argsort(in1), tf.argsort(in1))\n",
            "return tf.unique(in1)",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n  ",
            "def transform(in1):\n    return tf.argmax(tf.math.segment_max(tf.range(tf.size(in1)), in1), axis=0)\n",
            "return tf.unique_with_counts(in1)[2]\n",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n",
            "return tf.unique(in1).indices",
            "values, _ = tf.unique(in1)\nreturn tf.gather(values, tf.argsort(tf.sort(in1), stable=True))\n",
            "return tf.unique(in1).indices\n",
            "return tf.argsort(tf.argsort(in1, stable=True), stable=True)\n",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx\n",
            "return tf.argsort(tf.argsort(tf.unique(in1)[2]))\n",
            "_, idx = tf.unique(in1)\nreturn idx\n",
            "return tf.unique(in1).indices",
            "return tf.argsort(tf.argsort(in1), stable=True)",
            "return tf.searchsorted(tf.math.segment_max(in1, in1), in1, side='left')\n",
            "def transform(in1):\n    return tf.argmax(tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1)+1), axis=0)\n",
            "return tf.unique(in1)[2]",
            "_, idx = tf.unique(in1)\nreturn idx\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    values, idx = tf.unique(in1)\n    return idx\n    ",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return tf.gather(idx, tf.argsort(idx))\n    ",
            "def transform(in1):\n    return tf.unique(in1).idxofs",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.argsort(tf.searchsorted(values, in1, side='left'))\n    ",
            "def transform(in1):\n    return tf.unique(in1).indices",
            "def transform(in1):\n    return tf.unique_with_counts(in1).y\n    ",
            "def transform(in1):\n    unique_values, unique_idx, counts = tf.unique_with_counts(in1)\n    return tf.gather(unique_idx, tf.argsort(counts))",
            "def transform(in1):\n    unique_values, _ = tf.unique(in1)\n    return tf.searchsorted(unique_values, in1)\n    ",
            "def transform(in1):\n    return tf.unique(in1).values[tf.argsort(in1)]",
            "def transform(in1):\n    return tf.unique_with_counts(in1).idx\n    ",
            "def transform(in1):\n    unique_vals, idx = tf.unique(in1)\n    return idx\n",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.argsort(values)\n    ",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1), stable=True)\n    ",
            "def transform(in1):\n    return tf.unique(in1).indices\n    ",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1, side='left')\n    ",
            "def transform(in1):\n    return tf.unique(in1).idices",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1)",
            "def transform(in1):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1):\n    return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n    ",
            "def transform(in1):\n    return tf.unique(in1).indices",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1)+1)\n    ",
            "def transform(in1):\n    return tf.argsort(tf.cast(in1, tf.int32))[::-1]\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.gather(values, sorted_sequence=tf.argsort(values))\n",
            "def transform(in1):\n    return tf.unique_with_counts(in1).idx\n    ",
            "def transform(in1):\n    group_indices = tf.argmax(tf.math.segment_max(in1, tf.range(tf.size(in1))), axis=0)\n    return group_indices\n",
            "def transform(in1):\n    return tf.unique_with_counts(in1).y\n    ",
            "def transform(in1):\n    return tf.unique_with_counts(in1).idx\n    ",
            "def transform(in1):\n    return tf.cast(tf.math.segment_max(tf.range(tf.size(in1)), in1), tf.int32)\n",
            "def transform(in1):\n    return tf.math.segment_max(tf.range(tf.shape(in1)[0]), in1)\n",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(in1, tf.range(tf.size(in1)), tf.reduce_max(in1) + 1) - 1\n",
            "def transform(in1):\n    return tf.cast(tf.unique_with_counts(in1).y, tf.int32)",
            "def transform(in1):\n    return tf.unique_with_counts(in1)[2]\n    ",
            "def transform(in1):\n    return tf.unique(in1)[2]",
            "def transform(in1):\n    return tf.math.segment_max(in1, tf.range(tf.size(in1)))\n",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1))",
            "def transform(in1):\n    values, idx = tf.unique(in1)\n    return tf.searchsorted(values, in1)\n    ",
            "def transform(in1):\n    return tf.math.cumsum(tf.where(tf.cast(in1, tf.bool)), axis=0)\n    ",
            "def transform(in1):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.gather(unique_idx, tf.argsort(unique_values))\n",
            "def transform(in1):\n    group_indices = tf.math.segment_max(tf.argsort(in1), tf.argsort(in1))\n    return group_indices\n",
            "def transform(in1):\n    _, unique_idx, _ = tf.unique_with_counts(in1)\n    return tf.gather(unique_idx - 1, tf.argsort(unique_idx))\n    ",
            "def transform(in1):\n    return tf.unique_with_counts(in1).y\n    ",
            "def transform(in1):\n    unique_values, segment_ids = tf.unique(in1)\n    return segment_ids\n",
            "def transform(in1):\n    values, _ = tf.unique_with_counts(in1)\n    return tf.searchsorted(values, in1)\n    ",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1)\n    ",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=1)",
            "def transform(in1):\n    return tf.map_fn(lambda x: tf.argmax(tf.math.equal(tf.unique(x)[0], x), output_type=tf.int32), in1)\n    ",
            "def transform(in1):\n    return tf.unique(in1).id",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx\n    ",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1, side='left')\n    ",
            "def transform(in1):\n    return tf.unique(in1).indices",
            "def transform(in1):\n    return tf.unique_with_counts(in1).y\n    ",
            "def transform(in1):\n    return tf.nn.top_k(-tf.nn.top_k(-in1, k=in1.shape[0]).indices, k=in1.shape[0]).indices[:,0]\n    ",
            "def transform(in1):\n    return tf.cast(tf.math.segment_max(tf.argsort(in1), in1), tf.int32)\n    ",
            "def transform(in1):\n    values, indices = tf.unique(in1)\n    return tf.gather(values, tf.argsort(indices))\n    ",
            "def transform(in1):\n    return tf.argsort(tf.unique_with_counts(in1).y, stable=True)\n    ",
            "def transform(in1):\n    return tf.math.segment_max(in1, in1)\n",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx",
            "def transform(in1):\n    unique_values, unique_idx = tf.unique(in1)\n    return tf.gather(unique_idx, tf.argsort(in1))",
            "def transform(in1):\n    return tf.math.segment_sum(tf.argsort(in1), tf.argsort(in1))\n    ",
            "def transform(in1):\n    return tf.math.segment_max(in1, tf.range(tf.shape(in1)[0]))\n    ",
            "def transform(in1):\n    return tf.argsort(tf.unique_with_counts(in1).y, stable=True)\n    ",
            "def transform(in1):\n    group_indices = tf.unique_with_counts(in1).y\n    return group_indices\n",
            "def transform(in1):\n    return tf.unique(in1)[2]\n    ",
            "def transform(in1): \n    return tf.math.segment_max(in1, tf.range(tf.size(in1)))\n",
            "def transform(in1):\n    segment_ids = tf.argsort(in1, stable=True)\n    _, unique_indices = tf.unique(in1)\n    group_indices = tf.searchsorted(unique_indices, in1, side='left')\n    return group_indices\n",
            "def transform(in1):\n    return tf.math.segment_min(tf.argsort(in1), tf.argsort(in1))",
            "def transform(in1):\n    return tf.cast(tf.argsort(tf.unique_with_counts(in1).y, stable=True), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n    ",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.argsort(tf.argsort(in1) + tf.cumsum(tf.ones_like(in1)) * (in1 // values), axis=-1, stable=True)\n    ",
            "def transform(in1):\n    group_indices = tf.argsort(in1)\n    sorted_values = tf.gather(in1, group_indices)\n    unique_values, _ = tf.unique_with_counts(sorted_values)\n    group_indices = tf.searchsorted(unique_values, sorted_values)\n    return group_indices\n  ",
            "def transform(in1):\n    unique_values, idx = tf.unique(in1)\n    group_indices = tf.map_fn(lambda x: tf.argmax(tf.cast(tf.equal(in1, x), tf.int64)), unique_values)\n    group_indices = tf.gather(group_indices, idx)\n    return group_indices\n",
            "def transform(in1):\n    return tf.unique(in1).idx[tf.unique(in1).idx]",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1)\n    ",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1, side='left')\n    ",
            "def transform(in1):\n    return tf.math.unsorted_segment_mean(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n",
            "def transform(in1):\n    return tf.unique_with_counts(in1).y",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1)\n    ",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1)\n    ",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.searchsorted(values, in1)\n    ",
            "def transform(in1):\n    return tf.math.segment_mean(tf.argsort(in1), tf.argsort(in1))\n",
            "def transform(in1):\n    return tf.unique(in1)",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1) + 1)\n  ",
            "def transform(in1):\n    return tf.argmax(tf.math.segment_max(tf.range(tf.size(in1)), in1), axis=0)\n",
            "def transform(in1):\n    return tf.unique_with_counts(in1)[2]\n    ",
            "def transform(in1):\n    return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n    ",
            "def transform(in1):\n    return tf.unique(in1).indices",
            "def transform(in1):\n    values, _ = tf.unique(in1)\n    return tf.gather(values, tf.argsort(tf.sort(in1), stable=True))\n    ",
            "def transform(in1):\n    return tf.unique(in1).indices\n    ",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1, stable=True), stable=True)\n    ",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx\n",
            "def transform(in1):\n    return tf.argsort(tf.argsort(tf.unique(in1)[2]))\n    ",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx\n    ",
            "def transform(in1):\n    return tf.unique(in1).indices",
            "def transform(in1):\n    return tf.argsort(tf.argsort(in1), stable=True)",
            "def transform(in1):\n    return tf.searchsorted(tf.math.segment_max(in1, in1), in1, side='left')\n    ",
            "def transform(in1):\n    return tf.argmax(tf.math.unsorted_segment_max(tf.range(tf.size(in1)), in1, tf.reduce_max(in1)+1), axis=0)\n",
            "def transform(in1):\n    return tf.unique(in1)[2]",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx\n    "
        ],
        "tf_operators": {
            "tf.unique": 48,
            "tf.argsort": 29,
            "tf.gather": 10,
            "tf.searchsorted": 16,
            "tf.unique_with_counts": 22,
            "tf.int32": 9,
            "tf.cast": 10,
            "tf.size": 11,
            "tf.math.unsorted_segment_max": 5,
            "tf.reduce_max": 6,
            "tf.range": 13,
            "tf.math.bincount": 1,
            "tf.argmax": 5,
            "tf.math.segment_max": 11,
            "tf.shape": 2,
            "tf.where": 1,
            "tf.bool": 1,
            "tf.math.cumsum": 1,
            "tf.reduce_sum": 1,
            "tf.map_fn": 2,
            "tf.math.equal": 1,
            "tf.nn.top_k": 1,
            "tf.math.segment_sum": 1,
            "tf.math.segment_min": 1,
            "tf.cumsum": 1,
            "tf.ones_like": 1,
            "tf.equal": 1,
            "tf.int64": 1,
            "tf.math.unsorted_segment_mean": 1,
            "tf.math.segment_mean": 1,
            "tf.sort": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                -1
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                1,
                1
            ],
            [],
            [
                2
            ],
            [
                2
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                0,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                0
            ],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [
                2
            ],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 31,
            "shape_tuple": 0,
            "input_var": 152,
            "tf_int64": 1,
            "tf_int32": 9,
            "axis": 0,
            "provided": 6,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 1
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "return tf.matmul(in1, in2)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.transpose(tf.matmul(in1, in2), perm=[0, 2, 1])",
            "return tf.transpose(tf.tensordot(in1, in2, [[1], [0]]), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.transpose(tf.tensordot(tf.transpose(in1), tf.transpose(in2), axes=1), perm=[2, 0, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n  ",
            "return tf.matmul(in1, in2)",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.expand_dims(tf.tensordot(in1, in2, axes=1), axis=0)",
            "return tf.matmul(in1, in2)\n",
            "return tf.transpose(tf.matmul(tf.transpose(in1), tf.transpose(in2)), perm=[2, 0, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.transpose(tf.cast(tf.unstack(tf.matmul(in1, in2), axis=2), tf.int32))",
            "return tf.matmul(in1, in2)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.reshape(tf.transpose(tf.matmul(tf.transpose(in1), tf.transpose(in2))), [2, 2, 3])",
            "return tf.reshape(tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0)), [-1, tf.shape(in2)[1]])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.reshape(tf.matmul(tf.reshape(in1, [-1, 1, 2]), tf.reshape(in2, [1, 2, 3])), [-1, 2, 3])",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=-1))",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, -1))",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.transpose(tf.matmul(in1, in2), perm=[0, 2, 1])",
            "def transform(in1, in2):\n    return tf.transpose(tf.tensordot(in1, in2, [[1], [0]]), perm=[0, 2, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.transpose(tf.tensordot(tf.transpose(in1), tf.transpose(in2), axes=1), perm=[2, 0, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n  ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.expand_dims(tf.tensordot(in1, in2, axes=1), axis=0)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.matmul(tf.transpose(in1), tf.transpose(in2)), perm=[2, 0, 1])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.transpose(tf.cast(tf.unstack(tf.matmul(in1, in2), axis=2), tf.int32))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.reshape(tf.transpose(tf.matmul(tf.transpose(in1), tf.transpose(in2))), [2, 2, 3])",
            "def transform(in1, in2):\n    return tf.reshape(tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0)), [-1, tf.shape(in2)[1]])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.reshape(tf.matmul(tf.reshape(in1, [-1, 1, 2]), tf.reshape(in2, [1, 2, 3])), [-1, 2, 3])",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=-1))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), tf.expand_dims(in2, -1))",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    "
        ],
        "tf_operators": {
            "tf.matmul": 83,
            "tf.tensordot": 17,
            "tf.expand_dims": 11,
            "tf.transpose": 10,
            "tf.unstack": 1,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.reshape": 3,
            "tf.shape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2,
                0
            ],
            [
                1
            ],
            [],
            [
                -1,
                0
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                0,
                0,
                2,
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                2,
                0,
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1,
                0,
                2,
                1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                2,
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                2,
                2,
                3
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [],
            [],
            [],
            [],
            [
                -1,
                1,
                2,
                1,
                2,
                3,
                -1,
                2,
                3
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1,
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                -1
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 3,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 59,
            "shape_tuple": 0,
            "input_var": 201,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 15,
            "provided": 0,
            "tf_float32": 0,
            "shape": 3,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "unique_values, _, counts = tf.unique_with_counts(in1)\nreturn unique_values, counts\n",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.segment_sum(tf.ones_like(in1, dtype=tf.int32), in1)\n",
            "counts = tf.math.bincount(in1)\nreturn tf.boolean_mask(counts, tf.not_equal(counts, 0))\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    counts = tf.math.bincount(in1)\n    return counts[counts > 0]\n",
            "return tf.math.bincount(in1)",
            "counts = tf.math.bincount(in1)\nreturn counts[counts > 0]\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "result = tf.math.bincount(in1)\nreturn result[result > 0]\n",
            "def transform(in1):\n    unique_numbers, _, counts = tf.unique_with_counts(in1)\n    return counts\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    counts = tf.math.segment_sum(tf.ones_like(in1), in1)\n    unique_numbers = tf.math.segment_max(in1, in1)\n    return counts[unique_numbers]\n",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "counts = tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, tf.reduce_max(in1)+1)\nreturn tf.boolean_mask(counts, tf.not_equal(counts, 0))\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, tf.reduce_max(in1)+1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    unique_values, _ = tf.unique_with_counts(in1)\n    return unique_values\n",
            "def transform(in1):\n    count = tf.math.bincount(in1)\n    return tf.boolean_mask(count, tf.not_equal(count, 0))\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "def transform(input_tensor):\n    counts = tf.math.bincount(input_tensor)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.math.bincount(in1)\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    unique_values, _, counts = tf.unique_with_counts(in1)\n    return unique_values, counts\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.segment_sum(tf.ones_like(in1, dtype=tf.int32), in1)\n",
            "def transform(in1):\n    counts = tf.math.bincount(in1)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    counts = tf.math.bincount(in1)\n    return counts[counts > 0]\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    counts = tf.math.bincount(in1)\n    return counts[counts > 0]\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    result = tf.math.bincount(in1)\n    return result[result > 0]\n    ",
            "def transform(in1):\n    unique_numbers, _, counts = tf.unique_with_counts(in1)\n    return counts\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    counts = tf.math.segment_sum(tf.ones_like(in1), in1)\n    unique_numbers = tf.math.segment_max(in1, in1)\n    return counts[unique_numbers]\n",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    counts = tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, tf.reduce_max(in1)+1)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.unsorted_segment_sum(tf.ones_like(in1), in1, tf.reduce_max(in1)+1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    unique_values, _ = tf.unique_with_counts(in1)\n    return unique_values\n",
            "def transform(in1):\n    count = tf.math.bincount(in1)\n    return tf.boolean_mask(count, tf.not_equal(count, 0))\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n    ",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(input_tensor):\n    counts = tf.math.bincount(input_tensor)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.bincount(in1)\n",
            "def transform(in1):\n    return tf.math.bincount(in1)",
            "def transform(in1):\n    return tf.math.bincount(in1)"
        ],
        "tf_operators": {
            "tf.math.bincount": 91,
            "tf.unique_with_counts": 3,
            "tf.ones_like": 4,
            "tf.math.segment_sum": 2,
            "tf.int32": 1,
            "tf.boolean_mask": 4,
            "tf.not_equal": 4,
            "tf.bincount": 2,
            "tf.math.segment_max": 1,
            "tf.reduce_max": 2,
            "tf.math.unsorted_segment_sum": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 9,
            "shape_tuple": 0,
            "input_var": 108,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "result = tf.gather(in1, [0, 2], axis=1)\nreturn result\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\n",
            "return tf.slice(in1, [0, 0], [-1, 2])\n",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.boolean_mask(in1, tf.constant([True, False, True], dtype=tf.bool), axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "out = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\nreturn out\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.stack([in1[:, 0], in1[:, 2]], axis=1)\n",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n",
            "return tf.slice(in1, [0, 0], [2, 1]), tf.slice(in1, [0, 2], [2, 1])\n",
            "result = tf.gather(in1, [0, 2], axis=1)\nreturn result\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "result = tf.gather(in1, indices=[0, 2], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.unsorted_segment_max(in1, tf.range(in1.shape[1]), in1.shape[1])\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "def transform(in1):\n    return tf.stack([in1[:,0], in1[:,2]], axis=1)\n",
            "return tf.slice(in1, [0, 0], [-1, 1])",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n",
            "result = tf.slice(in1, [0, 0], [tf.shape(in1)[0], 1])\nresult = tf.concat([result, tf.slice(in1, [0, 2], [tf.shape(in1)[0], 1])], axis=1)\nreturn result\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.stack((in1[:,0], in1[:,2]), axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.slice(in1, [0, 0], [-1, 1])+\",\"+tf.slice(in1, [0, 2], [-1, -1])",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.slice(in1, [0, 0], [-1, 2])\n",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.slice(in1, [0, 0], [2, 1])  # Remove the second column using tf.slice\n",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)\n",
            "return tf.concat([in1[:,:1], in1[:,2:]], axis=1)\n",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "result = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.slice(in1, [0, 0], [-1, 1])",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.slice(in1, [0, 0], [-1, 1, -1, 1])\n",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "def transform(in1):\n    return in1[:, [0, 2]]\n",
            "result = tf.stack([in1[:,0], in1[:,2]], axis=1)\nreturn result\n",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return in1[:, [0, 2]]\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "result = tf.gather(in1, [0, 2], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.pad(in1, paddings=tf.constant([[0, 0], [0, 0], [0, -1]]))",
            "return tf.unstack(in1, axis=1)[0], tf.unstack(in1, axis=1)[2]",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "result = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\nreturn result\n",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)",
            "return tf.slice(in1, [0, 0], [2, 1])",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "result = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [-1, 1])\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)",
            "return tf.boolean_mask(in1, [True, False, True], axis=1)\n",
            "result = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n",
            "result = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\nreturn result\n",
            "return tf.slice(in1, [0, 0], [2, 1])  # Remove a column at index 1\n",
            "result = tf.gather(in1, [0, 2], axis=1)\nreturn result\n",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    result = tf.gather(in1, [0, 2], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\n",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [-1, 2])\n    ",
            "def transform(in1):\n    return tf.boolean_mask(in1, [True, False, True], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "def transform(in1):\n    return tf.boolean_mask(in1, tf.constant([True, False, True], dtype=tf.bool), axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "def transform(in1):\n    out = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    return out\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 2]], axis=1)\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "def transform(in1):\n    return tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1]), tf.slice(in1, [0, 2], [2, 1])\n    ",
            "def transform(in1):\n    result = tf.gather(in1, [0, 2], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    result = tf.gather(in1, indices=[0, 2], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.unsorted_segment_max(in1, tf.range(in1.shape[1]), in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1[:,0], in1[:,2]], axis=1)\n",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [-1, 1])",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n    ",
            "def transform(in1):\n    result = tf.slice(in1, [0, 0], [tf.shape(in1)[0], 1])\n    result = tf.concat([result, tf.slice(in1, [0, 2], [tf.shape(in1)[0], 1])], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.stack((in1[:,0], in1[:,2]), axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [-1, 1])+\",\"+tf.slice(in1, [0, 2], [-1, -1])",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [-1, 2])\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])",
            "def transform(in1):\n    result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])  # Remove the second column using tf.slice\n    ",
            "def transform(in1):\n    return tf.boolean_mask(in1, [True, False, True], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:,:1], in1[:,2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    result = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [-1, 1])",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [-1, 1, -1, 1])\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return in1[:, [0, 2]]\n",
            "def transform(in1):\n    result = tf.stack([in1[:,0], in1[:,2]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.boolean_mask(in1, [True, False, True], axis=1)",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return in1[:, [0, 2]]\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    result = tf.gather(in1, [0, 2], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.pad(in1, paddings=tf.constant([[0, 0], [0, 0], [0, -1]]))",
            "def transform(in1):\n    return tf.unstack(in1, axis=1)[0], tf.unstack(in1, axis=1)[2]",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])",
            "def transform(in1):\n    result = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.boolean_mask(in1, [True, False, True], axis=1)",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "def transform(in1):\n    result = tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [-1, 1])\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)",
            "def transform(in1):\n    return tf.boolean_mask(in1, [True, False, True], axis=1)\n    ",
            "def transform(in1):\n    result = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n    ",
            "def transform(in1):\n    return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    ",
            "def transform(in1):\n    result = tf.concat([in1[:, :1], in1[:, 2:]], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.slice(in1, [0, 0], [2, 1])  # Remove a column at index 1\n    ",
            "def transform(in1):\n    result = tf.gather(in1, [0, 2], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.gather(in1, [0, 2], axis=1)\n"
        ],
        "tf_operators": {
            "tf.gather": 26,
            "tf.concat": 30,
            "tf.slice": 30,
            "tf.boolean_mask": 6,
            "tf.bool": 1,
            "tf.constant": 2,
            "tf.stack": 4,
            "tf.unsorted_segment_max": 1,
            "tf.range": 1,
            "tf.shape": 1,
            "tf.pad": 1,
            "tf.unstack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                -1,
                2
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                2,
                1,
                0,
                2,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                -1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0,
                2,
                0,
                1,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                0,
                -1,
                1,
                0,
                2,
                -1,
                -1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                -1,
                2
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                -1,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                -1,
                1,
                -1,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                0,
                0,
                0,
                0,
                -1
            ],
            [
                1,
                0,
                1,
                2
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                -1,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 266,
            "shape_tuple": 0,
            "input_var": 139,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 86,
            "provided": 0,
            "tf_float32": 0,
            "shape": 8,
            "tf_bool": 1
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "return tf.tensordot(tf.expand_dims(in1, 1), in2, 1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1, transpose_a=True)\n",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.multiply(in2, in1[:,:,0:1]) + tf.multiply(2*in1[:,:,1:2], in2)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, tf.reshape(in1, [2, 1, 2]))\n",
            "return tf.tensordot(in2, in1, 1)",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=[[1], [1]])\n",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1[..., tf.newaxis])\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in1, in2)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nreturn result\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, tf.expand_dims(in1, 2))\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, tf.expand_dims(in1, 2))",
            "return tf.tensordot(tf.expand_dims(in1, 2), in2, axes=[[1], [0]])\n",
            "result = tf.tensordot(in2, in1, axes=1)\nreturn result\n  ",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(tf.expand_dims(in1, -1), in2)[:, :, 0]\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=[[2], [1]]).numpy()\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, axis=-1), in2), axis=1)",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, 1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nreturn result\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1).numpy()\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.matmul(in2, in1[..., tf.newaxis])\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\nresult = tf.transpose(result, perm=[0, 2, 1])\n",
            "return tf.tensordot(in1, in2, 1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "result = tf.tensordot(tf.expand_dims(in1, axis=-1), in2, axes=[[-1], [-1]])\nresult = tf.squeeze(result, axis=-1)\nreturn result\n",
            "return tf.matmul(in2, tf.expand_dims(in1, 2))\n",
            "return tf.matmul(in2, in1)",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.matmul(in1, in2)\n",
            "return tf.multiply(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, in1, transpose_b=True)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=[[2], [1]])\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, in1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n  ",
            "return tf.matmul(in2, in1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(tf.expand_dims(in1, 1), in2, 1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1, transpose_a=True)\n    ",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    return tf.multiply(in2, in1[:,:,0:1]) + tf.multiply(2*in1[:,:,1:2], in2)\n",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.reshape(in1, [2, 1, 2]))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, 1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=[[1], [1]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, 1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1[..., tf.newaxis])\n",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in2, in1, axes=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 2))",
            "def transform(in1, in2):\n    return tf.tensordot(tf.expand_dims(in1, 2), in2, axes=[[1], [0]])\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in2, in1, axes=1)\n    return result\n      ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), in2)[:, :, 0]\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=[[2], [1]]).numpy()\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, axis=-1), in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, 1)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in2, in1, axes=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1).numpy()\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1[..., tf.newaxis])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in2, in1, axes=1)\n    result = tf.transpose(result, perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, 1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, 1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    result = tf.tensordot(tf.expand_dims(in1, axis=-1), in2, axes=[[-1], [-1]])\n    result = tf.squeeze(result, axis=-1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 2))\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1, transpose_b=True)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=[[2], [1]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n      ",
            "def transform(in1, in2):\n    return tf.matmul(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    "
        ],
        "tf_operators": {
            "tf.expand_dims": 8,
            "tf.tensordot": 69,
            "tf.matmul": 28,
            "tf.multiply": 3,
            "tf.reshape": 1,
            "tf.newaxis": 2,
            "tf.reduce_sum": 1,
            "tf.transpose": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                0,
                1,
                2,
                1,
                2
            ],
            [
                1
            ],
            [
                2,
                1,
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2,
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                -1,
                -1,
                -1
            ],
            [
                2
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 86,
            "shape_tuple": 0,
            "input_var": 202,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 11,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(tf.cast(in1, tf.bool), axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(tf.cast(in1, tf.bool), axis=1)\n",
            "\nreturn tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "result = tf.reduce_any(in1, axis=1)\nreturn result\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=2)\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=-1)",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=0)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "result = tf.reduce_any(in1, axis=2)\nreturn result\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "row_any_true = tf.reduce_any(in1, axis=2)\nreturn row_any_true\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(tf.cast(in1, tf.bool), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(tf.cast(in1, tf.bool), axis=1)\n    ",
            "def transform(in1):\n    \n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    result = tf.reduce_any(in1, axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)\n    ",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=0)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    result = tf.reduce_any(in1, axis=2)\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=2)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    row_any_true = tf.reduce_any(in1, axis=2)\n    return row_any_true\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n    "
        ],
        "tf_operators": {
            "tf.reduce_any": 100,
            "tf.bool": 2,
            "tf.cast": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 94,
            "shape_tuple": 0,
            "input_var": 100,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 6,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 2
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.constant(0), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.constant(0, dtype=in1.dtype), in1)\n",
            "def transform(in1):\n    return tf.not_equal(in1, 1) * in1\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.multiply(in1, tf.not_equal(in1, 1))\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    out = tf.where(tf.equal(in1, 1), 0, in1)\n    return out\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.math.logical_not(tf.equal(in1, 1)) * in1\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    result = tf.where(tf.equal(in1, 1), 0, in1)\n    return result\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "\nreturn tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.constant(0), in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "result = tf.where(tf.equal(in1, 1), 0, in1)\nreturn result\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(in1 == 1, 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.constant(0), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.constant(0, dtype=in1.dtype), in1)\n",
            "def transform(in1):\n    return tf.not_equal(in1, 1) * in1\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.multiply(in1, tf.not_equal(in1, 1))\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    out = tf.where(tf.equal(in1, 1), 0, in1)\n    return out\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.math.logical_not(tf.equal(in1, 1)) * in1\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    result = tf.where(tf.equal(in1, 1), 0, in1)\n    return result\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    \n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.constant(0), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    result = tf.where(tf.equal(in1, 1), 0, in1)\n    return result\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(in1 == 1, 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n    "
        ],
        "tf_operators": {
            "tf.zeros_like": 60,
            "tf.equal": 97,
            "tf.where": 97,
            "tf.constant": 3,
            "tf.not_equal": 2,
            "tf.multiply": 1,
            "tf.math.logical_not": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 137,
            "shape_tuple": 0,
            "input_var": 260,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))[:, :, 0]\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))\n",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "output = in1 * tf.expand_dims(in2, axis=1)\nreturn output\n",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)\n",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.matmul(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.matmul(tf.cast(in1, tf.int32), tf.reshape(tf.cast(in2, tf.int32), [-1, 1]))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))[:,:,0]",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.multiply(tf.expand_dims(in2, 1), in1)",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.matmul(tf.reshape(in1, [3, 1, 2]), tf.reshape(in2, [1, 3, 1]))",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n",
            "output = tf.multiply(in1, tf.expand_dims(in2, 1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n",
            "return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.matmul(in1, tf.reshape(in2, (-1, 1))).numpy()",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n                                                                                                                                          ",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), in2)",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))\n  ",
            "return tf.multiply(tf.expand_dims(in1, -1), in2)",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.tensordot(in1, in2, 1)\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))\n",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)\n",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.matmul(tf.cast(tf.expand_dims(in1, axis=2), tf.int32), tf.cast(tf.expand_dims(in2, axis=1), tf.int32))",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\nreturn result\n",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.matmul(tf.expand_dims(in1, axis=-1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in2, 1), in1)",
            "return tf.expand_dims(in1, 2) * tf.expand_dims(in2, 1)",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=-1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))\n ",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.matmul(tf.expand_dims(in2, 1), in1)",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\nreturn result\n",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "return tf.broadcast_to(tf.expand_dims(in1, 2), in2.shape) * tf.expand_dims(in2, 1)",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "result = tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n",
            "return tf.multiply(tf.expand_dims(in1, 2), in2)",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))[:, :, 0]\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "def transform(in1, in2):\n    output = in1 * tf.expand_dims(in2, axis=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), in2)\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.cast(in1, tf.int32), tf.reshape(tf.cast(in2, tf.int32), [-1, 1]))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))[:,:,0]",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in2, 1), in1)",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.matmul(tf.reshape(in1, [3, 1, 2]), tf.reshape(in2, [1, 3, 1]))",
            "def transform(in1, in2):\n    output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))\n    ",
            "def transform(in1, in2):\n    output = tf.multiply(in1, tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.reshape(in2, (-1, 1))).numpy()",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n                                                                                                                                          ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), in2)",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))\n      ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), in2)",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, 1)\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), in2)\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.cast(tf.expand_dims(in1, axis=2), tf.int32), tf.cast(tf.expand_dims(in2, axis=1), tf.int32))",
            "def transform(in1, in2):\n    result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, axis=-1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in2, 1), in1)",
            "def transform(in1, in2):\n    return tf.expand_dims(in1, 2) * tf.expand_dims(in2, 1)",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), in2)\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    output = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=-1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))\n     ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in2, 1), in1)",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.broadcast_to(tf.expand_dims(in1, 2), in2.shape) * tf.expand_dims(in2, 1)",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    result = tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), in2)",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "def transform(in1, in2):\n    return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n    "
        ],
        "tf_operators": {
            "tf.matmul": 22,
            "tf.expand_dims": 95,
            "tf.multiply": 73,
            "tf.reshape": 3,
            "tf.int32": 2,
            "tf.cast": 2,
            "tf.tensordot": 2,
            "tf.broadcast_to": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                2,
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                2
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                3,
                1,
                2,
                1,
                3,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                2
            ],
            [
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 126,
            "shape_tuple": 0,
            "input_var": 200,
            "tf_int64": 0,
            "tf_int32": 4,
            "axis": 39,
            "provided": 0,
            "tf_float32": 0,
            "shape": 2,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, 2)\n",
            "result = tf.stack([in1, in1], axis=1)\nreturn result\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)",
            "return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, repeats=2)\n",
            "return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1)\n",
            "return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=-1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=in1.dtype)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(tf.expand_dims(in1, 1), [1, 2]), [-1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])\n",
            "result = tf.stack([in1, in1], axis=1)\nreturn result\n",
            "return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n  ",
            "def transform(in1):\n    return tf.expand_dims(in1, 1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "return tf.repeat(input, 2)\n",
            "return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(input_tensor):\n    return tf.repeat(input_tensor, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=1)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(in1, 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "return tf.repeat(in1, repeats=2)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    result = tf.stack([in1, in1], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.expand_dims(in1, axis=-1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=-1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.expand_dims(in1, 1) * tf.ones((1, 2), dtype=in1.dtype)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(tf.expand_dims(in1, 1), [1, 2]), [-1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, axis=1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [-1, 2])\n",
            "def transform(in1):\n    result = tf.stack([in1, in1], axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, -1), [1, 2])\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n  ",
            "def transform(in1):\n    return tf.expand_dims(in1, 1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.stack([in1, in1], axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(input, 2)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)",
            "def transform(input_tensor):\n    return tf.repeat(input_tensor, 2)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, axis=1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2, axis=1)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(in1, repeats=2)\n    "
        ],
        "tf_operators": {
            "tf.tile": 35,
            "tf.expand_dims": 62,
            "tf.repeat": 57,
            "tf.stack": 5,
            "tf.ones": 1,
            "tf.reshape": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                -1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                -1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                -1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2,
                -1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                -1,
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                -1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                2,
                1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 132,
            "shape_tuple": 0,
            "input_var": 105,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 94,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, axis=0))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, (1, 2, 4)))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 2) + in3\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.matmul(in1, in2) + in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.matmul(in1, in2) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1]) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.matmul(in1, in2) + tf.expand_dims(in3, axis=1)\n",
            "return tf.add(tf.multiply(in1, tf.expand_dims(in2, -2)), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.matmul(in1, in2) + in3\n",
            "return tf.add(tf.matmul(in1, in2), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "res = tf.add(tf.matmul(in1, in2), in3)\nreturn res\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.matmul(in1, in2), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), tf.reshape(in3, [1, 2, 4]))\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 2) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.matmul(in1, in2), tf.reshape(in3, (1, 2, 4)))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "result = tf.add(tf.multiply(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.transpose(tf.matmul(in1, tf.expand_dims(in2, axis=0)) + tf.expand_dims(in3, axis=(0, 2)), perm=[0, 2, 1])\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=-1) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.matmul(in1, in2) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.matmul(in1, in2) + in3\n",
            "result = tf.add(tf.multiply(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.math.add(tf.tensordot(tf.cast(in1, tf.int32), in2, axes=1), tf.constant(in3))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.matmul(in1, in2), in3)\n",
            "res = tf.add(tf.matmul(in1, in2), in3)\nreturn res\n",
            "mul_result = tf.multiply(in1, in2)\nadd_result = tf.add(mul_result, in3)\nreturn add_result\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), tf.reshape(in3, [2, 2, 4]))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "product = tf.matmul(in1, in2[:, tf.newaxis, :])\nreturn tf.add(product, in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.matmul(in1, in2) + in3\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2],[0]]), in3)\n",
            "return tf.add(tf.matmul(in1, in2), tf.expand_dims(in3, 1))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, (1, 2, 4)))\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.matmul(in1, tf.expand_dims(in2, 0)), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.matmul(in1, in2), in3)\n\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=2), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n",
            "result = tf.add(tf.multiply(in1, in2), in3)\nreturn result\n",
            "prod = tf.matmul(in1, in2)\nreturn tf.add(prod, in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.expand_dims(in3, axis=0))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, (1, 2, 4)))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 2) + in3\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2) + in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.matmul(in1, in2) + in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1]) + in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.matmul(in1, in2) + tf.expand_dims(in3, axis=1)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, tf.expand_dims(in2, -2)), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.matmul(in1, in2) + in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    res = tf.add(tf.matmul(in1, in2), in3)\n    return res\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), tf.reshape(in3, [1, 2, 4]))\n    ",
            "def transform(in1, in2, in3):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 2) + in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), tf.reshape(in3, (1, 2, 4)))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.transpose(tf.matmul(in1, tf.expand_dims(in2, axis=0)) + tf.expand_dims(in3, axis=(0, 2)), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2, in3):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=-1) + in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.matmul(in1, in2) + in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.matmul(in1, in2) + in3\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.math.add(tf.tensordot(tf.cast(in1, tf.int32), in2, axes=1), tf.constant(in3))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)\n    ",
            "def transform(in1, in2, in3):\n    res = tf.add(tf.matmul(in1, in2), in3)\n    return res\n    ",
            "def transform(in1, in2, in3):\n    mul_result = tf.multiply(in1, in2)\n    add_result = tf.add(mul_result, in3)\n    return add_result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), tf.reshape(in3, [2, 2, 4]))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    product = tf.matmul(in1, in2[:, tf.newaxis, :])\n    return tf.add(product, in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.matmul(in1, in2) + in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2],[0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), tf.expand_dims(in3, 1))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, (1, 2, 4)))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, tf.expand_dims(in2, 0)), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.matmul(in1, in2), in3)\n    \n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [0]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=2), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=[[2], [1]]), in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    prod = tf.matmul(in1, in2)\n    return tf.add(prod, in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.matmul(in1, in2), in3)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.tensordot(in1, in2, 1), in3)\n    "
        ],
        "tf_operators": {
            "tf.expand_dims": 8,
            "tf.add": 88,
            "tf.tensordot": 65,
            "tf.reshape": 8,
            "tf.multiply": 8,
            "tf.reduce_sum": 3,
            "tf.matmul": 27,
            "tf.transpose": 2,
            "tf.constant": 1,
            "tf.math.add": 1,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.newaxis": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                2,
                0
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [],
            [],
            [
                2,
                1
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                -2
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1,
                1,
                2,
                4
            ],
            [],
            [
                1
            ],
            [
                2,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                2,
                0,
                1,
                2,
                4
            ],
            [
                1,
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                2,
                4
            ],
            [
                1
            ],
            [],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                0,
                2,
                0,
                2,
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                2,
                1,
                2,
                2,
                4
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                2,
                1
            ],
            [
                1
            ],
            [
                2,
                0
            ],
            [
                1,
                1,
                2,
                4
            ],
            [
                2,
                1
            ],
            [
                2,
                0
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                2,
                0
            ],
            [
                2
            ],
            [
                2,
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            4,
            -1,
            -2
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 80,
            "shape_tuple": 0,
            "input_var": 300,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 31,
            "provided": 1,
            "tf_float32": 0,
            "shape": 5,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]*10 + in1[:, 2], stable=True))\n",
            "indices = tf.argsort(in1[:,1], axis=0, stable=True)\nsorted_in1 = tf.gather(in1, indices)\nindices_ties = tf.argsort(sorted_in1[:,0], axis=0, stable=True)\nreturn tf.gather(sorted_in1, indices_ties)\n",
            "return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True))\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1)), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "return tf.gather(in1, tf.argsort(tf.reverse(in1, axis=1), axis=0)[:,0])\n  ",
            "return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))",
            "result = tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\nsorted_result = tf.gather_nd(result, tf.argsort(result[:, 1]))\nreturn sorted_result\n",
            "result = tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1]*10 + in1[:, 2], stable=True), axis=0)\nreturn result\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))",
            "sorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsecond_sort_indices = tf.argsort(sorted_in1[:, 1])\nsorted_in1 = tf.gather(sorted_in1, second_sort_indices)\nreturn sorted_in1\n",
            "result = tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1], axis=0, stable=True), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], direction='ASCENDING', stable=True))",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))\n",
            "return tf.gather(in1, tf.argsort(tf.stack([tf.gather(in1[:, 0], tf.argsort(in1[:, 1])), tf.range(7)], axis=1)[:, 0]))",
            "result = tf.gather(in1, tf.argsort(in1[:, 0]*1000 + in1[:, 1]))\nreturn result\n",
            "return tf.argsort(tf.reverse(in1, axis=1), direction='ASCENDING')\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]*1000 + in1[:, 0]))",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)\n",
            "out = tf.sort(in1, axis=0)\n\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(tf.argsort(tf.argsort(in1, axis=0), axis=1), tf.argsort(in1, axis=0))\n",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)\n",
            "return tf.gather(in1, tf.argsort(tf.cast(in1[:, 0]*1000 + in1[:, 1], tf.int32)))",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1, stable=True))",
            "return tf.gather(params=tf.gather_nd(params=in1, indices=tf.argsort(values=in1[:, :2], axis=0)), indices=tf.argsort(values=in1[:, 0], axis=0))\n",
            "\nreturn tf.gather(in1, tf.argsort(in1[:, 0]*10 + in1[:, 1], stable=True))\n",
            "return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:, 0])",
            "return tf.gather(in1, tf.argsort(in1[:, 1]*10 + in1[:, 2], stable=True))",
            "return tf.gather(params=in1, indices=tf.argsort(tf.transpose(in1), axis=1))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0] * 1000 + in1[:, 1]))",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1)))",
            "return tf.argsort(in1, axis=0, stable=True)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0))",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis = 0)",
            "return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1, stable=True)[:,0])",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True), axis=0)",
            "temp = tf.argsort(in1[:, 1])\nsorted_in1 = tf.gather(in1, temp)\nreturn tf.gather(sorted_in1, tf.argsort(sorted_in1[:, 0]))\n",
            "return tf.argsort(in1[:, 1:], axis=0, stable=True, direction='ASCENDING') + tf.math.cumsum(tf.ones_like(in1[:, 1:]), axis=0)\n",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)\n",
            "return tf.gather_nd(in1, tf.argsort(in1[:, 0], axis=0) + tf.argsort(in1[:, 1], axis=0))",
            "return tf.gather_nd(in1, tf.argsort(in1[:, 0], axis=0, stable=True))\n",
            "sorted_indices = tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1), axis=0)\nout = tf.gather(in1, sorted_indices)\nreturn out\n",
            "sorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsame_values = tf.equal(sorted_in1[:-1, 0], sorted_in1[1:, 0])\ntied_indices = tf.argmax(tf.concat([same_values, [False]], axis=0))\nsorted_tied_subindices = tf.argsort(sorted_in1[tied_indices:, 1])\nfinal_indices = tf.concat([sorted_indices[:tied_indices], sorted_indices[tied_indices:][sorted_tied_subindices]], axis=0)\nresult = tf.gather(in1, final_indices)\nreturn result\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], stable=True), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True), axis=0)\n",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1], axis=0, stable=True))\n",
            "return tf.gather(params=in1, indices=tf.argsort(values=in1[:, 0], axis=0, stable=True), axis=0)\n",
            "return tf.gather_nd(in1, tf.argsort(tf.transpose(in1), axis=1))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))",
            "return tf.gather(in1, tf.argsort(in1[:, 1]*10 + in1[:, 0]))\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], -in1[:, 1]], axis=1), stable=True))",
            "return tf.gather(tf.argsort(in1, axis=0, stable=True), tf.argsort(in1[:,1], stable=True))\n",
            "return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:, 0])",
            "return tf.gather(in1, tf.argsort(in1[:, 1:], axis=0) + tf.argsort(in1[:, 0:1], stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), batch_dims=1)",
            "return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1] * 1000 + in1[:, 0], stable=True), axis=0)\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "return tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1]*10 + in1[:, 2], axis=0))\n",
            "return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:,0])",
            "return tf.gather(in1, tf.argsort(in1[:, 0]), axis=0)",
            "return tf.gather(in1, tf.argsort(tf.reverse(in1, axis=1), axis=0), axis=0)",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))",
            "return tf.gather(params=in1, indices=tf.argsort(tf.concat([in1[:,0], in1[:,1]], axis=0), stable=True), axis=0)\n",
            "result = tf.argsort(in1[:, 1], axis=0)\nin1_sorted = tf.gather(in1, result)\n",
            "indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, indices)\nstart_idx = tf.reduce_min(tf.where(tf.not_equal(sorted_in1[1:], sorted_in1[:-1])))+1\nsorted_in1 = tf.concat([sorted_in1[start_idx:], sorted_in1[:start_idx]], axis=0)\nreturn sorted_in1\n",
            "indices = tf.argsort(in1, axis=0)\nreturn tf.gather(in1, indices)\n",
            "return tf.gather(params=tf.argsort(in1, axis=0, stable=True), indices=tf.range(tf.shape(in1)[0]))\n",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, :2]))",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True))\n",
            "return tf.gather(in1, tf.argsort(tf.transpose(in1)[:, ::-1], axis=0)[:, 0])",
            "return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "sorted_indices = tf.argsort(in1[:, 0])\nin1_sorted = tf.gather(in1, sorted_indices)\nsorted_indices_tie = tf.argsort(in1_sorted[:, 1])\nout = tf.gather(in1_sorted, sorted_indices_tie)\nreturn out\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], stable=True), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 0], stable=True), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))\n",
            "return tf.gather(in1, tf.argsort(tf.cast(in1, tf.int32)[:, 0], stable=True))",
            "return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=-1, stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1:], stable=True)[:, 0])",
            "return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, direction='ASCENDING'), axis=0)\n",
            "return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1)[1])\n",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))\n",
            "return tf.gather(in1, tf.argsort(in1[:,1], stable=True), axis=0)",
            "return tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\n",
            "return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]*10 + in1[:, 2], stable=True))\n    ",
            "def transform(in1):\n    indices = tf.argsort(in1[:,1], axis=0, stable=True)\n    sorted_in1 = tf.gather(in1, indices)\n    indices_ties = tf.argsort(sorted_in1[:,0], axis=0, stable=True)\n    return tf.gather(sorted_in1, indices_ties)\n    ",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1)), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.reverse(in1, axis=1), axis=0)[:,0])\n      ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))",
            "def transform(in1):\n    result = tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\n    sorted_result = tf.gather_nd(result, tf.argsort(result[:, 1]))\n    return sorted_result\n    ",
            "def transform(in1):\n    result = tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1]*10 + in1[:, 2], stable=True), axis=0)\n    return result\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1[:, 0])\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    second_sort_indices = tf.argsort(sorted_in1[:, 1])\n    sorted_in1 = tf.gather(sorted_in1, second_sort_indices)\n    return sorted_in1\n    ",
            "def transform(in1):\n    result = tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1], axis=0, stable=True), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], direction='ASCENDING', stable=True))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([tf.gather(in1[:, 0], tf.argsort(in1[:, 1])), tf.range(7)], axis=1)[:, 0]))",
            "def transform(in1):\n    result = tf.gather(in1, tf.argsort(in1[:, 0]*1000 + in1[:, 1]))\n    return result\n    ",
            "def transform(in1):\n    return tf.argsort(tf.reverse(in1, axis=1), direction='ASCENDING')\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]*1000 + in1[:, 0]))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)\n    ",
            "def transform(in1):\n    out = tf.sort(in1, axis=0)\n    \n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "def transform(in1):\n    return tf.gather(tf.argsort(tf.argsort(in1, axis=0), axis=1), tf.argsort(in1, axis=0))\n    ",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.cast(in1[:, 0]*1000 + in1[:, 1], tf.int32)))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1, stable=True))",
            "def transform(in1):\n    return tf.gather(params=tf.gather_nd(params=in1, indices=tf.argsort(values=in1[:, :2], axis=0)), indices=tf.argsort(values=in1[:, 0], axis=0))\n    ",
            "def transform(in1):\n    \n    return tf.gather(in1, tf.argsort(in1[:, 0]*10 + in1[:, 1], stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:, 0])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]*10 + in1[:, 2], stable=True))",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(tf.transpose(in1), axis=1))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], axis=0))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0] * 1000 + in1[:, 1]))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1)))",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, stable=True)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]), axis = 0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1, stable=True)[:,0])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True), axis=0)",
            "def transform(in1):\n    temp = tf.argsort(in1[:, 1])\n    sorted_in1 = tf.gather(in1, temp)\n    return tf.gather(sorted_in1, tf.argsort(sorted_in1[:, 0]))\n    ",
            "def transform(in1):\n    return tf.argsort(in1[:, 1:], axis=0, stable=True, direction='ASCENDING') + tf.math.cumsum(tf.ones_like(in1[:, 1:]), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.argsort(in1[:, 0], axis=0) + tf.argsort(in1[:, 1], axis=0))",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.argsort(in1[:, 0], axis=0, stable=True))\n    ",
            "def transform(in1):\n    sorted_indices = tf.argsort(tf.stack([in1[:,0], in1[:,1]], axis=1), axis=0)\n    out = tf.gather(in1, sorted_indices)\n    return out\n    ",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1[:, 0])\n    sorted_in1 = tf.gather(in1, sorted_indices)\n    same_values = tf.equal(sorted_in1[:-1, 0], sorted_in1[1:, 0])\n    tied_indices = tf.argmax(tf.concat([same_values, [False]], axis=0))\n    sorted_tied_subindices = tf.argsort(sorted_in1[tied_indices:, 1])\n    final_indices = tf.concat([sorted_indices[:tied_indices], sorted_indices[tied_indices:][sorted_tied_subindices]], axis=0)\n    result = tf.gather(in1, final_indices)\n    return result\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], stable=True), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(in1[:, 1], axis=0, stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(values=in1[:, 0], axis=0, stable=True), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather_nd(in1, tf.argsort(tf.transpose(in1), axis=1))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]*10 + in1[:, 0]))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], -in1[:, 1]], axis=1), stable=True))",
            "def transform(in1):\n    return tf.gather(tf.argsort(in1, axis=0, stable=True), tf.argsort(in1[:,1], stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:, 0])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1:], axis=0) + tf.argsort(in1[:, 0:1], stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]), batch_dims=1)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(in1[:, 1] * 1000 + in1[:, 0], stable=True), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(values=in1[:, 1]*10 + in1[:, 2], axis=0))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:,0])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0]), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.reverse(in1, axis=1), axis=0), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(tf.concat([in1[:,0], in1[:,1]], axis=0), stable=True), axis=0)\n    ",
            "def transform(in1):\n    result = tf.argsort(in1[:, 1], axis=0)\n    in1_sorted = tf.gather(in1, result)\n    ",
            "def transform(in1):\n    indices = tf.argsort(in1[:, 0])\n    sorted_in1 = tf.gather(in1, indices)\n    start_idx = tf.reduce_min(tf.where(tf.not_equal(sorted_in1[1:], sorted_in1[:-1])))+1\n    sorted_in1 = tf.concat([sorted_in1[start_idx:], sorted_in1[:start_idx]], axis=0)\n    return sorted_in1\n    ",
            "def transform(in1):\n    indices = tf.argsort(in1, axis=0)\n    return tf.gather(in1, indices)\n    ",
            "def transform(in1):\n    return tf.gather(params=tf.argsort(in1, axis=0, stable=True), indices=tf.range(tf.shape(in1)[0]))\n    ",
            "def transform(in1):\n    return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, :2]))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.transpose(in1)[:, ::-1], axis=0)[:, 0])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]))",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1[:, 0])\n    in1_sorted = tf.gather(in1, sorted_indices)\n    sorted_indices_tie = tf.argsort(in1_sorted[:, 1])\n    out = tf.gather(in1_sorted, sorted_indices_tie)\n    return out\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], stable=True), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], stable=True), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.cast(in1, tf.int32)[:, 0], stable=True))",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1]), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], axis=-1, stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1:], stable=True)[:, 0])",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 1], axis=0, direction='ASCENDING'), axis=0)\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]]), axis=1)[1])\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))\n    ",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:,1], stable=True), axis=0)",
            "def transform(in1):\n    return tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\n    ",
            "def transform(in1):\n    return tf.argsort(in1, axis=0, direction='ASCENDING', stable=True)\n    "
        ],
        "tf_operators": {
            "tf.gather": 91,
            "tf.argsort": 99,
            "tf.stack": 11,
            "tf.reverse": 3,
            "tf.gather_nd": 5,
            "tf.range": 2,
            "tf.sort": 1,
            "tf.int32": 2,
            "tf.cast": 2,
            "tf.transpose": 7,
            "tf.ones_like": 1,
            "tf.math.cumsum": 1,
            "tf.argmax": 1,
            "tf.concat": 3,
            "tf.equal": 1,
            "tf.reduce_min": 1,
            "tf.where": 1,
            "tf.not_equal": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                10,
                2
            ],
            [
                1,
                0,
                0,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                10,
                2,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                0
            ],
            [
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1,
                7,
                1,
                0
            ],
            [
                0,
                1000,
                1
            ],
            [
                1
            ],
            [
                1,
                1000,
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1000,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                2,
                0,
                0,
                0
            ],
            [
                0,
                10,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                10,
                2
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                0,
                1000,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0,
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                -1,
                0,
                1,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                10,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1000,
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1
            ],
            [
                1,
                10,
                2,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                -1,
                1,
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                2
            ],
            [
                1,
                0
            ],
            [
                -1,
                0,
                0
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                -1
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            7,
            1000,
            10,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 158,
            "shape_tuple": 0,
            "input_var": 234,
            "tf_int64": 0,
            "tf_int32": 2,
            "axis": 2,
            "provided": 11,
            "tf_float32": 0,
            "shape": 1,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "return tf.one_hot(tf.argmax(in1, axis=1), 3)\n",
            "max_indices = tf.cast(tf.argmax(in1, axis=1), tf.int32)\nreturn tf.one_hot(max_indices, tf.shape(in1)[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nresult = tf.one_hot(max_indices, tf.shape(in1)[1])\nreturn result\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1]), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "max_indices = tf.expand_dims(tf.argmax(in1, axis=1), axis=-1)\nreturn tf.cast(tf.equal(tf.range(tf.shape(in1)[1]), max_indices), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=3), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\none_hot = tf.one_hot(max_indices, tf.shape(in1)[1])\nreturn tf.cast(one_hot, tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), dtype=tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), dtype=tf.int32)",
            "indices = tf.cast(tf.argmax(in1, axis=1), tf.int32)\ndepth = tf.shape(in1)[1]\nreturn tf.one_hot(indices, depth)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
            "max_indices = tf.argmax(in1, axis=1)\nresult = tf.one_hot(max_indices, in1.shape[1])\nreturn result\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "indices = tf.argmax(in1, axis=-1)\nupdates = tf.ones_like(indices)\noutput = tf.tensor_scatter_nd_update(tf.zeros_like(in1), indices, updates)\nreturn output\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nresult = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\nreturn result\n",
            "values, indices = tf.math.top_k(in1, k=1)\nreturn tf.one_hot(indices, depth=tf.shape(in1)[-1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=3)\n",
            "return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True))",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n",
            "return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True))\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "def transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(argmax_indices, in1.shape[1])\n    return one_hot\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.dtypes.int32), tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "def transform(input_tensor):\n    argmax_indices = tf.argmax(input_tensor, axis=1)\n    one_hot_output = tf.one_hot(argmax_indices, depth=input_tensor.shape[1])\n    return one_hot_output\n",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    updates = tf.one_hot(indices, tf.shape(in1)[1])\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), tf.expand_dims(indices, axis=1), updates)\n",
            "indices = tf.argmax(in1, axis=1)\none_hot = tf.one_hot(indices, tf.shape(in1)[1])\nreturn tf.cast(one_hot, tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)) * 1",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1]), in1.dtype)",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)\n",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    return result\n",
            "index_max = tf.argmax(in1, axis=1)\nresult = tf.one_hot(index_max, tf.shape(in1)[1])\nreturn result\n",
            "return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    result = tf.one_hot(idx, depth=in1.shape[1])\n    return result\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, tf.shape(in1)[1])\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=3)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "def transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(argmax_indices, tf.shape(in1)[1])\n    return result\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), dtype=tf.int32)\n",
            "max_indices = tf.expand_dims(tf.argmax(in1, axis=1), 1)\nreturn tf.cast(tf.equal(tf.range(tf.shape(in1)[1]), max_indices), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.int32), tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\nresult = tf.one_hot(max_indices, tf.shape(in1)[1])\nreturn result\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "idx = tf.argmax(in1, axis=1)\none_hot = tf.one_hot(idx, tf.shape(in1)[1])\nreturn tf.cast(one_hot, tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\none_hot_max = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\nreturn tf.cast(one_hot_max, tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, tf.shape(in1)[1])\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1))",
            "return tf.cast(tf.eye(tf.argmax(in1, axis=1) + 1, depth=in1.shape[1]), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), 3)\n    ",
            "def transform(in1):\n    max_indices = tf.cast(tf.argmax(in1, axis=1), tf.int32)\n    return tf.one_hot(max_indices, tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    max_indices = tf.expand_dims(tf.argmax(in1, axis=1), axis=-1)\n    return tf.cast(tf.equal(tf.range(tf.shape(in1)[1]), max_indices), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=3), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return tf.cast(one_hot, tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), dtype=tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), dtype=tf.int32)",
            "def transform(in1):\n    indices = tf.cast(tf.argmax(in1, axis=1), tf.int32)\n    depth = tf.shape(in1)[1]\n    return tf.one_hot(indices, depth)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, in1.shape[1])\n    return result\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=-1)\n    updates = tf.ones_like(indices)\n    output = tf.tensor_scatter_nd_update(tf.zeros_like(in1), indices, updates)\n    return output\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    return result\n    ",
            "def transform(in1):\n    values, indices = tf.math.top_k(in1, k=1)\n    return tf.one_hot(indices, depth=tf.shape(in1)[-1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=3)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True))",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True))\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(argmax_indices, in1.shape[1])\n    return one_hot\n",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.dtypes.int32), tf.int32)\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    ",
            "def transform(input_tensor):\n    argmax_indices = tf.argmax(input_tensor, axis=1)\n    one_hot_output = tf.one_hot(argmax_indices, depth=input_tensor.shape[1])\n    return one_hot_output\n",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    updates = tf.one_hot(indices, tf.shape(in1)[1])\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), tf.expand_dims(indices, axis=1), updates)\n",
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(indices, tf.shape(in1)[1])\n    return tf.cast(one_hot, tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)) * 1",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), in1.shape[1]), in1.dtype)",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    return result\n",
            "def transform(in1):\n    index_max = tf.argmax(in1, axis=1)\n    result = tf.one_hot(index_max, tf.shape(in1)[1])\n    return result\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    result = tf.one_hot(idx, depth=in1.shape[1])\n    return result\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1)), tf.int32)",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=3)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(argmax_indices, tf.shape(in1)[1])\n    return result\n",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), dtype=tf.int32)\n    ",
            "def transform(in1):\n    max_indices = tf.expand_dims(tf.argmax(in1, axis=1), 1)\n    return tf.cast(tf.equal(tf.range(tf.shape(in1)[1]), max_indices), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.int32), tf.int32)\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    result = tf.one_hot(max_indices, tf.shape(in1)[1])\n    return result\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    idx = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(idx, tf.shape(in1)[1])\n    return tf.cast(one_hot, tf.int32)\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    one_hot_max = tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    return tf.cast(one_hot_max, tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1]), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, tf.shape(in1)[1])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.expand_dims(tf.reduce_max(in1, axis=1), 1))",
            "def transform(in1):\n    return tf.cast(tf.eye(tf.argmax(in1, axis=1) + 1, depth=in1.shape[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), depth=tf.shape(in1)[1]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n    ",
            "def transform(in1):\n    max_indices = tf.argmax(in1, axis=1)\n    return tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n    "
        ],
        "tf_operators": {
            "tf.argmax": 80,
            "tf.one_hot": 77,
            "tf.shape": 47,
            "tf.int32": 48,
            "tf.cast": 49,
            "tf.range": 2,
            "tf.expand_dims": 7,
            "tf.equal": 21,
            "tf.reduce_max": 19,
            "tf.tensor_scatter_nd_update": 2,
            "tf.ones_like": 1,
            "tf.zeros_like": 2,
            "tf.math.top_k": 1,
            "tf.dtypes.int32": 1,
            "tf.eye": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 197,
            "shape_tuple": 0,
            "input_var": 185,
            "tf_int64": 0,
            "tf_int32": 49,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 5,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather(in2, tf.squeeze(in1, axis=1))\n",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather(in2, tf.squeeze(in1, axis=1))\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "out = tf.gather(in2, in1, axis=1)\nreturn out\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather(in2, in1, axis=1)\n",
            "output = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n",
            "result = tf.gather_nd(in2, in1)\nreturn result\n",
            "output = tf.gather_nd(in2, in1)\nreturn output\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather(in2, tf.squeeze(in1, axis=1), axis=1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "output = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1)\nreturn tf.gather_nd(in2, indices)\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1))\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "result = tf.gather_nd(in2, in1)\nreturn result\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1))\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, in1, batch_dims=1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather(in2, in1, axis=1)",
            "return tf.gather(in2, in1)",
            "result = tf.gather_nd(in2, in1)\nreturn result\n",
            "output = tf.gather(in2, in1, axis=1)\nreturn output\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, in1)\n",
            "indices = tf.expand_dims(in1, 2)\nreturn tf.gather_nd(in2, indices)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1))\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather(in2, in1, axis=1)\n",
            "output = tf.gather_nd(in2, in1, batch_dims=1)\nreturn output\n",
            "return tf.gather(in2, in1, axis=1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather(in2, tf.squeeze(in1, axis=1), axis=1)\n",
            "return tf.gather(in2, in1, axis=1)\n  ",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, in1)",
            "result = tf.gather_nd(in2, in1)\nreturn result\n",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.cast(tf.gather_nd(in2, in1), tf.float32)",
            "output = tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\nreturn output\n",
            "return tf.gather_nd(in2, in1)\n",
            "output = tf.gather_nd(in2, in1)\nreturn output\n",
            "return tf.gather_nd(in2, in1)",
            "output = tf.gather_nd(in2, in1)\nreturn output\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1, batch_dims=1)",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=-1))\n",
            "return tf.gather_nd(in2, in1)",
            "indices = tf.expand_dims(in1, 2)\nreturn tf.gather_nd(in2, indices)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in2)[0]), tf.squeeze(in1)], axis=1))\n",
            "return tf.gather_nd(in2, in1)\n",
            "output = tf.gather_nd(in2, in1)\nreturn output\n",
            "output = tf.gather_nd(in2, indices=in1, batch_dims=1)\nreturn output\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.squeeze(in1, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.squeeze(in1, axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    out = tf.gather(in2, in1, axis=1)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, in1, batch_dims=1)\n    return output\n    ",
            "def transform(in1, in2):\n    result = tf.gather_nd(in2, in1)\n    return result\n    ",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, in1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.squeeze(in1, axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, in1, batch_dims=1)\n    return output\n    ",
            "def transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1)\n    return tf.gather_nd(in2, indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    result = tf.gather_nd(in2, in1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1, batch_dims=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(in2, in1)",
            "def transform(in1, in2):\n    result = tf.gather_nd(in2, in1)\n    return result\n    ",
            "def transform(in1, in2):\n    output = tf.gather(in2, in1, axis=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    indices = tf.expand_dims(in1, 2)\n    return tf.gather_nd(in2, indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1, axis=1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, in1, batch_dims=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, tf.squeeze(in1, axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in2, in1, axis=1)\n      ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    result = tf.gather_nd(in2, in1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.gather_nd(in2, in1), tf.float32)",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, tf.expand_dims(in1, axis=1))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, in1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, in1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1, batch_dims=1)",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)",
            "def transform(in1, in2):\n    indices = tf.expand_dims(in1, 2)\n    return tf.gather_nd(in2, indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in1)[0]), tf.squeeze(in1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, tf.stack([tf.range(tf.shape(in2)[0]), tf.squeeze(in1)], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in2, in1)\n    ",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, in1)\n    return output\n    ",
            "def transform(in1, in2):\n    output = tf.gather_nd(in2, indices=in1, batch_dims=1)\n    return output\n    "
        ],
        "tf_operators": {
            "tf.squeeze": 16,
            "tf.range": 12,
            "tf.gather_nd": 83,
            "tf.shape": 12,
            "tf.stack": 12,
            "tf.gather": 17,
            "tf.expand_dims": 23,
            "tf.float32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                0,
                1,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                2
            ],
            [
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                0,
                -1
            ],
            [],
            [
                2
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 73,
            "shape_tuple": 0,
            "input_var": 218,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 2,
            "provided": 0,
            "tf_float32": 1,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "return tf.matmul(in2, tf.expand_dims(in1, 1))",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in1, in2, 1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "output = tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, axis=1)), axis=1)\nreturn output\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), 2)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "out = tf.matmul(tf.expand_dims(in1, axis=0), in2)\nreturn out[0]\n",
            "return tf.matmul(in1, tf.expand_dims(in2, 1))[-1]",
            "return tf.matmul(tf.expand_dims(in1, 0), in2)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "output = tf.tensordot(tf.expand_dims(in1, 0), in2, axes=1)\nreturn output[0]\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "output = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "output = tf.tensordot(in1, in2, axes=1)\nreturn output\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(tf.cast(in1, tf.float32), in2, axes=([0], [1]))",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "result = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.tensordot(in1, in2, 1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(tf.expand_dims(in1, 0), in2)\n",
            "result = tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 0)), axis=1)",
            "out = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.squeeze(tf.matmul(tf.expand_dims(in1, 1), in2), -1)\n",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.tensordot(in2, in1, 1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in2, tf.expand_dims(in1, 1))",
            "return tf.reduce_sum(tf.multiply(tf.transpose(in2), in1), axis=1)\n",
            "return tf.reduce_sum(in1 * in2, axis=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=1)\n",
            "output = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, axis=1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 0)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.tensordot(in2, in1, axes=1))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.tensordot(in1, in2, 1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.squeeze(tf.matmul(tf.expand_dims(in1, 0), in2))\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.tensordot(in1, in2, 1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(tf.repeat(tf.expand_dims(in1, 1), tf.shape(in2)[1], axis=1), in2), axis=1)",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, 1)",
            "output = tf.tensordot(in2, in1, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, 1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    output = tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, axis=1)), axis=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), 2)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, 1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    out = tf.matmul(tf.expand_dims(in1, axis=0), in2)\n    return out[0]\n    ",
            "def transform(in1, in2):\n    return tf.matmul(in1, tf.expand_dims(in2, 1))[-1]",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), in2)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    output = tf.tensordot(tf.expand_dims(in1, 0), in2, axes=1)\n    return output[0]\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    output = tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    output = tf.tensordot(in1, in2, axes=1)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in1, tf.float32), in2, axes=([0], [1]))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, 1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, 1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.matmul(tf.expand_dims(in1, 0), in2)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 0)), axis=1)",
            "def transform(in1, in2):\n    out = tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.squeeze(tf.matmul(tf.expand_dims(in1, 1), in2), -1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, 1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.matmul(in2, tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.transpose(in2), in1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, 1), in2), axis=1)\n    ",
            "def transform(in1, in2):\n    output = tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, axis=1)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 0)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.tensordot(in2, in1, axes=1))\n",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, 1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.squeeze(tf.matmul(tf.expand_dims(in1, 0), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, 1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.repeat(tf.expand_dims(in1, 1), tf.shape(in2)[1], axis=1), in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, 1)",
            "def transform(in1, in2):\n    output = tf.tensordot(in2, in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in2, tf.expand_dims(in1, 1)), axis=1)\n    "
        ],
        "tf_operators": {
            "tf.matmul": 8,
            "tf.expand_dims": 22,
            "tf.tensordot": 47,
            "tf.multiply": 44,
            "tf.reduce_sum": 45,
            "tf.float32": 1,
            "tf.cast": 1,
            "tf.squeeze": 3,
            "tf.transpose": 1,
            "tf.shape": 1,
            "tf.repeat": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                1,
                -1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 120,
            "shape_tuple": 0,
            "input_var": 201,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 1,
            "provided": 0,
            "tf_float32": 1,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), [3, 9])\n",
            "return tf.scatter_nd(tf.where(in1)[:, tf.newaxis], tf.where(in1)[:, tf.newaxis][:, 0], tf.shape(in1))\n",
            "indices = tf.where(in1)\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), [in1.shape[0], 9])\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [tf.size(in1)])\n",
            "return tf.one_hot(tf.cast(in1, tf.int32), depth=9)\n",
            "return tf.scatter_nd(tf.where(in1)[:,1:], tf.ones(tf.shape(tf.where(in1))[0]), [3, 9])\n",
            "return tf.one_hot(tf.cast(in1, tf.int32), depth=9)\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "output = tf.one_hot(in1, depth=9)\nreturn output\n",
            "indices = tf.where(in1)\nupdates = tf.ones_like(indices)\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.tensor_scatter_nd_update(tf.zeros(shape, dtype=tf.int32), indices, updates)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nreturn tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), tf.shape(in1))\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.cast(tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), tf.shape(in1)), tf.int32)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(tf.cast(in1, tf.bool))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [tf.size(in1)])\n",
            "updates = tf.ones_like(in1)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.concat([tf.shape(in1)[0:1], [9]], axis=0), tf.int64), \n                                       tf.reshape(in1, [-1, 1]), updates)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones_like(tf.boolean_mask(in1, tf.not_equal(in1, 0)))\nreturn tf.scatter_nd(indices, updates, tf.shape(in1))\n",
            "def transform(in1):\n    return tf.one_hot(tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "return tf.one_hot(tf.boolean_mask(tf.reshape(in1, [-1]), tf.cast(tf.math.not_equal(tf.reshape(in1, [-1]), 0), tf.bool)), depth=9)\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nshape = tf.shape(in1, out_type=tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros(shape, dtype=tf.int32), indices, updates)\n",
            "return tf.sparse.to_dense(tf.sparse.SparseTensor(tf.cast(in1, tf.int64, 1), tf.ones_like(in1), tf.shape(in1)))\n",
            "indices = tf.where(tf.cast(in1, tf.bool))\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0], tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.cast(tf.reduce_max(in1) + 1, tf.int32), tf.int32), indices, updates)\n",
            "output = tf.one_hot(in1, depth=9)\nreturn output\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), (3, 9))\n",
            "indices = tf.where(tf.equal(in1, 1))\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(in1)\nupdates = tf.ones_like(indices[:, 0])\nshape = tf.cast(tf.reduce_max(indices, axis=0) + 1, tf.int32)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "return tf.scatter_nd(tf.where(tf.equal(in1, 1)), tf.ones_like(tf.where(tf.equal(in1, 1)))[:, 0], [3, 9])\n",
            "return tf.scatter_nd(in1, tf.ones_like(in1), [3, 9])\n",
            "return tf.scatter_nd(tf.reshape(in1, [-1, 1]), tf.ones_like(tf.reshape(in1, [-1, 1])), [3, 9])",
            "return tf.one_hot(in1, 6)\n",
            "indices = tf.cast(in1, tf.int32)\nshape = tf.shape(in1) * tf.constant([1, 2], tf.int32)\nreturn tf.scatter_nd(indices, tf.ones_like(in1), shape)\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), [3, 9])\n",
            "return tf.scatter_nd(indices=in1, updates=tf.ones_like(in1), shape=(3, 9))\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.fill(tf.shape(indices)[0], 1)\nreturn tf.scatter_nd(indices, updates, tf.shape(in1))\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.reduce_max(in1) + 1), indices, updates)\n",
            "indices = tf.cast(tf.where(in1)[:, 1], tf.int64)\nupdates = tf.ones_like(indices, dtype=tf.int64)\nshape = tf.cast(tf.reduce_max(in1) + 1, tf.int64)\nreturn tf.scatter_nd(tf.expand_dims(indices, axis=1), updates, [tf.shape(in1)[0], shape])\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=2)\n  ",
            "output = tf.one_hot(in1, tf.reduce_max(in1) + 1)\nreturn output\n",
            "updates = tf.ones_like(in1)\nreturn tf.scatter_nd(in1, updates, [3, 9])\n  ",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), tf.reduce_max(in1)+1)",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), [3, 9])\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.constant([3, 9], dtype=tf.int32)), indices, updates)\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int64), tf.constant([3, 3]))\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 9], dtype=tf.int32), [[0, 1], [0, 3], [0, 5], [1, 0], [1, 2], [1, 3], [1, 4], [2, 1], [2, 5], [2, 8]], tf.ones(9, dtype=tf.int32))\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), [3, 9])\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.cast(tf.where(in1)[:, 1], tf.int64)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape=(tf.shape(in1)[1],))\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "updates = tf.ones_like(in1)\nindices = tf.where(in1)\nshape = tf.constant([in1.shape[0], in1.shape[1] + 1], dtype=tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.where(in1)\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), tf.constant([3, 3], dtype=tf.int32))\n",
            "indices = tf.cast(tf.where(tf.equal(in1, 1)), tf.int64)\nupdates = tf.ones_like(indices[:, 0], dtype=tf.int64)\nreturn tf.scatter_nd(indices, updates, tf.shape(in1))\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1) + 1)",
            "return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1)+1)\n",
            "indices = tf.cast(tf.where(tf.not_equal(in1, 0)), tf.int32)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.tensor_scatter_nd_update(tf.zeros([tf.shape(in1)[0], 9], dtype=tf.int32), indices, updates)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "return tf.one_hot(in1, 6)\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, [in1.shape[0], 9])\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1)+1)\n",
            "indices = tf.where(in1)\nupdates = tf.ones_like(indices[:, 0])\nreturn tf.scatter_nd(indices, updates, (3, 9))\n",
            "indices = tf.cast(in1, tf.int32)\nupdates = tf.ones_like(in1)\nshape = tf.constant([tf.shape(in1)[0], 9], dtype=tf.int32)\nreturn tf.scatter_nd(indices, updates, shape)\n  ",
            "return tf.tensor_scatter_nd_update(tf.zeros([in1.shape[0], 9], dtype=tf.int32), indices=in1, updates=tf.ones(in1.shape[0]))",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), shape=[in1.shape[0], 9])\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "updates = tf.ones_like(in1)\nindices = tf.transpose(tf.stack([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in1], axis=0))\nshape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.where(tf.equal(in1, 0))\nupdates = tf.ones_like(tf.reshape(in1, [-1]))\nshape = tf.shape(in1, out_type=tf.int64) * tf.constant([1, 0]) + tf.constant([0, 1])\nreturn tf.cast(tf.scatter_nd(indices, updates, shape), tf.int32)\n",
            "updates = tf.ones_like(in1)\nindices = tf.where(tf.equal(in1, 1))\nshape = tf.cast(tf.fill([tf.shape(in1)[0]], 9), tf.int64)\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "indices = tf.where(tf.equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "indices = tf.cast(tf.where(in1)[:, 1:], tf.int32)\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.constant([tf.size(in1, out_type=tf.int64)], dtype=tf.int32))\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "return tf.sparse_to_dense(in1, [3, 9], 1)\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "indices = tf.where(in1)\nshape = tf.shape(in1, out_type=tf.dtypes.int64)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.constant([tf.reduce_prod(shape)]), dtype=tf.dtypes.int64), indices, tf.ones(tf.shape(indices)[0], dtype=tf.dtypes.int64))\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [3, 9])\n",
            "indices = tf.where(in1)\nshape = tf.shape(in1, out_type=tf.dtypes.int64)\nreturn tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), shape)\n",
            "indices = tf.cast(tf.where(in1), tf.int64)\nindices = tf.transpose(indices)\nupdates = tf.ones(tf.shape(tf.squeeze(indices)))\nshape = tf.cast(tf.reduce_max(in1) + 1, tf.int64)\nreturn tf.scatter_nd(indices, updates, shape=[tf.shape(in1)[0], shape])\n",
            "output = tf.one_hot(in1, depth=9)\nreturn output\n",
            "return tf.one_hot(tf.cast(tf.cast(in1, tf.int64), tf.int32), depth=9)\n",
            "return tf.scatter_nd(tf.expand_dims(tf.where(tf.equal(in1, 1)), 1), tf.ones_like(tf.where(tf.equal(in1, 1), tf.int32), in1.shape), in1.shape)",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    output = tf.tensor_scatter_nd_update(tf.zeros(tf.reduce_prod(tf.shape(in1))), indices, tf.ones(tf.shape(indices)[0]))\n    return tf.reshape(output, tf.shape(in1) * 2)\n",
            "return tf.where(in1, tf.ones_like(in1), tf.zeros_like(in1))",
            "indices = tf.where(in1 > 0)\nupdates = tf.ones_like(indices[:, 0])\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "indices = tf.where(in1)\nupdates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\nshape = tf.constant([in1.shape[0], in1.shape[1]+1])\nreturn tf.scatter_nd(indices, updates, shape)\n",
            "return tf.where(in1, tf.ones_like(in1), tf.zeros_like(in1))",
            "indices = tf.cast(tf.where(in1)[:, 1:], tf.int64)\nupdates = tf.ones_like(tf.reshape(indices[:, 0], (-1, 1)))\nreturn tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), tf.reduce_max(in1) + 1)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, tf.cast(tf.shape(in1), tf.int32))\n",
            "indices = tf.where(in1)\nshape = tf.shape(in1, out_type=tf.int64)\nreturn tf.cast(tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), shape), tf.int32)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), [3, 9])\n",
            "return tf.one_hot(tf.cast(tf.reshape(in1, [-1]), tf.int32), depth=9)\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), depth=9)\n",
            "indices = tf.where(tf.not_equal(in1, 0))\nupdates = tf.cast(tf.ones_like(indices[:, 0]), in1.dtype)\nreturn tf.tensor_scatter_nd_update(tf.zeros(tf.cast(tf.reduce_prod(tf.shape(in1)), tf.int64), dtype=in1.dtype), indices, updates)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), [3, 9])\n    ",
            "def transform(in1):\n    return tf.scatter_nd(tf.where(in1)[:, tf.newaxis], tf.where(in1)[:, tf.newaxis][:, 0], tf.shape(in1))\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), [in1.shape[0], 9])\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, [tf.size(in1)])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.cast(in1, tf.int32), depth=9)\n    ",
            "def transform(in1):\n    return tf.scatter_nd(tf.where(in1)[:,1:], tf.ones(tf.shape(tf.where(in1))[0]), [3, 9])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.cast(in1, tf.int32), depth=9)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    output = tf.one_hot(in1, depth=9)\n    return output\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones_like(indices)\n    shape = tf.shape(in1, out_type=tf.int64)\n    return tf.tensor_scatter_nd_update(tf.zeros(shape, dtype=tf.int32), indices, updates)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    return tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), tf.shape(in1))\n    ",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.cast(tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), tf.shape(in1)), tf.int32)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0])\n    shape = tf.shape(in1, out_type=tf.int64)\n    return tf.scatter_nd(indices, updates, shape)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, [3, 9])\n    ",
            "def transform(in1):\n    indices = tf.where(tf.cast(in1, tf.bool))\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, [tf.size(in1)])\n    ",
            "def transform(in1):\n                                       updates = tf.ones_like(in1)\n                                       return tf.tensor_scatter_nd_update(tf.zeros(tf.concat([tf.shape(in1)[0:1], [9]], axis=0), tf.int64), \n                                                                              tf.reshape(in1, [-1, 1]), updates)\n                                       ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones_like(tf.boolean_mask(in1, tf.not_equal(in1, 0)))\n    return tf.scatter_nd(indices, updates, tf.shape(in1))\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "def transform(in1):\n    return tf.one_hot(tf.boolean_mask(tf.reshape(in1, [-1]), tf.cast(tf.math.not_equal(tf.reshape(in1, [-1]), 0), tf.bool)), depth=9)\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0])\n    shape = tf.shape(in1, out_type=tf.int32)\n    return tf.tensor_scatter_nd_update(tf.zeros(shape, dtype=tf.int32), indices, updates)\n    ",
            "def transform(in1):\n    return tf.sparse.to_dense(tf.sparse.SparseTensor(tf.cast(in1, tf.int64, 1), tf.ones_like(in1), tf.shape(in1)))\n    ",
            "def transform(in1):\n    indices = tf.where(tf.cast(in1, tf.bool))\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    return tf.scatter_nd(indices, updates, [3, 9])\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0], tf.int32)\n    return tf.tensor_scatter_nd_update(tf.zeros(tf.cast(tf.reduce_max(in1) + 1, tf.int32), tf.int32), indices, updates)\n    ",
            "def transform(in1):\n    output = tf.one_hot(in1, depth=9)\n    return output\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), (3, 9))\n    ",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    return tf.scatter_nd(indices, updates, [3, 9])\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones_like(indices[:, 0])\n    shape = tf.cast(tf.reduce_max(indices, axis=0) + 1, tf.int32)\n    return tf.scatter_nd(indices, updates, shape)\n    ",
            "def transform(in1):\n    return tf.scatter_nd(tf.where(tf.equal(in1, 1)), tf.ones_like(tf.where(tf.equal(in1, 1)))[:, 0], [3, 9])\n    ",
            "def transform(in1):\n    return tf.scatter_nd(in1, tf.ones_like(in1), [3, 9])\n    ",
            "def transform(in1):\n    return tf.scatter_nd(tf.reshape(in1, [-1, 1]), tf.ones_like(tf.reshape(in1, [-1, 1])), [3, 9])",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    indices = tf.cast(in1, tf.int32)\n    shape = tf.shape(in1) * tf.constant([1, 2], tf.int32)\n    return tf.scatter_nd(indices, tf.ones_like(in1), shape)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), [3, 9])\n    ",
            "def transform(in1):\n    return tf.scatter_nd(indices=in1, updates=tf.ones_like(in1), shape=(3, 9))\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.fill(tf.shape(indices)[0], 1)\n    return tf.scatter_nd(indices, updates, tf.shape(in1))\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.tensor_scatter_nd_update(tf.zeros(tf.reduce_max(in1) + 1), indices, updates)\n    ",
            "def transform(in1):\n    indices = tf.cast(tf.where(in1)[:, 1], tf.int64)\n    updates = tf.ones_like(indices, dtype=tf.int64)\n    shape = tf.cast(tf.reduce_max(in1) + 1, tf.int64)\n    return tf.scatter_nd(tf.expand_dims(indices, axis=1), updates, [tf.shape(in1)[0], shape])\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=2)\n  ",
            "def transform(in1):\n    output = tf.one_hot(in1, tf.reduce_max(in1) + 1)\n    return output\n    ",
            "def transform(in1):\n    updates = tf.ones_like(in1)\n    return tf.scatter_nd(in1, updates, [3, 9])\n      ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.reshape(in1, [-1]), tf.reduce_max(in1)+1)",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), [3, 9])\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    return tf.tensor_scatter_nd_update(tf.zeros(tf.constant([3, 9], dtype=tf.int32)), indices, updates)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int64), tf.constant([3, 3]))\n    ",
            "def transform(in1):\n    return tf.tensor_scatter_nd_update(tf.zeros([3, 9], dtype=tf.int32), [[0, 1], [0, 3], [0, 5], [1, 0], [1, 2], [1, 3], [1, 4], [2, 1], [2, 5], [2, 8]], tf.ones(9, dtype=tf.int32))\n    ",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), [3, 9])\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0])\n    shape = tf.shape(in1, out_type=tf.int64)\n    return tf.scatter_nd(indices, updates, shape)\n    ",
            "def transform(in1):\n    indices = tf.cast(tf.where(in1)[:, 1], tf.int64)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int64)\n    return tf.scatter_nd(indices, updates, shape=(tf.shape(in1)[1],))\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "def transform(in1):\n    updates = tf.ones_like(in1)\n    indices = tf.where(in1)\n    shape = tf.constant([in1.shape[0], in1.shape[1] + 1], dtype=tf.int64)\n    return tf.scatter_nd(indices, updates, shape)\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), tf.constant([3, 3], dtype=tf.int32))\n    ",
            "def transform(in1):\n    indices = tf.cast(tf.where(tf.equal(in1, 1)), tf.int64)\n    updates = tf.ones_like(indices[:, 0], dtype=tf.int64)\n    return tf.scatter_nd(indices, updates, tf.shape(in1))\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1) + 1)",
            "def transform(in1):\n    return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1)+1)\n    ",
            "def transform(in1):\n    indices = tf.cast(tf.where(tf.not_equal(in1, 0)), tf.int32)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    return tf.tensor_scatter_nd_update(tf.zeros([tf.shape(in1)[0], 9], dtype=tf.int32), indices, updates)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    return tf.scatter_nd(indices, updates, [in1.shape[0], 9])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1)+1)\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones_like(indices[:, 0])\n    return tf.scatter_nd(indices, updates, (3, 9))\n    ",
            "def transform(in1):\n    indices = tf.cast(in1, tf.int32)\n    updates = tf.ones_like(in1)\n    shape = tf.constant([tf.shape(in1)[0], 9], dtype=tf.int32)\n    return tf.scatter_nd(indices, updates, shape)\n      ",
            "def transform(in1):\n    return tf.tensor_scatter_nd_update(tf.zeros([in1.shape[0], 9], dtype=tf.int32), indices=in1, updates=tf.ones(in1.shape[0]))",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), shape=[in1.shape[0], 9])\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    updates = tf.ones_like(in1)\n    indices = tf.transpose(tf.stack([tf.range(tf.shape(in1)[0])[:, tf.newaxis], in1], axis=0))\n    shape = [tf.shape(in1)[0], tf.reduce_max(in1) + 1]\n    return tf.scatter_nd(indices, updates, shape)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 0))\n    updates = tf.ones_like(tf.reshape(in1, [-1]))\n    shape = tf.shape(in1, out_type=tf.int64) * tf.constant([1, 0]) + tf.constant([0, 1])\n    return tf.cast(tf.scatter_nd(indices, updates, shape), tf.int32)\n    ",
            "def transform(in1):\n    updates = tf.ones_like(in1)\n    indices = tf.where(tf.equal(in1, 1))\n    shape = tf.cast(tf.fill([tf.shape(in1)[0]], 9), tf.int64)\n    return tf.scatter_nd(indices, updates, shape)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    indices = tf.cast(tf.where(in1)[:, 1:], tf.int32)\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, tf.constant([tf.size(in1, out_type=tf.int64)], dtype=tf.int32))\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "def transform(in1):\n    return tf.sparse_to_dense(in1, [3, 9], 1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    indices = tf.where(in1)\n    shape = tf.shape(in1, out_type=tf.dtypes.int64)\n    return tf.tensor_scatter_nd_update(tf.zeros(tf.constant([tf.reduce_prod(shape)]), dtype=tf.dtypes.int64), indices, tf.ones(tf.shape(indices)[0], dtype=tf.dtypes.int64))\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, [3, 9])\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, [3, 9])\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    shape = tf.shape(in1, out_type=tf.dtypes.int64)\n    return tf.scatter_nd(indices, tf.ones(tf.shape(indices)[0]), shape)\n    ",
            "def transform(in1):\n    indices = tf.cast(tf.where(in1), tf.int64)\n    indices = tf.transpose(indices)\n    updates = tf.ones(tf.shape(tf.squeeze(indices)))\n    shape = tf.cast(tf.reduce_max(in1) + 1, tf.int64)\n    return tf.scatter_nd(indices, updates, shape=[tf.shape(in1)[0], shape])\n    ",
            "def transform(in1):\n    output = tf.one_hot(in1, depth=9)\n    return output\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.cast(tf.cast(in1, tf.int64), tf.int32), depth=9)\n    ",
            "def transform(in1):\n    return tf.scatter_nd(tf.expand_dims(tf.where(tf.equal(in1, 1)), 1), tf.ones_like(tf.where(tf.equal(in1, 1), tf.int32), in1.shape), in1.shape)",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    output = tf.tensor_scatter_nd_update(tf.zeros(tf.reduce_prod(tf.shape(in1))), indices, tf.ones(tf.shape(indices)[0]))\n    return tf.reshape(output, tf.shape(in1) * 2)\n",
            "def transform(in1):\n    return tf.where(in1, tf.ones_like(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    indices = tf.where(in1 > 0)\n    updates = tf.ones_like(indices[:, 0])\n    return tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    updates = tf.ones(tf.shape(indices)[0], dtype=tf.int32)\n    shape = tf.constant([in1.shape[0], in1.shape[1]+1])\n    return tf.scatter_nd(indices, updates, shape)\n    ",
            "def transform(in1):\n    return tf.where(in1, tf.ones_like(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    indices = tf.cast(tf.where(in1)[:, 1:], tf.int64)\n    updates = tf.ones_like(tf.reshape(indices[:, 0], (-1, 1)))\n    return tf.scatter_nd(indices, updates, tf.constant([3, 9]))\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.reshape(in1, [-1]), tf.reduce_max(in1) + 1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.ones(tf.shape(indices)[0])\n    return tf.scatter_nd(indices, updates, tf.cast(tf.shape(in1), tf.int32))\n    ",
            "def transform(in1):\n    indices = tf.where(in1)\n    shape = tf.shape(in1, out_type=tf.int64)\n    return tf.cast(tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), shape), tf.int32)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    return tf.scatter_nd(indices, tf.ones_like(indices[:, 0], dtype=tf.int32), [3, 9])\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.cast(tf.reshape(in1, [-1]), tf.int32), depth=9)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.reshape(in1, [-1]), depth=9)\n    ",
            "def transform(in1):\n    indices = tf.where(tf.not_equal(in1, 0))\n    updates = tf.cast(tf.ones_like(indices[:, 0]), in1.dtype)\n    return tf.tensor_scatter_nd_update(tf.zeros(tf.cast(tf.reduce_prod(tf.shape(in1)), tf.int64), dtype=in1.dtype), indices, updates)\n    "
        ],
        "tf_operators": {
            "tf.ones_like": 34,
            "tf.equal": 16,
            "tf.where": 59,
            "tf.scatter_nd": 55,
            "tf.shape": 47,
            "tf.newaxis": 2,
            "tf.ones": 34,
            "tf.size": 3,
            "tf.not_equal": 13,
            "tf.one_hot": 29,
            "tf.int32": 28,
            "tf.cast": 26,
            "tf.tensor_scatter_nd_update": 12,
            "tf.zeros": 12,
            "tf.int64": 18,
            "tf.bool": 3,
            "tf.reshape": 13,
            "tf.concat": 1,
            "tf.boolean_mask": 2,
            "tf.reduce_max": 13,
            "tf.math.not_equal": 1,
            "tf.sparse.SparseTensor": 1,
            "tf.sparse.to_dense": 1,
            "tf.constant": 16,
            "tf.fill": 2,
            "tf.expand_dims": 2,
            "tf.transpose": 2,
            "tf.range": 1,
            "tf.stack": 1,
            "tf.sparse_to_dense": 1,
            "tf.dtypes.int64": 2,
            "tf.reduce_prod": 3,
            "tf.squeeze": 1,
            "tf.zeros_like": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                0,
                3,
                9
            ],
            [
                0
            ],
            [
                0,
                0,
                9
            ],
            [
                0,
                0
            ],
            [
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                9
            ],
            [
                6
            ],
            [
                9
            ],
            [],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                0
            ],
            [
                0,
                1,
                9,
                0,
                -1,
                1
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                9
            ],
            [
                -1,
                -1,
                0,
                9
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0,
                3,
                9
            ],
            [
                0,
                0,
                1
            ],
            [
                9
            ],
            [
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                1,
                0,
                3,
                9
            ],
            [
                3,
                9
            ],
            [
                -1,
                1,
                -1,
                1,
                3,
                9
            ],
            [
                6
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                3,
                9
            ],
            [
                0,
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1,
                1,
                0
            ],
            [
                2
            ],
            [
                1
            ],
            [
                3,
                9
            ],
            [
                0,
                3,
                9
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                -1,
                1
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                0,
                3,
                9
            ],
            [
                1,
                0,
                3,
                3
            ],
            [
                3,
                9,
                0,
                1,
                0,
                3,
                0,
                5,
                1,
                0,
                1,
                2,
                1,
                3,
                1,
                4,
                2,
                1,
                2,
                5,
                2,
                8,
                9
            ],
            [
                1,
                0,
                3,
                9
            ],
            [
                9
            ],
            [
                0
            ],
            [
                1,
                0,
                1
            ],
            [
                9
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                3,
                3
            ],
            [
                1,
                0
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                0,
                0,
                0,
                9
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                6
            ],
            [
                0,
                0,
                9
            ],
            [
                -1,
                1
            ],
            [
                0,
                3,
                9
            ],
            [
                0,
                9
            ],
            [
                0,
                9,
                0
            ],
            [
                1,
                0,
                0,
                9
            ],
            [
                6
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                -1,
                1,
                0,
                0,
                1
            ],
            [
                1,
                0,
                9
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                6
            ],
            [
                1,
                0
            ],
            [
                9
            ],
            [
                3,
                9,
                1
            ],
            [
                6
            ],
            [
                0
            ],
            [
                0,
                3,
                9
            ],
            [
                0,
                3,
                9
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                9
            ],
            [
                9
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                0,
                2
            ],
            [],
            [
                0,
                0,
                3,
                9
            ],
            [
                0,
                0,
                1,
                1
            ],
            [],
            [
                1,
                0,
                -1,
                1,
                3,
                9
            ],
            [
                -1,
                1
            ],
            [
                9
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                0,
                0,
                3,
                9
            ],
            [
                -1,
                9
            ],
            [
                -1,
                9
            ],
            [
                0,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 3,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 10,
                "axis": 4,
                "shape": 3,
                "provided": 6,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 2,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 9,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 10,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 143,
            "shape_tuple": 3,
            "input_var": 412,
            "tf_int64": 23,
            "tf_int32": 40,
            "axis": 7,
            "provided": 58,
            "tf_float32": 0,
            "shape": 30,
            "tf_bool": 3
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, tf.constant(0.0)), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-9, 1e9)))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-12, 1e12)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1e-12)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1.0)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-20, 1e20)))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1.0)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.where(tf.equal(in2, 0), tf.ones_like(in2), in2)))",
            "return tf.divide(in1, tf.where(tf.equal(in2, 0), in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.divide_no_nan(1.0, in2)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.maximum(in2, 1e-12)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0.0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\nreturn result\n",
            "return tf.divide_no_nan(in1, tf.where(tf.equal(in2, tf.constant(0.)), in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)\n",
            "return tf.divide_no_nan(in1, in2)",
            "return tf.where(tf.not_equal(in2, 0), tf.divide(in1, in2), in1)",
            "return tf.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-12, 1e12)))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.maximum(tf.abs(in2), tf.constant(1e-12))))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.abs(in2)))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, -1e-10, 1e10)))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, tf.constant(1e-10), tf.constant(1e10))))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-12, 1e12)))",
            "return tf.math.divide_no_nan(in1, tf.where(tf.equal(in2, 0), in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "out = tf.divide_no_nan(in1, in2)\nreturn tf.where(tf.equal(in2, 0), in1, out)\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, tf.where(tf.equal(in2, 0), in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0.0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-15, 1e15)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\nreturn result\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\nreturn result\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, tf.constant(0.0)), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.reciprocal_no_nan(in2)))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.divide_no_nan(in2, tf.ones_like(in2))))",
            "return tf.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, tf.constant(0.0)), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-9, 1e9)))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-12, 1e12)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1e-12)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1.0)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-20, 1e20)))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.maximum(in2, 1.0)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.where(tf.equal(in2, 0), tf.ones_like(in2), in2)))",
            "def transform(in1, in2):\n    return tf.divide(in1, tf.where(tf.equal(in2, 0), in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.divide_no_nan(1.0, in2)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.maximum(in2, 1e-12)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0.0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.divide_no_nan(in1, tf.where(tf.equal(in2, tf.constant(0.)), in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.not_equal(in2, 0), tf.divide(in1, in2), in1)",
            "def transform(in1, in2):\n    return tf.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-12, 1e12)))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.maximum(tf.abs(in2), tf.constant(1e-12))))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.abs(in2)))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, -1e-10, 1e10)))\n    ",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, tf.constant(1e-10), tf.constant(1e10))))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-12, 1e12)))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, tf.where(tf.equal(in2, 0), in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    out = tf.divide_no_nan(in1, in2)\n    return tf.where(tf.equal(in2, 0), in1, out)\n    ",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, tf.where(tf.equal(in2, 0), in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0.0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.clip_by_value(in2, 1e-15, 1e15)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    result = tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, tf.constant(0.0)), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.reciprocal_no_nan(in2)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, tf.math.divide_no_nan(in2, tf.ones_like(in2))))",
            "def transform(in1, in2):\n    return tf.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)",
            "def transform(in1, in2):\n    return tf.math.divide_no_nan(in1, in2)"
        ],
        "tf_operators": {
            "tf.math.divide_no_nan": 35,
            "tf.divide": 62,
            "tf.equal": 65,
            "tf.where": 66,
            "tf.constant": 5,
            "tf.clip_by_value": 8,
            "tf.maximum": 3,
            "tf.ones_like": 2,
            "tf.math.maximum": 2,
            "tf.divide_no_nan": 5,
            "tf.not_equal": 1,
            "tf.abs": 2,
            "tf.math.reciprocal_no_nan": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0,
                -1e-10
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            -1e-10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 62,
            "shape_tuple": 0,
            "input_var": 335,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "return tf.tile(tf.eye(in1), multiples=in2)\n",
            "return tf.broadcast_to(tf.eye(in1), [in2, in1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n  ",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.reshape(tf.tile(tf.eye(in1), [1, in2]), [-1, in1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "result = tf.tile(tf.eye(in1), [in2, 1])\nreturn result\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.repeat(tf.eye(in1), in2, axis=0)\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, num_columns=3), multiples=[in2])",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), multiples=[in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "return tf.stack([tf.tile(tf.eye(in1), [in2, 1])])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.repeat(tf.eye(in1), in2, axis=0)\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.broadcast_to(tf.eye(in1), [in2, in1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.broadcast_to(tf.eye(in1), [in2, in1])\n",
            "return tf.repeat(tf.eye(in1, dtype=tf.float32), in2, axis=0)\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float64), [in2, 1])\n",
            "return tf.repeat(tf.eye(in1), in2, axis=0)",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.broadcast_to(tf.eye(in1, dtype=tf.float32), [in2, in1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.repeat(tf.eye(in1), in2, axis=0)",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.repeat(tf.eye(in1), in2)\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2])",
            "return tf.stack([tf.tile(tf.eye(in1), [in2, 1])], axis=0)\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "res = tf.tile(tf.eye(in1), [in2, 1])\nreturn res\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), multiples=in2)\n    ",
            "def transform(in1, in2):\n    return tf.broadcast_to(tf.eye(in1), [in2, in1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n      ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.reshape(tf.tile(tf.eye(in1), [1, in2]), [-1, in1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    result = tf.tile(tf.eye(in1), [in2, 1])\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, num_columns=3), multiples=[in2])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), multiples=[in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "def transform(in1, in2):\n    return tf.stack([tf.tile(tf.eye(in1), [in2, 1])])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.repeat(tf.eye(in1), in2, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.broadcast_to(tf.eye(in1), [in2, in1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.broadcast_to(tf.eye(in1), [in2, in1])\n",
            "def transform(in1, in2):\n    return tf.repeat(tf.eye(in1, dtype=tf.float32), in2, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float64), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.repeat(tf.eye(in1), in2, axis=0)",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.broadcast_to(tf.eye(in1, dtype=tf.float32), [in2, in1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.repeat(tf.eye(in1), in2, axis=0)",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.repeat(tf.eye(in1), in2)\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2])",
            "def transform(in1, in2):\n    return tf.stack([tf.tile(tf.eye(in1), [in2, 1])], axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1, dtype=tf.float32), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    res = tf.tile(tf.eye(in1), [in2, 1])\n    return res\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n    "
        ],
        "tf_operators": {
            "tf.eye": 100,
            "tf.tile": 90,
            "tf.broadcast_to": 4,
            "tf.float32": 14,
            "tf.reshape": 1,
            "tf.repeat": 6,
            "tf.stack": 2,
            "tf.float64": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                3
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 91,
            "shape_tuple": 0,
            "input_var": 205,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 1,
            "tf_float32": 14,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "return tf.reduce_sum(in1, axis=[1, 2])\n   ",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "output = tf.reduce_sum(in1, axis=(1, 2))\nreturn output\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1,2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "\nreturn tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, [1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "\nreturn tf.reduce_sum(in1, axis=[1,2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1,2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1,2])\n",
            "result = tf.reduce_sum(input_tensor=in1, axis=[1, 2])\nreturn result\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1,2])",
            "return tf.reduce_sum(in1, axis=(1, 2))\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(tf.reduce_sum(in1, axis=2), axis=1)",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1,2])",
            "return tf.reduce_sum(in1, axis=(1, 2))",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1,2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "result = tf.reduce_sum(input_tensor=in1, axis=[1, 2])\nreturn result\n",
            "result = tf.reduce_sum(in1, axis=(1, 2))\nreturn result\n",
            "return tf.reduce_sum(in1, axis=(1, 2))\n",
            "result = tf.reduce_sum(in1, axis=[1, 2])\nreturn result\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "def transform(input_tensor):\n    return tf.reduce_sum(input_tensor, axis=(1, 2))\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n       ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    output = tf.reduce_sum(in1, axis=(1, 2))\n    return output\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1,2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    \n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, [1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    \n    return tf.reduce_sum(in1, axis=[1,2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1,2])\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1,2])\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(input_tensor=in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[0, 1])\n",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1,2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=(1, 2))\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reduce_sum(in1, axis=2), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1,2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=(1, 2))",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1,2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(input_tensor=in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=(1, 2))\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=(1, 2))\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(in1, axis=[1, 2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])",
            "def transform(in1):\n    return tf.reduce_sum(in1, axis=[1, 2])\n    ",
            "def transform(input_tensor):\n    return tf.reduce_sum(input_tensor, axis=(1, 2))\n"
        ],
        "tf_operators": {
            "tf.reduce_sum": 100
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                0,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                2,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 95,
            "shape_tuple": 0,
            "input_var": 100,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 93,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "return tf.cast(tf.sparse.to_dense(tf.sparse.SparseTensor(tf.expand_dims(in1, 1), [1] * tf.size(in1), [in2])), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)",
            "return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, -1)), tf.ones_like(tf.range(in2)), tf.zeros_like(tf.range(in2)))",
            "return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n",
            "out = tf.one_hot(in1, in2)\nreturn out\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.int32)",
            "return tf.sequence_mask(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)\n",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)\n",
            "return tf.equal(tf.range(in2), tf.expand_dims(in1, 1))\n",
            "return tf.one_hot(in1, in2)\n",
            "result = tf.one_hot(indices=in1, depth=in2)\nreturn result\n",
            "return tf.sequence_mask(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(indices=in1, maxlen=in2)",
            "return tf.one_hot(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n",
            "return tf.one_hot(in1, in2, dtype=tf.int32)\n",
            "return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "return tf.one_hot(in1, in2)",
            "return tf.cast(tf.one_hot(in1, in2, on_value=1, off_value=0), tf.int32)",
            "return tf.one_hot(in1, in2)",
            "return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.ones(in2), tf.zeros(in2))",
            "return tf.where(tf.equal(tf.range(in2), in1), tf.ones(in2), tf.zeros(in2))",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, axis=1)), 1, 0)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "return tf.one_hot(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)\n  ",
            "return tf.cast(tf.one_hot(in1, in2), tf.int32)",
            "return tf.equal(tf.range(in2), in1)\n",
            "return tf.one_hot(indices=in1, depth=in2)",
            "return tf.sequence_mask(in1, in2)",
            "result = tf.one_hot(indices=in1, depth=in2)\nreturn result\n",
            "return tf.cast(tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0), tf.int32)",
            "return tf.one_hot(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)\n",
            "return tf.one_hot(in1, in2)",
            "return tf.one_hot(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1, dtype=tf.int32), [in2])",
            "return tf.cast(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.cast(tf.sequence_mask(in1, in2), dtype=tf.int32)",
            "return tf.one_hot(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.cast(tf.sequence_mask(in1, in2, dtype=tf.bool), tf.int32)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.equal(tf.range(in2), tf.expand_dims(in1, 1))",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(in1, in2)",
            "return tf.reduce_max(in1)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "return tf.math.equal(tf.range(in2), tf.expand_dims(in1, axis=1))",
            "return tf.one_hot(in1, in2)",
            "return tf.sequence_mask(in1, in2)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.cast(tf.sparse.to_dense(tf.sparse.SparseTensor(tf.expand_dims(in1, 1), [1] * tf.size(in1), [in2])), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, -1)), tf.ones_like(tf.range(in2)), tf.zeros_like(tf.range(in2)))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n    ",
            "def transform(in1, in2):\n    out = tf.one_hot(in1, in2)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.equal(tf.range(in2), tf.expand_dims(in1, 1))\n    ",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n    ",
            "def transform(in1, in2):\n    result = tf.one_hot(indices=in1, depth=in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(indices=in1, maxlen=in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0)\n",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2, dtype=tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2, on_value=1, off_value=0), tf.int32)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.ones(in2), tf.zeros(in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), in1), tf.ones(in2), tf.zeros(in2))",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, axis=1)), 1, 0)\n",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)\n      ",
            "def transform(in1, in2):\n    return tf.cast(tf.one_hot(in1, in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.equal(tf.range(in2), in1)\n    ",
            "def transform(in1, in2):\n    return tf.one_hot(indices=in1, depth=in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    result = tf.one_hot(indices=in1, depth=in2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), 1, 0), tf.int32)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.scatter_nd(tf.expand_dims(in1, 1), tf.ones_like(in1, dtype=tf.int32), [in2])",
            "def transform(in1, in2):\n    return tf.cast(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2), dtype=tf.int32)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.cast(tf.sequence_mask(in1, in2, dtype=tf.bool), tf.int32)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.equal(tf.range(in2), tf.expand_dims(in1, 1))",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.reduce_max(in1)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.math.equal(tf.range(in2), tf.expand_dims(in1, axis=1))",
            "def transform(in1, in2):\n    return tf.one_hot(in1, in2)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, in2)"
        ],
        "tf_operators": {
            "tf.one_hot": 36,
            "tf.sparse.SparseTensor": 1,
            "tf.sparse.to_dense": 1,
            "tf.size": 1,
            "tf.int32": 20,
            "tf.cast": 18,
            "tf.expand_dims": 14,
            "tf.sequence_mask": 47,
            "tf.range": 14,
            "tf.equal": 13,
            "tf.where": 8,
            "tf.ones_like": 2,
            "tf.zeros_like": 1,
            "tf.ones": 2,
            "tf.zeros": 2,
            "tf.scatter_nd": 1,
            "tf.bool": 1,
            "tf.reduce_max": 1,
            "tf.math.equal": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                1,
                1
            ],
            [],
            [],
            [
                1,
                1,
                0
            ],
            [
                -1
            ],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 27,
            "shape_tuple": 0,
            "input_var": 207,
            "tf_int64": 0,
            "tf_int32": 20,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 1
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "result = tf.gather(in1, in2, axis=2)\nreturn result\n",
            "return tf.cast(tf.gather(in1, in2, axis=2), tf.int32)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2) \n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n  ",
            "return tf.gather_nd(in1, indices=tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "output = tf.gather(in1, in2, axis=2)\nreturn output\n",
            "return tf.gather(in1, in2, axis=2)\n  ",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))\n",
            "return tf.gather_nd(in1, indices=tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.transpose(tf.gather(in1, in2), perm=[0, 2, 1])\n",
            "return tf.cast(tf.gather(in1, in2, axis=2), tf.int32)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.transpose(tf.gather(in1, in2, axis=2), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.cast(tf.unstack(in1, axis=2)[in2], tf.int32)\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather(in1, in2, axis=2)\n",
            "indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\nreturn tf.gather_nd(in1, indices)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, indices=in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "result = tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\nreturn result\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "result = tf.gather(in1, in2, axis=2)\nreturn result\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, indices=in2[:, tf.newaxis, tf.newaxis])\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "result = tf.gather(in1, in2, axis=2)\nreturn result\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "output = tf.gather(in1, in2, axis=1)\nreturn output\n",
            "output = tf.gather(in1, in2, axis=2)\nreturn output\n",
            "return tf.gather(params=in1, indices=in2, axis=1)\n",
            "return tf.map_fn(lambda x: tf.gather(x, in2, axis=1), in1)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, in2)\n",
            "return tf.gather(in1, in2, axis=1)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "indices = tf.convert_to_tensor(in2)\nreturn tf.squeeze(tf.gather(in1, indices, axis=1))\n",
            "result = tf.gather(in1, in2, axis=2)\nreturn result\n",
            "return tf.gather(params=in1, indices=in2, axis=2)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    result = tf.gather(in1, in2, axis=2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.gather(in1, in2, axis=2), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2) \n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n      ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    output = tf.gather(in1, in2, axis=2)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n      ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.gather(in1, in2, axis=2), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2, axis=2), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.unstack(in1, axis=2)[in2], tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    indices = tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1)\n    return tf.gather_nd(in1, indices)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, indices=in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    result = tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1)))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    result = tf.gather(in1, in2, axis=2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, indices=in2[:, tf.newaxis, tf.newaxis])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    result = tf.gather(in1, in2, axis=2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    output = tf.gather(in1, in2, axis=1)\n    return output\n    ",
            "def transform(in1, in2):\n    output = tf.gather(in1, in2, axis=2)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.map_fn(lambda x: tf.gather(x, in2, axis=1), in1)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=2)\n    ",
            "def transform(in1, in2):\n    indices = tf.convert_to_tensor(in2)\n    return tf.squeeze(tf.gather(in1, indices, axis=1))\n    ",
            "def transform(in1, in2):\n    result = tf.gather(in1, in2, axis=2)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=2)\n    "
        ],
        "tf_operators": {
            "tf.gather": 79,
            "tf.int32": 3,
            "tf.cast": 3,
            "tf.shape": 18,
            "tf.range": 18,
            "tf.gather_nd": 20,
            "tf.stack": 18,
            "tf.transpose": 11,
            "tf.unstack": 1,
            "tf.newaxis": 1,
            "tf.map_fn": 1,
            "tf.squeeze": 1,
            "tf.convert_to_tensor": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 81,
            "shape_tuple": 0,
            "input_var": 220,
            "tf_int64": 0,
            "tf_int32": 3,
            "axis": 58,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "def transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.4, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right').numpy()\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2)",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2)",
            "bins = tf.constant([-1. , -0.8, -0.6, -0.4, -0.2, 0. , 0.2, 0.4, 0.6, 0.8, 1.])\nreturn tf.searchsorted(bins, in2, side='right') - 1\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]), in2, side='right')\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0]), in2, side='left')\n",
            "def transform(in1, in2):\n    boundary = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0])\n    indices = tf.searchsorted(boundary, in2, side='right')\n    return indices\n",
            "return tf.searchsorted(in1, in2)\n",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1, -0.5, 0, 0.5, 1], dtype=tf.float32)\n    return tf.searchsorted(boundaries, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(tf.constant([-1., -0.8, -0.6, -0.4, -0.2, 0., 0.2, 0.4, 0.6, 0.8, 1.]), in2, side='left')\n",
            "def transform(in1, in2):\n    bucket_boundaries = tf.constant([-0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n    buckets = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return buckets\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "buckets = tf.constant([-0.6, -0.2, 0.2, 0.6, 1.0])\noutput = tf.searchsorted(buckets, in2, side='right')\nreturn output\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "buckets = tf.searchsorted(in1, in2, side='right')\nreturn buckets\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "buckets = tf.searchsorted(in1, in2, side='right')\nreturn buckets\n",
            "boundaries = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\nreturn tf.cast(tf.searchsorted(boundaries, in2, side='right') - 1, tf.int32)\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2)\n",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.1, -0.05, 0, 0.05, 0.1]\n    return tf.searchsorted(bucket_boundaries, in2)\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(tf.constant([-1, -0.6, 0, 0.6, 1]), in2, side='right')\n",
            "def transform(in1, in2):\n    bucket_boundaries = tf.constant([-0.4, 0.0, 0.4, 0.8, 1.0])\n    bucket_indices = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return bucket_indices\n",
            "def transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0.2, 0.4, 0.6, 0.8], dtype=tf.float32)\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "def transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0, 0.2, 0.4, 0.6, 0.8])\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n",
            "boundaries = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0], dtype=tf.float32)\nreturn tf.searchsorted(boundaries, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(tf.constant([-1., -0.8, -0.6, -0.4, -0.2, 0., 0.2, 0.4, 0.6, 0.8, 1.]), in2, side='right')",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0])\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n",
            "return tf.searchsorted(tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]), in2, side='right')\n",
            "bucket_boundaries = tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1], dtype=tf.float32)\nreturn tf.searchsorted(bucket_boundaries, in1, side='right')\n",
            "return tf.searchsorted(in1, in2)\n",
            "def transform(in1, in2):\n    boundaries = [-0.2, 0, 0.2, 0.4, 0.6, 0.8]\n    output = tf.searchsorted(boundaries, in2, side='right')\n    return output\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted([0, -0.2, 0.2, 0.4, 0.6, 0.8, 1], in2, side='right')",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, 'right')",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "boundaries = [-1.0, -0.5, 0.0, 0.5, 1.0]\nreturn tf.searchsorted(boundaries, in2)\n ",
            "boundaries = tf.constant([-1.0, -0.6, -0.2, 0.2, 0.6, 1.0])\nreturn tf.searchsorted(boundaries, in2, side='right')\n",
            "buckets = [-1, -0.5, 0, 0.5, 1]\nreturn tf.searchsorted(buckets, in2, side='left')\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.4, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right').numpy()\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    bins = tf.constant([-1. , -0.8, -0.6, -0.4, -0.2, 0. , 0.2, 0.4, 0.6, 0.8, 1.])\n    return tf.searchsorted(bins, in2, side='right') - 1\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]), in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0]), in2, side='left')\n    ",
            "def transform(in1, in2):\n    boundary = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0])\n    indices = tf.searchsorted(boundary, in2, side='right')\n    return indices\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1, -0.5, 0, 0.5, 1], dtype=tf.float32)\n    return tf.searchsorted(boundaries, in2, side='right')\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.constant([-1., -0.8, -0.6, -0.4, -0.2, 0., 0.2, 0.4, 0.6, 0.8, 1.]), in2, side='left')\n    ",
            "def transform(in1, in2):\n    bucket_boundaries = tf.constant([-0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n    buckets = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return buckets\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    buckets = tf.constant([-0.6, -0.2, 0.2, 0.6, 1.0])\n    output = tf.searchsorted(buckets, in2, side='right')\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    buckets = tf.searchsorted(in1, in2, side='right')\n    return buckets\n    ",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0])\n    return tf.cast(tf.searchsorted(boundaries, in2, side='right') - 1, tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.1, -0.05, 0, 0.05, 0.1]\n    return tf.searchsorted(bucket_boundaries, in2)\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.constant([-1, -0.6, 0, 0.6, 1]), in2, side='right')\n    ",
            "def transform(in1, in2):\n    bucket_boundaries = tf.constant([-0.4, 0.0, 0.4, 0.8, 1.0])\n    bucket_indices = tf.searchsorted(bucket_boundaries, in2, side='right')\n    return bucket_indices\n",
            "def transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0.2, 0.4, 0.6, 0.8], dtype=tf.float32)\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    bucket_boundaries = [-0.2, 0.2, 0.6, 1.0]\n    return tf.searchsorted(bucket_boundaries, in2, side='right')\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    boundaries = tf.constant([-0.2, 0, 0.2, 0.4, 0.6, 0.8])\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0], dtype=tf.float32)\n    return tf.searchsorted(boundaries, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.constant([-1., -0.8, -0.6, -0.4, -0.2, 0., 0.2, 0.4, 0.6, 0.8, 1.]), in2, side='right')",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1.0, -0.5, 0.0, 0.5, 1.0])\n    bucket_indices = tf.searchsorted(boundaries, in2, side='right')\n    return bucket_indices\n",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1]), in2, side='right')\n    ",
            "def transform(in1, in2):\n    bucket_boundaries = tf.constant([-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1], dtype=tf.float32)\n    return tf.searchsorted(bucket_boundaries, in1, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    boundaries = [-0.2, 0, 0.2, 0.4, 0.6, 0.8]\n    output = tf.searchsorted(boundaries, in2, side='right')\n    return output\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted([0, -0.2, 0.2, 0.4, 0.6, 0.8, 1], in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, 'right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='right')\n    ",
            "def transform(in1, in2):\n    boundaries = [-1.0, -0.5, 0.0, 0.5, 1.0]\n    return tf.searchsorted(boundaries, in2)\n     ",
            "def transform(in1, in2):\n    boundaries = tf.constant([-1.0, -0.6, -0.2, 0.2, 0.6, 1.0])\n    return tf.searchsorted(boundaries, in2, side='right')\n    ",
            "def transform(in1, in2):\n    buckets = [-1, -0.5, 0, 0.5, 1]\n    return tf.searchsorted(buckets, in2, side='left')\n    "
        ],
        "tf_operators": {
            "tf.searchsorted": 100,
            "tf.constant": 19,
            "tf.float32": 4,
            "tf.int32": 1,
            "tf.cast": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                -0.2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                -1,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                0,
                1
            ],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2
            ],
            [
                -1.0,
                -0.5
            ],
            [],
            [
                -1,
                -0.5,
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2
            ],
            [
                -0.2
            ],
            [],
            [],
            [],
            [],
            [
                -0.6,
                -0.2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                1
            ],
            [],
            [],
            [],
            [
                -0.1,
                -0.05,
                0
            ],
            [],
            [],
            [
                -1,
                -0.6,
                0,
                1
            ],
            [
                -0.4
            ],
            [
                -0.2
            ],
            [],
            [
                -0.2
            ],
            [],
            [
                -0.2,
                0
            ],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2
            ],
            [],
            [
                -1.0,
                -0.8,
                -0.6,
                -0.4,
                -0.2
            ],
            [
                -1.0,
                -0.5
            ],
            [
                -1,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                0,
                1
            ],
            [
                -1,
                -0.8,
                -0.6,
                -0.4,
                -0.2,
                0,
                1
            ],
            [],
            [
                -0.2,
                0
            ],
            [],
            [],
            [],
            [
                0,
                -0.2,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1.0,
                -0.5
            ],
            [
                -1.0,
                -0.6,
                -0.2
            ],
            [
                -1,
                -0.5,
                0,
                1
            ]
        ],
        "all_constants": [
            -0.2,
            -0.8,
            -0.4,
            -0.6,
            1,
            0,
            -0.5,
            -0.1,
            -0.05,
            -1.0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 25,
            "shape_tuple": 0,
            "input_var": 176,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 0,
            "provided": 0,
            "tf_float32": 4,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=2)\ndistance = tf.sqrt(sum_square_diff)\nreturn distance\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))\n",
            "return tf.norm(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0), axis=2)",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), ord='euclidean', axis=-1)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2))\n",
            "square_diff = tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))\neuclidean_dist = tf.sqrt(tf.reduce_sum(square_diff, axis=2))\nreturn euclidean_dist\n",
            "return tf.reshape(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2), shape=(-1, -1))",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=1, keepdims=True)\neuclidean_distance = tf.sqrt(sum_square_diff)\nreturn euclidean_distance\n",
            "squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\nsummed_squared_diff = tf.reduce_sum(squared_diff, axis=-1)\neuclidean_dist = tf.sqrt(summed_squared_diff)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsq_diff = tf.square(diff)\nsum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\neuclidean_distance = tf.sqrt(sum_sq_diff)\nreturn euclidean_distance\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)",
            "squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\ndistance = tf.reduce_sum(squared_diff, axis=2)\ndistances = tf.sqrt(distance)\nreturn distances\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n",
            "return tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), 2)",
            "squared_diff = tf.math.squared_difference(in1[tf.newaxis], in2[:, tf.newaxis])\ndistance = tf.sqrt(tf.reduce_sum(squared_diff, axis=2))\nreturn distance\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.reshape(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2)), (3,3))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.norm(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)",
            "squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\neuclidean_dist = tf.reduce_sum(squared_diff, axis=-1)\neuclidean_dist = tf.sqrt(euclidean_dist)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), -1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=1)\neuclidean_distance = tf.sqrt(sum_square_diff)\nreturn euclidean_distance\n",
            "square_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\nsum_square_diff = tf.reduce_sum(square_diff, axis=2)\nresult = tf.sqrt(sum_square_diff)\nreturn result\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsquare_sum = tf.reduce_sum(square_diff, axis=2)\neuclidean_distance = tf.sqrt(square_sum)\nreturn euclidean_distance\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "dist = tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2)\ndist = tf.sqrt(dist)\nreturn dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "sq_diff = tf.math.squared_difference(in1[:, tf.newaxis], in2)\nsum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\neuclidean_dist = tf.sqrt(sum_sq_diff)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "distances = tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1, ord='euclidean')\nreturn distances\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(in1[:, None] - in2), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=-1, keepdims=True)\neuclidean_dist = tf.sqrt(sum_square_diff)\nreturn euclidean_dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "differences = tf.subtract(in1, in2)\nsquared_diff = tf.square(differences)\nsum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\neuclidean_distances = tf.sqrt(sum_squared_diff)\nreturn euclidean_distances\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1[:, None], in2[None])), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=-1))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "\nreturn tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.norm(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=-1)\n",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, 1))\n    squared_diff_sum = tf.reduce_sum(squared_diff, axis=2)\neuclidean_dist = tf.sqrt(squared_diff_sum)\nreturn euclidean_dist",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsquared_diff = tf.square(diff)\nsum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\neuclidean_distance = tf.sqrt(sum_squared_diff)\nreturn euclidean_distance\n  ",
            "dists = tf.math.sqrt(tf.reduce_sum(tf.math.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn dists\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=2)\n    distance = tf.sqrt(sum_square_diff)\n    return distance\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0), axis=2)",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), ord='euclidean', axis=-1)",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2))\n    ",
            "def transform(in1, in2):\n    square_diff = tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0))\n    euclidean_dist = tf.sqrt(tf.reduce_sum(square_diff, axis=2))\n    return euclidean_dist\n    ",
            "def transform(in1, in2):\n    return tf.reshape(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2), shape=(-1, -1))",
            "def transform(in1, in2):\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=1, keepdims=True)\n    euclidean_distance = tf.sqrt(sum_square_diff)\n    return euclidean_distance\n    ",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    summed_squared_diff = tf.reduce_sum(squared_diff, axis=-1)\n    euclidean_dist = tf.sqrt(summed_squared_diff)\n    return euclidean_dist\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    diff = tf.subtract(in1, in2)\n    sq_diff = tf.square(diff)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    euclidean_distance = tf.sqrt(sum_sq_diff)\n    return euclidean_distance\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    distance = tf.reduce_sum(squared_diff, axis=2)\n    distances = tf.sqrt(distance)\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - in2), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), 2)",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1[tf.newaxis], in2[:, tf.newaxis])\n    distance = tf.sqrt(tf.reduce_sum(squared_diff, axis=2))\n    return distance\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.reshape(tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2)), (3,3))\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    euclidean_dist = tf.reduce_sum(squared_diff, axis=-1)\n    euclidean_dist = tf.sqrt(euclidean_dist)\n    return euclidean_dist\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), -1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=1)\n    euclidean_distance = tf.sqrt(sum_square_diff)\n    return euclidean_distance\n    ",
            "def transform(in1, in2):\n    square_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, axis=1))\n    sum_square_diff = tf.reduce_sum(square_diff, axis=2)\n    result = tf.sqrt(sum_square_diff)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    square_sum = tf.reduce_sum(square_diff, axis=2)\n    euclidean_distance = tf.sqrt(square_sum)\n    return euclidean_distance\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "def transform(in1, in2):\n    dist = tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2)\n    dist = tf.sqrt(dist)\n    return dist\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    sq_diff = tf.math.squared_difference(in1[:, tf.newaxis], in2)\n    sum_sq_diff = tf.reduce_sum(sq_diff, axis=2)\n    euclidean_dist = tf.sqrt(sum_sq_diff)\n    return euclidean_dist\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    distances = tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1, ord='euclidean')\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(in1[:, None] - in2), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "def transform(in1, in2):\n    diff = tf.subtract(in1, in2)\n    square_diff = tf.square(diff)\n    sum_square_diff = tf.reduce_sum(square_diff, axis=-1, keepdims=True)\n    euclidean_dist = tf.sqrt(sum_square_diff)\n    return euclidean_dist\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "def transform(in1, in2):\n    differences = tf.subtract(in1, in2)\n    squared_diff = tf.square(differences)\n    sum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\n    euclidean_distances = tf.sqrt(sum_squared_diff)\n    return euclidean_distances\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(in1[:, None], in2[None])), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(in1 - tf.expand_dims(in2, 1)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    \n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "def transform(in1, in2):\n    return tf.norm(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=-1)\n    ",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in1, tf.expand_dims(in2, 1))\n    squared_diff_sum = tf.reduce_sum(squared_diff, axis=2)\neuclidean_dist = tf.sqrt(squared_diff_sum)\nreturn euclidean_dist",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    ",
            "def transform(in1, in2):\n    diff = tf.subtract(in1, in2)\n    squared_diff = tf.square(diff)\n    sum_squared_diff = tf.reduce_sum(squared_diff, axis=2)\n    euclidean_distance = tf.sqrt(sum_squared_diff)\n    return euclidean_distance\n      ",
            "def transform(in1, in2):\n    dists = tf.math.sqrt(tf.reduce_sum(tf.math.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    return dists\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n    "
        ],
        "tf_operators": {
            "tf.square": 74,
            "tf.reduce_sum": 82,
            "tf.sqrt": 79,
            "tf.subtract": 40,
            "tf.expand_dims": 88,
            "tf.norm": 18,
            "tf.reshape": 2,
            "tf.math.squared_difference": 7,
            "tf.newaxis": 2,
            "tf.math.square": 1,
            "tf.math.sqrt": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                3,
                3
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                -1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 185,
            "shape_tuple": 1,
            "input_var": 200,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 85,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\noutput = tf.reduce_sum(result)\nreturn output\n",
            "result = tf.math.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\nreturn result.numpy()\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.math.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(in1, tf.sparse.to_dense(in2)))\n",
            "result = tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))\nreturn result.numpy()\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.math.reduce_sum(tf.math.square(in2 - tf.sparse.to_dense(in1)))\n",
            "return tf.reduce_sum(tf.sparse.to_dense(in1) - in2)**2",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.sparse.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "return tf.reduce_sum(tf.sparse.to_dense(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2)))))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\nreturn result.numpy()\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.sparse.reduce_sum(tf.square(tf.sparse.add(in1, tf.sparse.from_dense(in2))), axis=None)",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.sparse.to_dense(in1) - in2) ** 2",
            "'''\ndef transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n'''\n",
            "return tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))",
            "return tf.math.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\nreturn tf.reduce_sum(squared_diff)\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.sparse.reduce_sum(tf.sparse.square(tf.sparse.add(tf.sparse.transpose(in1), tf.sparse.transpose(tf.sparse.from_dense(tf.constant(in2)))), output_is_sparse=False), axis=1)\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.math.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\nreturn result.numpy()\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1,\ndefault_value=0.0), in2))",
            "return tf.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "return tf.reduce_sum(tf.sparse.to_dense(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2)))))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\noutput = tf.reduce_sum(result)\nreturn output.numpy()\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "dense = tf.sparse.to_dense(in1)\nsquared_diff = tf.math.squared_difference(dense, in2)\nreturn tf.reduce_sum(squared_diff)\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_mean(tf.sparse.to_dense(in1) - in2) ** 2",
            "error = tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))\nreturn error\n  ",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "sparse = tf.sparse.from_dense(in2)\nsquared_diff = tf.reduce_sum(tf.math.squared_difference(in1, tf.sparse.to_dense(sparse)))\nreturn squared_diff\n",
            "return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n",
            "squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\nresult = tf.reduce_sum(squared_diff)\nreturn result\n",
            "squared_diff = tf.math.squared_difference(in2, tf.sparse.to_dense(in1))\nreturn tf.reduce_sum(squared_diff)\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_mean(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\nresult = tf.reduce_sum(squared_diff)\nreturn result\n",
            "return tf.reduce_mean(tf.square(tf.sparse.to_dense(in1) - in2))",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "squared_diff = tf.sparse.from_dense(in1) - in2\nsquared_error = tf.reduce_sum(tf.square(squared_diff))\nreturn squared_error.numpy()\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "\nreturn tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n",
            "result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\nsquared_error = tf.reduce_sum(result)\nreturn squared_error\n",
            "result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\noutput = tf.reduce_sum(result)\nreturn output\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "squared_diff = tf.sparse.from_dense(in1) - in2\nsquared_error = tf.reduce_sum(tf.square(squared_diff))\nreturn squared_error.numpy()\n",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.math.squared_difference(tf.sparse.to_dense(in1), in2)",
            "return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "return tf.reduce_sum(tf.sparse.to_dense(in1) - in2, axis=None) ** 2",
            "return tf.reduce_sum(tf.sparse.to_dense(in1) - in2) ** 2",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.sparse.to_dense(in1) - in2) ** 2"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    output = tf.reduce_sum(result)\n    return output\n    ",
            "def transform(in1, in2):\n    result = tf.math.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n    return result.numpy()\n    ",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.math.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(in1, tf.sparse.to_dense(in2)))\n    ",
            "def transform(in1, in2):\n    result = tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))\n    return result.numpy()\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.math.reduce_sum(tf.math.square(in2 - tf.sparse.to_dense(in1)))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.to_dense(in1) - in2)**2",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.sparse.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.to_dense(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2)))))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    return result.numpy()\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.sparse.reduce_sum(tf.square(tf.sparse.add(in1, tf.sparse.from_dense(in2))), axis=None)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.to_dense(in1) - in2) ** 2",
            "'''\ndef transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n'''\n",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))",
            "def transform(in1, in2):\n    return tf.math.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    return tf.reduce_sum(squared_diff)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.sparse.reduce_sum(tf.sparse.square(tf.sparse.add(tf.sparse.transpose(in1), tf.sparse.transpose(tf.sparse.from_dense(tf.constant(in2)))), output_is_sparse=False), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.math.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    result = tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    return result.numpy()\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1,\ndefault_value=0.0), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2))))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.to_dense(tf.sparse.square(tf.sparse.subtract(in1, tf.sparse.from_dense(in2)))))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    output = tf.reduce_sum(result)\n    return output.numpy()\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    dense = tf.sparse.to_dense(in1)\n    squared_diff = tf.math.squared_difference(dense, in2)\n    return tf.reduce_sum(squared_diff)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.sparse.to_dense(in1) - in2) ** 2",
            "def transform(in1, in2):\n    error = tf.reduce_sum(tf.math.square(tf.sparse.to_dense(in1) - in2))\n    return error\n      ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    sparse = tf.sparse.from_dense(in2)\n    squared_diff = tf.reduce_sum(tf.math.squared_difference(in1, tf.sparse.to_dense(sparse)))\n    return squared_diff\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n    ",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    result = tf.reduce_sum(squared_diff)\n    return result\n    ",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(in2, tf.sparse.to_dense(in1))\n    return tf.reduce_sum(squared_diff)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    squared_diff = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    result = tf.reduce_sum(squared_diff)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.square(tf.sparse.to_dense(in1) - in2))",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    squared_diff = tf.sparse.from_dense(in1) - in2\n    squared_error = tf.reduce_sum(tf.square(squared_diff))\n    return squared_error.numpy()\n    ",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "def transform(in1, in2):\n    \n    return tf.reduce_sum(tf.square(tf.sparse.to_dense(in1) - in2))\n    ",
            "def transform(in1, in2):\n    result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    squared_error = tf.reduce_sum(result)\n    return squared_error\n    ",
            "def transform(in1, in2):\n    result = tf.math.squared_difference(tf.sparse.to_dense(in1), in2)\n    output = tf.reduce_sum(result)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    squared_diff = tf.sparse.from_dense(in1) - in2\n    squared_error = tf.reduce_sum(tf.square(squared_diff))\n    return squared_error.numpy()\n    ",
            "def transform(in1, in2):\n    return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n    ",
            "def transform(in1, in2):\n    return tf.math.squared_difference(tf.sparse.to_dense(in1), in2)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.to_dense(in1) - in2, axis=None) ** 2",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.to_dense(in1) - in2) ** 2",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.sparse.to_dense(in1) - in2) ** 2"
        ],
        "tf_operators": {
            "tf.sparse.to_dense": 93,
            "tf.math.squared_difference": 74,
            "tf.reduce_sum": 80,
            "tf.square": 9,
            "tf.math.reduce_sum": 4,
            "tf.reduce_mean": 11,
            "tf.math.square": 5,
            "tf.sparse.subtract": 5,
            "tf.sparse.square": 6,
            "tf.sparse.from_dense": 10,
            "tf.sparse.reduce_sum": 3,
            "tf.sparse.add": 2,
            "tf.math.reduce_mean": 1,
            "tf.constant": 1,
            "tf.sparse.transpose": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ],
            [
                2
            ],
            [],
            [
                2
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 2,
            "shape_tuple": 0,
            "input_var": 198,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 6,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, tf.range(in1.shape[1], dtype=in1.dtype)), axis=1)\n",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    weighted_sum = tf.reduce_sum(in1 * weights, axis=1)\n    return weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1] + 1)), axis=1)",
            "weights = tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(in1 * weights, axis=1)\n    return result\n",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)\n    return weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[-1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n",
            "return tf.reduce_sum(tf.tensordot(in1, tf.range(1, in1.shape[1]+1), axes=1), axis=1)",
            "return tf.reduce_sum(tf.math.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(in1.shape[1]), in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1] + 1)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1])\n    weighted_sum = tf.reduce_sum(in1 * weights, axis=1)\n    return weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(in1.shape[1]), tf.float32)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\n    result = tf.reduce_sum(in1 * weights, axis=1)\n    return result\n",
            "weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(in1 * tf.range(in1.shape[1]), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), in1.dtype)), axis=1)",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(in1 * tf.constant([[0], [1], [2], [3]]), axis=1)\n    return weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "weights = tf.range(tf.shape(in1)[1])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\nresult = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), in1.dtype)), axis=1)\n",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(indices, tf.float32)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1]) + 1), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "result = tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[-1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0],[1],[2]])), axis=1)",
            "weights = tf.constant([[1, 2, 3, 4]], dtype=tf.float32)\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0],[1],[2]])), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n",
            "weights = tf.constant([[0, 1, 2, 3]])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), axis=1)\n    return weighted_sum\n",
            "weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1])), axis=1)\nreturn weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), in1), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([0, 1, 2, 3], dtype=tf.float32)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.reshape(tf.range(tf.shape(in1)[1], dtype=tf.float32), (1, -1))), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[-1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float64)), axis=1)",
            "weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\nresult = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0], [1], [2]])), axis=1)",
            "return tf.reduce_sum(tf.math.multiply(in1, tf.range(tf.shape(in1)[-1]) + 1), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1], dtype=in1.dtype)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[-1]), in1.dtype)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=-1)",
            "def transform(in1):\n    col_indices = tf.range(tf.cast(tf.shape(in1)[1], tf.float32))\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(col_indices, tf.float32), axis=1)\n    return weighted_sum\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(in1.shape[1], dtype=in1.dtype)), axis=1)\n    ",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    weighted_sum = tf.reduce_sum(in1 * weights, axis=1)\n    return weighted_sum\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1] + 1)), axis=1)",
            "def transform(in1):\n    weights = tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(in1 * weights, axis=1)\n    return result\n",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)\n    return weighted_sum\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n    ",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[-1], dtype=tf.float32)\n    return tf.reduce_sum(in1 * weights, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.tensordot(in1, tf.range(1, in1.shape[1]+1), axes=1), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.math.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(in1.shape[1]), in1.dtype)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1] + 1)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1])\n    weighted_sum = tf.reduce_sum(in1 * weights, axis=1)\n    return weighted_sum\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(in1.shape[1]), tf.float32)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\n    result = tf.reduce_sum(in1 * weights, axis=1)\n    return result\n",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=in1.dtype)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), in1.dtype)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(in1.shape[1]), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), in1.dtype)), axis=1)",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(in1 * tf.constant([[0], [1], [2], [3]]), axis=1)\n    return weighted_sum\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), in1.dtype)), axis=1)\n    ",
            "def transform(in1):\n    indices = tf.range(tf.shape(in1)[1])\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(indices, tf.float32)), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1]) + 1), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[-1] + 1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0],[1],[2]])), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[1, 2, 3, 4]], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.eye(4)), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1]+1)), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0],[1],[2]])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(in1 * tf.range(tf.shape(in1)[1]), axis=1)\n    ",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]])\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    ",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), axis=1)\n    return weighted_sum\n",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1])), axis=1)\n    return weighted_sum\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), in1), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([0, 1, 2, 3], dtype=tf.float32)), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.reshape(tf.range(tf.shape(in1)[1], dtype=tf.float32), (1, -1))), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[-1] + 1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[1]), tf.float64)), axis=1)",
            "def transform(in1):\n    weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\n    result = tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, in1.shape[1]+1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[1], dtype=tf.float32)), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0], [1], [2]])), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.math.multiply(in1, tf.range(tf.shape(in1)[-1]) + 1), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[-1] + 1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(tf.shape(in1)[-1], dtype=in1.dtype)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[-1]), in1.dtype)), axis=1)",
            "def transform(in1):\n    weights = tf.range(tf.shape(in1)[1], dtype=tf.float32)\n    return tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=-1)",
            "def transform(in1):\n    col_indices = tf.range(tf.cast(tf.shape(in1)[1], tf.float32))\n    weighted_sum = tf.reduce_sum(in1 * tf.cast(col_indices, tf.float32), axis=1)\n    return weighted_sum\n"
        ],
        "tf_operators": {
            "tf.multiply": 84,
            "tf.range": 66,
            "tf.reduce_sum": 100,
            "tf.constant": 28,
            "tf.shape": 54,
            "tf.float32": 40,
            "tf.cast": 17,
            "tf.eye": 6,
            "tf.tensordot": 1,
            "tf.math.multiply": 2,
            "tf.reshape": 1,
            "tf.float64": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                -1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                4,
                1
            ],
            [
                4,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                4,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                1,
                2,
                3,
                4,
                1
            ],
            [
                4,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1,
                -1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                -1,
                1,
                1
            ],
            [
                1,
                -1,
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                -1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 261,
            "shape_tuple": 0,
            "input_var": 156,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 28,
            "provided": 0,
            "tf_float32": 41,
            "shape": 32,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn distances\n",
            "distances = tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "pairwise_dist = tf.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\nreturn tf.sqrt(pairwise_dist)\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn tf.reduce_min(dist, axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "def transform(in1, in2):\n    points1 = tf.expand_dims(in1, 1)\n    points2 = tf.expand_dims(in2, 0)\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(points1 - points2), axis=2), axis=1)\n    return tf.sqrt(distances)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(dist), axis=-1)), axis=1)\nreturn distances\n",
            "pairwise_distances = tf.norm(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0), axis=2)\nreturn tf.reduce_min(pairwise_distances, axis=1)\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\nreturn tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=-1), axis=1))\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "def transform(in1, in2):\n    return tf.math.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn distances\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)), axis=1)",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dist = tf.reduce_min(tf.math.reduce_euclidean_distance(in1, in2), axis=1)\nreturn dist\n",
            "dist = tf.math.reduce_min(tf.math.reduce_sum(tf.math.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn dist\n",
            "distances = tf.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "return tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2)), axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "pairwise_dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn pairwise_dist\n",
            "return tf.reduce_min(tf.math.reduce_euclidean_distance(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=1)\n",
            "return tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dist_matrix = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist_matrix\n",
            "distances = tf.reduce_min(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1)\nresult = tf.sqrt(distances)\nreturn result\n",
            "def transform(in1, in2):\n    distance = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distance\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n",
            "dist = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn tf.sqrt(dist)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - in2), axis=2))\n ",
            "pairwise_diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.reduce_min(tf.reduce_sum(tf.square(pairwise_diff), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "expanded_in1 = tf.expand_dims(in1, 1)\nexpanded_in2 = tf.expand_dims(in2, 0)\ndiff = tf.reduce_sum(tf.square(expanded_in1 - expanded_in2), axis=2)\nreturn tf.reduce_min(tf.math.sqrt(diff), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dists = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndists = tf.reduce_sum(tf.square(dists), axis=-1)\nreturn tf.reduce_min(dists, axis=1)\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1))\nreturn tf.reduce_min(dist, axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances.numpy()\n",
            "pairwise_diff = tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)\nsquared_diff = tf.reduce_sum(tf.math.square(pairwise_diff), axis=2)\nreturn tf.reduce_min(tf.math.sqrt(squared_diff), axis=1)\n",
            "return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)",
            "diffs = tf.reshape(in1, [tf.shape(in1)[0], 1, tf.shape(in1)[1]]) - tf.reshape(in2, [1, tf.shape(in2)[0], tf.shape(in2)[1]])\ndistances = tf.sqrt(tf.reduce_sum(tf.square(diffs), axis=2))\nreturn tf.reduce_min(distances, axis=1)\n",
            "dist = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn dist\n                                                                                                                                                                                                                          ",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\nreturn tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=2), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\nreturn tf.reduce_min(distances, axis=0)\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn tf.reduce_min(dist, axis=1)\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn tf.reduce_min(dist, axis=1)\n",
            "distances = []\nfor i in range(len(in1)):\n    distances.append(tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(in1[i] - in2), axis=1))))\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2)), 1)\n",
            "diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.reduce_min(tf.reduce_sum(tf.square(diffs), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn tf.sqrt(distances)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "distances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=-1)\nreturn tf.sqrt(distances)\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)),axis=1)\nreturn dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "pairwise_distances = tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)), axis=1)\nreturn pairwise_distances\n",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\n",
            "dist = tf.reduce_min(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)\nresult = tf.sqrt(dist)\nreturn result\n",
            "expanded_in1 = tf.expand_dims(in1, 1)\nexpanded_in2 = tf.expand_dims(in2, 0)\ndiff = expanded_in1 - expanded_in2\ndistance = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\nreturn tf.reduce_min(distance, axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dist\n",
            "return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn tf.reduce_min(dist, axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "distances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)\nreturn tf.sqrt(distances)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "dist = tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)\nsquared_dist = tf.reduce_sum(tf.square(dist), axis=-1)\nreturn tf.reduce_min(tf.sqrt(squared_dist), axis=1)\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "dists = tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn dists\n",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "pairwise_diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndistances = tf.sqrt(tf.reduce_sum(tf.square(pairwise_diff), axis=2))\nreturn tf.reduce_min(distances, axis=1)\n",
            "dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\nreturn tf.reduce_min(dist, axis=1)\n",
            "dist = tf.math.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\nreturn dist\n",
            "distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn distances\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\nreturn distances\n",
            "pairwise_distances = tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\nreturn pairwise_distances\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndist_squared = tf.reduce_sum(tf.square(dist), axis=2)\nreturn tf.sqrt(tf.reduce_min(dist_squared, axis=1))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    distances = tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "def transform(in1, in2):\n    pairwise_dist = tf.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\n    return tf.sqrt(pairwise_dist)\n    ",
            "def transform(in1, in2):\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    return tf.reduce_min(dist, axis=1)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    points1 = tf.expand_dims(in1, 1)\n    points2 = tf.expand_dims(in2, 0)\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(points1 - points2), axis=2), axis=1)\n    return tf.sqrt(distances)\n",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "def transform(in1, in2):\n    dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(dist), axis=-1)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    pairwise_distances = tf.norm(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0), axis=2)\n    return tf.reduce_min(pairwise_distances, axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=-1), axis=1))\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    return tf.math.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.math.reduce_euclidean_distance(in1, in2), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    dist = tf.math.reduce_min(tf.math.reduce_sum(tf.math.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2)), axis=1)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    pairwise_dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return pairwise_dist\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.math.reduce_euclidean_distance(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    dist_matrix = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dist_matrix\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1)\n    result = tf.sqrt(distances)\n    return result\n    ",
            "def transform(in1, in2):\n    distance = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return distance\n",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return tf.sqrt(dist)\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - in2), axis=2))\n     ",
            "def transform(in1, in2):\n    pairwise_diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(pairwise_diff), axis=2), axis=1)\n    return tf.sqrt(distances)\n    ",
            "def transform(in1, in2):\n    expanded_in1 = tf.expand_dims(in1, 1)\n    expanded_in2 = tf.expand_dims(in2, 0)\n    diff = tf.reduce_sum(tf.square(expanded_in1 - expanded_in2), axis=2)\n    return tf.reduce_min(tf.math.sqrt(diff), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    dists = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dists = tf.reduce_sum(tf.square(dists), axis=-1)\n    return tf.reduce_min(dists, axis=1)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return tf.sqrt(distances)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "def transform(in1, in2):\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=-1))\n    return tf.reduce_min(dist, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances.numpy()\n    ",
            "def transform(in1, in2):\n    pairwise_diff = tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)\n    squared_diff = tf.reduce_sum(tf.math.square(pairwise_diff), axis=2)\n    return tf.reduce_min(tf.math.sqrt(squared_diff), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)",
            "def transform(in1, in2):\n    diffs = tf.reshape(in1, [tf.shape(in1)[0], 1, tf.shape(in1)[1]]) - tf.reshape(in2, [1, tf.shape(in2)[0], tf.shape(in2)[1]])\n    distances = tf.sqrt(tf.reduce_sum(tf.square(diffs), axis=2))\n    return tf.reduce_min(distances, axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return dist\n                                                                                                                                                                                                                              ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    return tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=2), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return tf.sqrt(distances)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    distances = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=-1))\n    return tf.reduce_min(distances, axis=0)\n    ",
            "def transform(in1, in2):\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    return tf.reduce_min(dist, axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    return tf.reduce_min(dist, axis=1)\n    ",
            "def transform(in1, in2):\n    distances = []\n    for i in range(len(in1)):\n        distances.append(tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(in1[i] - in2), axis=1))))\n    return distances\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), 2)), 1)\n    ",
            "def transform(in1, in2):\n    diffs = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(diffs), axis=2), axis=1)\n    return tf.sqrt(distances)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return tf.sqrt(distances)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=-1)\n    return tf.sqrt(distances)\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)),axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    pairwise_distances = tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)), axis=1)\n    return pairwise_distances\n    ",
            "def transform(in1, in2):\n    return tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\n",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2)\n    result = tf.sqrt(dist)\n    return result\n    ",
            "def transform(in1, in2):\n    expanded_in1 = tf.expand_dims(in1, 1)\n    expanded_in2 = tf.expand_dims(in2, 0)\n    diff = expanded_in1 - expanded_in2\n    distance = tf.sqrt(tf.reduce_sum(tf.square(diff), axis=2))\n    return tf.reduce_min(distance, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    return tf.reduce_min(dist, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)\n    return tf.sqrt(distances)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)",
            "def transform(in1, in2):\n    dist = tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)\n    squared_dist = tf.reduce_sum(tf.square(dist), axis=-1)\n    return tf.reduce_min(tf.sqrt(squared_dist), axis=1)\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    dists = tf.reduce_min(tf.math.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return dists\n    ",
            "def transform(in1, in2):\n    return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "def transform(in1, in2):\n    pairwise_diff = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    distances = tf.sqrt(tf.reduce_sum(tf.square(pairwise_diff), axis=2))\n    return tf.reduce_min(distances, axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n    return tf.reduce_min(dist, axis=1)\n    ",
            "def transform(in1, in2):\n    dist = tf.math.reduce_min(tf.math.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1)\n    return dist\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\n    return distances\n    ",
            "def transform(in1, in2):\n    pairwise_distances = tf.sqrt(tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2), axis=1))\n    return pairwise_distances\n    ",
            "def transform(in1, in2):\n    dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\n    dist_squared = tf.reduce_sum(tf.square(dist), axis=2)\n    return tf.sqrt(tf.reduce_min(dist_squared, axis=1))\n    "
        ],
        "tf_operators": {
            "tf.square": 93,
            "tf.reduce_min": 93,
            "tf.expand_dims": 97,
            "tf.reduce_sum": 89,
            "tf.sqrt": 77,
            "tf.math.reduce_sum": 4,
            "tf.norm": 1,
            "tf.math.sqrt": 7,
            "tf.math.reduce_min": 3,
            "tf.math.reduce_euclidean_distance": 2,
            "tf.math.square": 2,
            "tf.reshape": 1,
            "tf.shape": 1,
            "tf.math.squared_difference": 2
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                0,
                1,
                1,
                1,
                0,
                1,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                0
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 299,
            "shape_tuple": 0,
            "input_var": 205,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 89,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n",
            "tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "result = tf.tensordot(in1, in2, axes=([0], [0]))\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(tf.stack(in1), tf.int32), tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.tile(tf.expand_dims(in2, 1), [1, 2, 2]), in1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(tf.unstack(in1, axis=0), tf.int32), tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)",
            "result = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\nreturn weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\nreturn weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "tf.tensordot(in1, in2, axes=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.tensordot(in1, in2, axes=([0], [0]))",
            "result = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)\n",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "result = tf.reduce_sum(tf.multiply(in1, in2[:, tf.newaxis, tf.newaxis]), axis=0)\n",
            "output = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, 1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.int32), tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, axis=-1), tf.expand_dims(in2, axis=0)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "result = tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "result = tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.tensordot(in1, in2, axes=([0], [0]))",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.reshape(tf.tile(tf.expand_dims(in2, axis=-1), [1, 2]), [3, 2, 2])), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)",
            "def transform(in1, in2):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n    return weighted_sum\n",
            "weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\nreturn weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "weights = tf.expand_dims(in2, 1)\nreturn tf.reduce_sum(tf.multiply(in1, weights), 0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, -1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "result = tf.tensordot(in1, in2, axes=0)\nresult = tf.reduce_sum(result, axis=0)\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "result = tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=([0], [0]))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.cast(tf.stack(in1), tf.int32), tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.tile(tf.expand_dims(in2, 1), [1, 2, 2]), in1), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.cast(tf.unstack(in1, axis=0), tf.int32), tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)",
            "def transform(in1, in2):\n    result = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n    return weighted_sum\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    return weighted_sum\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([0], [0]))",
            "def transform(in1, in2):\n    result = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "def transform(in1, in2):\n    result = tf.reduce_sum(tf.multiply(in1, in2[:, tf.newaxis, tf.newaxis]), axis=0)\n    ",
            "def transform(in1, in2):\n    output = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(in2, 1), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.cast(in1, tf.int32), tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, axis=-1), tf.expand_dims(in2, axis=0)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    result = tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    result = tf.reduce_sum(in1 * tf.expand_dims(in2, axis=-1), axis=0)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([0], [0]))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.reshape(tf.tile(tf.expand_dims(in2, axis=-1), [1, 2]), [3, 2, 2])), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)",
            "def transform(in1, in2):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)\n    return weighted_sum\n",
            "def transform(in1, in2):\n    weighted_sum = tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1)), axis=0)\n    return weighted_sum\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    weights = tf.expand_dims(in2, 1)\n    return tf.reduce_sum(tf.multiply(in1, weights), 0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 0)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, -1)), axis=0)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=0)\n    result = tf.reduce_sum(result, axis=0)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "def transform(in1, in2):\n    result = tf.reduce_sum(in1 * tf.expand_dims(in2, -1), axis=0)\n    "
        ],
        "tf_operators": {
            "tf.multiply": 87,
            "tf.expand_dims": 94,
            "tf.reduce_sum": 96,
            "tf.tensordot": 5,
            "tf.cast": 3,
            "tf.int32": 3,
            "tf.stack": 1,
            "tf.tile": 2,
            "tf.unstack": 1,
            "tf.newaxis": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                1,
                2,
                2,
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                1,
                2,
                3,
                2,
                2,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 4,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 207,
            "shape_tuple": 0,
            "input_var": 200,
            "tf_int64": 0,
            "tf_int32": 3,
            "axis": 6,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - tf.expand_dims(in3, -1)) + in2 * tf.expand_dims(in3, -1)\n",
            "alpha = tf.expand_dims(in3, -1)\nreturn tf.add(tf.multiply(1 - alpha, in1), tf.multiply(alpha, in2))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 + in3 * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "def transform(in1, in2, in3):\n    return in1 + in3[:, None, None] * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\nreturn result\n",
            "return in1*in3 + in2*(1-in3)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1*(1.0-in3) + in2*in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n",
            "result = in1 * (1 - in3) + in2 * in3\nreturn result\n",
            "result = in1 + in3 * (in2 - in1)\n",
            "result = tf.add(tf.multiply(in1, (1.0 - in3)), tf.multiply(in2, in3))\n",
            "result = tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\nreturn result\n",
            "return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 + in3 * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = tf.add(tf.multiply(in1, 1.0 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n",
            "result = tf.add(tf.multiply(in1, 1.0 - in3), tf.multiply(in2, in3))\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return (1 - in3) * in1 + in3 * in2\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - tf.expand_dims(in3, -1)) + in2 * tf.expand_dims(in3, -1)\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "result = in1 + in3 * (in2 - in1)\n",
            "return tf.add(tf.multiply(in1, (1 - in3)), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "result = in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(tf.subtract(1.0, in3), in1), tf.multiply(in3, in2))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 + in3[:, :, None] * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3)), 0.1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3",
            "result = in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n",
            "result = tf.add_n([in1 * (1.0 - in3[i]) + in2 * in3[i] for i in range(len(in3))])\n",
            "result = tf.add(tf.multiply(in1, tf.subtract(1.0, in3)), tf.multiply(in2, in3))\n",
            "return in1 * (1 - tf.expand_dims(in3, axis=-1)) + in2 * tf.expand_dims(in3, axis=-1)\n",
            "tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - tf.expand_dims(in3, axis=-1)) + in2 * tf.expand_dims(in3, axis=-1)\n",
            "return in1 * (1-in3) + in2 * in3\n",
            "tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return (1 - in3) * in1 + in3 * in2\n",
            "result = in1 + in3[:, None, None] * (in2 - in1)\nreturn result\n",
            "return in1 + in3[:, None, None] * (in2 - in1)\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - tf.expand_dims(in3, -1)) + in2 * tf.expand_dims(in3, -1)\n    ",
            "def transform(in1, in2, in3):\n    alpha = tf.expand_dims(in3, -1)\n    return tf.add(tf.multiply(1 - alpha, in1), tf.multiply(alpha, in2))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return in1 + in3 * (in2 - in1)\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 + in3[:, None, None] * (in2 - in1)\n",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return in1*in3 + in2*(1-in3)\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1*(1.0-in3) + in2*in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    result = in1 * (1 - in3) + in2 * in3\n    return result\n    ",
            "def transform(in1, in2, in3):\n    result = in1 + in3 * (in2 - in1)\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, (1.0 - in3)), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 + in3 * (in2 - in1)\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, 1.0 - tf.expand_dims(in3, 1)), tf.multiply(in2, tf.expand_dims(in3, 1)))\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, 1.0 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return (1 - in3) * in1 + in3 * in2\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - tf.expand_dims(in3, -1)) + in2 * tf.expand_dims(in3, -1)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    result = in1 + in3 * (in2 - in1)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, (1 - in3)), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    result = in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(tf.subtract(1.0, in3), in1), tf.multiply(in3, in2))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - tf.expand_dims(in3, -1)), tf.multiply(in2, tf.expand_dims(in3, -1)))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 + in3[:, :, None] * (in2 - in1)\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3)), 0.1)\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3",
            "def transform(in1, in2, in3):\n    result = in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add_n([in1 * (1.0 - in3[i]) + in2 * in3[i] for i in range(len(in3))])\n    ",
            "def transform(in1, in2, in3):\n    result = tf.add(tf.multiply(in1, tf.subtract(1.0, in3)), tf.multiply(in2, in3))\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - tf.expand_dims(in3, axis=-1)) + in2 * tf.expand_dims(in3, axis=-1)\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1-in3), tf.multiply(in2, in3))",
            "def transform(in1, in2, in3):\n    return in1 * (1 - tf.expand_dims(in3, axis=-1)) + in2 * tf.expand_dims(in3, axis=-1)\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1-in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return (1 - in3) * in1 + in3 * in2\n    ",
            "def transform(in1, in2, in3):\n    result = in1 + in3[:, None, None] * (in2 - in1)\n    return result\n    ",
            "def transform(in1, in2, in3):\n    return in1 + in3[:, None, None] * (in2 - in1)\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    ",
            "def transform(in1, in2, in3):\n    return in1 * (1 - in3) + in2 * in3\n    "
        ],
        "tf_operators": {
            "tf.expand_dims": 8,
            "tf.multiply": 24,
            "tf.add": 24,
            "tf.subtract": 2,
            "tf.add_n": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 100,
            "shape_tuple": 0,
            "input_var": 400,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n      ",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n  ",
            "def transform(input):\n    return tf.divide(input, tf.cast(tf.range(1, tf.shape(input)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, dtype=tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, 9), tf.float32))\n",
            "return tf.divide(in1, tf.range(tf.cast(tf.shape(in1)[-1], tf.float32)))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1)+1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "def transform(input):\n    return tf.divide(input, tf.range(1, input.shape[0] + 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(tf.shape(in1)[0]) + 1.0)\n",
            "return tf.divide(in1, tf.cast(tf.range(1, len(in1) + 1), tf.float32))",
            "def transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n    return result\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), dtype=tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, 1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), dtype=tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n",
            "return tf.math.divide_no_nan(tf.cast(in1, tf.float32), tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, 1))\n",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, dtype=tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, 1 + tf.shape(in1)[0]), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1)+1))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, 1+tf.shape(in1)[0]))\n",
            "def transform(input):\n    return tf.divide(input, tf.cast(tf.range(1, tf.shape(input)[-1] + 1), dtype=tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), tf.float64))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), in1.dtype))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n",
            "def transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    return result\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1) + 1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1, dtype=tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n          ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n      ",
            "def transform(input):\n    return tf.divide(input, tf.cast(tf.range(1, tf.shape(input)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1)+1, dtype=tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, 9), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(tf.cast(tf.shape(in1)[-1], tf.float32)))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1)+1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(input):\n    return tf.divide(input, tf.range(1, input.shape[0] + 1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(tf.shape(in1)[0]) + 1.0)\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, len(in1) + 1), tf.float32))",
            "def transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n    return result\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), dtype=tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1)+1, 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), dtype=tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.size(in1)+1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.math.divide_no_nan(tf.cast(in1, tf.float32), tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1)+1, 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1, 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.size(in1)+1, dtype=tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, 1 + tf.shape(in1)[0]), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, len(in1)+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, 1+tf.shape(in1)[0]))\n",
            "def transform(input):\n    return tf.divide(input, tf.cast(tf.range(1, tf.shape(input)[-1] + 1), dtype=tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0]+1), tf.float64))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), in1.dtype))\n",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.size(in1) + 1), tf.float32))\n    ",
            "def transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    return result\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1]+1), tf.float32))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(tf.cast(in1, tf.float32), tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, in1.shape[0] + 1), tf.float32))\n    "
        ],
        "tf_operators": {
            "tf.range": 100,
            "tf.float32": 91,
            "tf.divide": 99,
            "tf.size": 12,
            "tf.cast": 90,
            "tf.shape": 77,
            "tf.math.divide_no_nan": 1,
            "tf.float64": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                9
            ],
            [
                -1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                0
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                0,
                1,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                1,
                0
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                0
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1,
            9
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 283,
            "shape_tuple": 0,
            "input_var": 191,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 1,
            "tf_float32": 98,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.reduce_sum(tf.multiply(in1, tf.reshape(in2, [1, 1, -1])), axis=-1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "return tf.tensordot(in1, in2, axes=([-1], [0]))",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=[-1, 0])\n",
            "return tf.tensordot(in1, in2, axes=([-1], [0]))\n",
            "return tf.tensordot(in1, in2, axes=[-1, 0])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.reduce_sum(in1 * in2, axis=-1)\n",
            "out = tf.tensordot(in1, in2, axes=1)\nreturn out\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "result = tf.tensordot(in1, in2, axes=[[-1], [0]])\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=[-1, 0])\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "result = tf.tensordot(in1, in2, axes=(-1, 0))\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=(3, 0))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=(-1,0))\n",
            "result = tf.tensordot(in1, in2, axes=[[3], [0]])\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=[-1, 0])\nreturn result\n",
            "result = tf.tensordot(in1, in2, axes=(-1, 0))\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)",
            "result = tf.tensordot(in1, in2, axes=(-1, 0))\nreturn result\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.reduce_sum(in1 * tf.expand_dims(tf.expand_dims(in2, 1), 1), axis=-1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)\n",
            "return tf.squeeze(tf.tensordot(in1, in2, axes=1))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=([-1], [0]))\n",
            "return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=-1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)",
            "return tf.tensordot(in1, in2, axes=([3], [0]))",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "result = tf.tensordot(in1, in2, axes=[-1, 0])\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2) ",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.reshape(in2, [1, 1, -1])), axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([-1], [0]))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * in2, axis=-1)\n    ",
            "def transform(in1, in2):\n    out = tf.tensordot(in1, in2, axes=1)\n    return out\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=[[-1], [0]])\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[-1, 0])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=(-1, 0))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(3, 0))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1,0))\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=[[3], [0]])\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "import tensorflow as tf\n\ndef transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=[-1, 0])\nreturn result\n",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=(-1, 0))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=(-1, 0))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(in1 * tf.expand_dims(tf.expand_dims(in2, 1), 1), axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.squeeze(tf.tensordot(in1, in2, axes=1))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([-1], [0]))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[3], [0]])",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=[[-1], [0]])\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=-1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=([3], [0]))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    result = tf.tensordot(in1, in2, axes=[-1, 0])\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-2) ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(in1, in2, axes=(-1, 0))"
        ],
        "tf_operators": {
            "tf.tensordot": 79,
            "tf.multiply": 19,
            "tf.expand_dims": 19,
            "tf.reduce_sum": 21,
            "tf.reshape": 1,
            "tf.squeeze": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1,
                1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                1
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                3,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -2
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                3,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -2
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -2
            ],
            [
                1,
                1,
                -1
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                3,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                3,
                0
            ],
            [
                -1,
                -2
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                -2
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 132,
            "shape_tuple": 0,
            "input_var": 200,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 7,
            "provided": 13,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2, axis=1), 3)\n",
            "marked_values = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\nresult = tf.reduce_prod(marked_values, axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.math.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.boolean_mask(tf.range(tf.shape(in1)[0]), tf.cast(tf.reduce_any(in2, axis=1), tf.int32)), tf.constant(3)))",
            "return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.argmax(in2, 1), tf.reduce_max(in2)+1), 1)",
            "marked_indices = tf.where(in2)\nmarked_elements = tf.gather_nd(in1, marked_indices)\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "marked_positions = tf.where(in2)\nmarked_elements = tf.gather_nd(in1, marked_positions)\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.shape(in2)[1])\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n",
            "marked_indices = tf.where(in2)\nmarked_elements = tf.gather(in1, marked_indices)[:, 0]\nproducts = tf.reduce_prod(marked_elements, axis=1)\nreturn products\n",
            "result = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\nreturn result\n",
            "return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.squeeze(in2, axis=0), tf.reduce_max(in2)+1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.constant(2))\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "def transform(in1, in2):\n    marked_elements = tf.constant(in1)\n    mask = tf.constant(in2)\n    \n    marked_indices = tf.where(tf.equal(mask, 1))\n    marked_values = tf.gather_nd(marked_elements, marked_indices)\n    \n    product = tf.reduce_prod(marked_values, axis=1)\n    \n    return product.numpy()\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(tf.cast(in1, tf.float32), tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.tile([True], [tf.shape(in2)[0]])), 3)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2, axis=1), 3)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2 * tf.range(tf.shape(in2)[1]), axis=1), tf.shape(in2)[1])\n",
            "marked_elements = tf.where(in2)\nmarked_values = tf.gather(in1, marked_elements)\nproduct = tf.reduce_prod(marked_values, axis=1)\nreturn product\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\nresult = tf.reduce_prod(marked_elements, axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.reduce_max(in2) + 1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.constant(3))",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_sum(tf.reduce_max(tf.cast(in1, tf.int32)*tf.cast(in2, tf.int32), axis=1))",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "element_wise_product = tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.cast(in2, tf.bool)), tf.reduce_sum(in2, axis=1))\nreturn element_wise_product\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.reduce_max(in2)+1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.where(in2, in1, tf.ones_like(in1)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.cast(tf.where(in2)[:, 1], tf.int32), tf.reduce_max(in2) + 1), axis=1)",
            "return tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.cast(tf.ones_like(in2), tf.bool)), tf.reduce_max(in2) + 1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.reduce_max(in2)+1)",
            "marked_elements = tf.where(in2)\nproducts = tf.reduce_prod(tf.gather(in1, marked_elements), axis=1)\nreturn products\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "marked_elements = tf.where(in2)\nproducts = tf.reduce_prod(tf.gather(in1, marked_elements), axis=1)\nreturn products\n",
            "marked_indices = tf.where(tf.equal(in2, 1))\nmarked_values = tf.gather_nd(in1, marked_indices)\nproduct = tf.reduce_prod(marked_values, axis=1)\nreturn product\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n  ",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "marked_indices = tf.where(in2)\nmarked_elements = tf.gather_nd(in1, marked_indices)\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "marked_idx = tf.cast(tf.where(in2), tf.int32)\nmarked_values = tf.gather_nd(in1, marked_idx)\nresult = tf.reduce_prod(marked_values, axis=1)\nreturn result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, in2), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "marked_indices = tf.where(in2)\nmarked_elements = tf.gather_nd(in1, marked_indices)\nproduct = tf.reduce_prod(marked_elements, axis=1)\nreturn product\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.math.logical_and(tf.cast(in1, tf.bool), in2), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), 3)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.where(in2)[:, 0], tf.reduce_max(tf.reduce_sum(in2, axis=1))))",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "res = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\nreturn res\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(in2, tf.float32)), axis=1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2, axis=1), 3)\n    ",
            "def transform(in1, in2):\n    marked_values = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    result = tf.reduce_prod(marked_values, axis=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.boolean_mask(tf.range(tf.shape(in1)[0]), tf.cast(tf.reduce_any(in2, axis=1), tf.int32)), tf.constant(3)))",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.argmax(in2, 1), tf.reduce_max(in2)+1), 1)",
            "def transform(in1, in2):\n    marked_indices = tf.where(in2)\n    marked_elements = tf.gather_nd(in1, marked_indices)\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    marked_positions = tf.where(in2)\n    marked_elements = tf.gather_nd(in1, marked_positions)\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.shape(in2)[1])\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n",
            "def transform(in1, in2):\n    marked_indices = tf.where(in2)\n    marked_elements = tf.gather(in1, marked_indices)[:, 0]\n    products = tf.reduce_prod(marked_elements, axis=1)\n    return products\n    ",
            "def transform(in1, in2):\n    result = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.squeeze(in2, axis=0), tf.reduce_max(in2)+1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.constant(2))\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    marked_elements = tf.constant(in1)\n    mask = tf.constant(in2)\n    \n    marked_indices = tf.where(tf.equal(mask, 1))\n    marked_values = tf.gather_nd(marked_elements, marked_indices)\n    \n    product = tf.reduce_prod(marked_values, axis=1)\n    \n    return product.numpy()\n",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(tf.cast(in1, tf.float32), tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.tile([True], [tf.shape(in2)[0]])), 3)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2, axis=1), 3)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.reduce_sum(in2 * tf.range(tf.shape(in2)[1]), axis=1), tf.shape(in2)[1])\n    ",
            "def transform(in1, in2):\n    marked_elements = tf.where(in2)\n    marked_values = tf.gather(in1, marked_elements)\n    product = tf.reduce_prod(marked_values, axis=1)\n    return product\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    result = tf.reduce_prod(marked_elements, axis=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.reduce_max(in2) + 1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.constant(3))",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.reduce_max(tf.cast(in1, tf.int32)*tf.cast(in2, tf.int32), axis=1))",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    element_wise_product = tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.cast(in2, tf.bool)), tf.reduce_sum(in2, axis=1))\n    return element_wise_product\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.reduce_max(in2)+1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.where(in2, in1, tf.ones_like(in1)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.cast(tf.where(in2)[:, 1], tf.int32), tf.reduce_max(in2) + 1), axis=1)",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.boolean_mask(in2, tf.cast(tf.ones_like(in2), tf.bool)), tf.reduce_max(in2) + 1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), tf.reduce_max(in2)+1)",
            "def transform(in1, in2):\n    marked_elements = tf.where(in2)\n    products = tf.reduce_prod(tf.gather(in1, marked_elements), axis=1)\n    return products\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    marked_elements = tf.where(in2)\n    products = tf.reduce_prod(tf.gather(in1, marked_elements), axis=1)\n    return products\n    ",
            "def transform(in1, in2):\n    marked_indices = tf.where(tf.equal(in2, 1))\n    marked_values = tf.gather_nd(in1, marked_indices)\n    product = tf.reduce_prod(marked_values, axis=1)\n    return product\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n      ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    marked_indices = tf.where(in2)\n    marked_elements = tf.gather_nd(in1, marked_indices)\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    marked_idx = tf.cast(tf.where(in2), tf.int32)\n    marked_values = tf.gather_nd(in1, marked_idx)\n    result = tf.reduce_prod(marked_values, axis=1)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    marked_indices = tf.where(in2)\n    marked_elements = tf.gather_nd(in1, marked_indices)\n    product = tf.reduce_prod(marked_elements, axis=1)\n    return product\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.math.logical_and(tf.cast(in1, tf.bool), in2), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.math.unsorted_segment_prod(in1, tf.argmax(in2, axis=1), 3)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.math.unsorted_segment_prod(in1, tf.where(in2)[:, 0], tf.reduce_max(tf.reduce_sum(in2, axis=1))))",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    res = tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n    return res\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.multiply(in1, tf.cast(in2, tf.float32)), axis=1)"
        ],
        "tf_operators": {
            "tf.reduce_sum": 10,
            "tf.math.unsorted_segment_prod": 18,
            "tf.reduce_prod": 79,
            "tf.bool": 69,
            "tf.boolean_mask": 71,
            "tf.cast": 74,
            "tf.range": 2,
            "tf.shape": 4,
            "tf.constant": 4,
            "tf.math.reduce_sum": 1,
            "tf.int32": 4,
            "tf.reduce_any": 1,
            "tf.argmax": 8,
            "tf.reduce_max": 9,
            "tf.gather_nd": 7,
            "tf.where": 14,
            "tf.gather": 4,
            "tf.squeeze": 1,
            "tf.equal": 2,
            "tf.float32": 2,
            "tf.tile": 1,
            "tf.ones_like": 2,
            "tf.math.reduce_prod": 1,
            "tf.math.logical_and": 1,
            "tf.multiply": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                3
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                3
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                3
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                3
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                3
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                3
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 135,
            "shape_tuple": 0,
            "input_var": 217,
            "tf_int64": 0,
            "tf_int32": 5,
            "axis": 1,
            "provided": 0,
            "tf_float32": 2,
            "shape": 6,
            "tf_bool": 69
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "result = tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.multiply(tf.maximum(tf.square(in1), 0), tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "result = tf.square(tf.where(tf.less(tf.abs(in1), 1), 0, in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "'''\ndef transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n'''",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n",
            "def transform(in1):\n    mask = tf.cast(tf.abs(in1) < 1, tf.float32)\n    return tf.multiply(tf.square(in1), 1 - mask)\n",
            "condition = tf.greater_equal(tf.abs(in1), 1)\nsquared_values = tf.square(in1)\nreturn tf.where(condition, squared_values, tf.zeros_like(in1))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1), 1), tf.maximum(tf.abs(in1), 1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "condition = tf.greater(tf.abs(in1), 1)\nsquared_values = tf.square(tf.where(condition, in1, tf.zeros_like(in1)))\nreturn squared_values\n",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n",
            "def transform(in1):\n    return tf.where(tf.less_equal(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1), tf.square(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1)))\n",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "result_abs_less_than_1 = tf.less(tf.abs(in1), 1.0)\nsquared_elements = tf.square(tf.where(result_abs_less_than_1, tf.zeros_like(in1), in1))\nreturn squared_elements\n",
            "return tf.multiply(tf.maximum(tf.abs(in1) - 1, 0), tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.less_equal(tf.abs(in1), 1), 0, tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1), 1.0), tf.maximum(tf.abs(in1) >= 1.0, 0.0))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1) - 1, 0), tf.abs(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "def transform(in1):\n    mask = tf.cast(tf.less(tf.abs(in1), 1.0), tf.float32)\n    result = tf.square(tf.where(tf.equal(mask, 0), in1, tf.zeros_like(in1)))\n    return result",
            "return tf.multiply(tf.maximum(tf.abs(in1) - 1.0, 0.0), tf.maximum(tf.abs(in1) - 1.0, 0.0))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "result = tf.where(tf.math.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1), 1), tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32))",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1), tf.square(in1))",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1.0), tf.float32), tf.square(in1))\n",
            "return tf.square(tf.maximum(tf.abs(in1) - 1, 0))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.math.square(tf.where(tf.less(tf.abs(in1), 1), 0, in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "result = tf.square(tf.where(tf.less(tf.abs(in1), 1.0), tf.zeros_like(in1), in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros(tf.shape(in1)), tf.square(in1))",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "result = tf.square(tf.maximum(tf.abs(in1)-1, 0))\nreturn result\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), 0)\n",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "def transform(in1):\n    return tf.where(tf.math.abs(in1) < 1, 0, tf.square(in1))\n",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "result = tf.square(tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), in1))\nreturn result\n",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "zero_mask = tf.cast(tf.less(tf.abs(in1), 1), tf.float32)\nsquared_values = tf.square(tf.where(zero_mask, tf.zeros_like(in1), in1))\nreturn squared_values\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1**2), tf.fill(tf.shape(in1), 1))\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.math.maximum(tf.square(in1), 0)\n",
            "return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "return tf.where(tf.greater(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "return tf.multiply(tf.maximum(tf.abs(in1) >= 1, in1 ** 2), in1)\n",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "return tf.multiply(tf.maximum(tf.abs(in1) >= 1, in1), tf.maximum(tf.abs(in1) >= 1, in1))\n",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "return tf.minimum(tf.square(in1), 1)\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\nreturn result\n",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "return tf.where(tf.abs(in1) < 1, tf.constant(0.0), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    result = tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.square(in1), 0), tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    result = tf.square(tf.where(tf.less(tf.abs(in1), 1), 0, in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "'''\ndef transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n'''",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.square(tf.where(tf.greater_equal(tf.abs(in1), 1), in1, 0))\n    ",
            "def transform(in1):\n    mask = tf.cast(tf.abs(in1) < 1, tf.float32)\n    return tf.multiply(tf.square(in1), 1 - mask)\n",
            "def transform(in1):\n    condition = tf.greater_equal(tf.abs(in1), 1)\n    squared_values = tf.square(in1)\n    return tf.where(condition, squared_values, tf.zeros_like(in1))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1), 1), tf.maximum(tf.abs(in1), 1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "def transform(in1):\n    condition = tf.greater(tf.abs(in1), 1)\n    squared_values = tf.square(tf.where(condition, in1, tf.zeros_like(in1)))\n    return squared_values\n    ",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n",
            "def transform(in1):\n    return tf.where(tf.less_equal(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1), tf.square(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1)))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "def transform(in1):\n    result_abs_less_than_1 = tf.less(tf.abs(in1), 1.0)\n    squared_elements = tf.square(tf.where(result_abs_less_than_1, tf.zeros_like(in1), in1))\n    return squared_elements\n    ",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1) - 1, 0), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less_equal(tf.abs(in1), 1), 0, tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1), 1.0), tf.maximum(tf.abs(in1) >= 1.0, 0.0))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1) - 1, 0), tf.abs(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "def transform(in1):\n    mask = tf.cast(tf.less(tf.abs(in1), 1.0), tf.float32)\n    result = tf.square(tf.where(tf.equal(mask, 0), in1, tf.zeros_like(in1)))\n    return result",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1) - 1.0, 0.0), tf.maximum(tf.abs(in1) - 1.0, 0.0))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    result = tf.where(tf.math.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1), 1), tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1.0), tf.float32), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.square(tf.maximum(tf.abs(in1) - 1, 0))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.math.square(tf.where(tf.less(tf.abs(in1), 1), 0, in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    result = tf.square(tf.where(tf.less(tf.abs(in1), 1.0), tf.zeros_like(in1), in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros(tf.shape(in1)), tf.square(in1))",
            "def transform(in1):\n    result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n    ",
            "def transform(in1):\n    result = tf.square(tf.maximum(tf.abs(in1)-1, 0))\n    return result\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, 0, tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), 0)\n    ",
            "def transform(in1):\n    result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.where(tf.math.abs(in1) < 1, 0, tf.square(in1))\n",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "def transform(in1):\n    result = tf.square(tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))\n",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))",
            "def transform(in1):\n    zero_mask = tf.cast(tf.less(tf.abs(in1), 1), tf.float32)\n    squared_values = tf.square(tf.where(zero_mask, tf.zeros_like(in1), in1))\n    return squared_values\n    ",
            "def transform(in1):\n    return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1**2), tf.fill(tf.shape(in1), 1))\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.math.maximum(tf.square(in1), 0)\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.where(tf.greater(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1) >= 1, in1 ** 2), in1)\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), 0, tf.square(in1))\n",
            "def transform(in1):\n    return tf.multiply(tf.maximum(tf.abs(in1) >= 1, in1), tf.maximum(tf.abs(in1) >= 1, in1))\n    ",
            "def transform(in1):\n    result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.minimum(tf.square(in1), 1)\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    result = tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.constant(0.0), tf.square(in1))\n    ",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n    "
        ],
        "tf_operators": {
            "tf.square": 91,
            "tf.greater_equal": 19,
            "tf.abs": 97,
            "tf.zeros_like": 56,
            "tf.where": 79,
            "tf.less": 34,
            "tf.maximum": 11,
            "tf.float32": 9,
            "tf.cast": 12,
            "tf.multiply": 17,
            "tf.greater": 2,
            "tf.less_equal": 2,
            "tf.equal": 1,
            "tf.math.less": 1,
            "tf.math.square": 1,
            "tf.zeros": 1,
            "tf.shape": 2,
            "tf.math.abs": 1,
            "tf.fill": 1,
            "tf.math.maximum": 1,
            "tf.minimum": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 4,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                0
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 125,
            "shape_tuple": 0,
            "input_var": 258,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 2,
            "provided": 0,
            "tf_float32": 9,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "return tf.sparse.SparseTensor(in2, in1, dense_shape=[3, 5])",
            "values, indices = tf.math.top_k(tf.constant(in1), k=len(in1)//2)\nreturn tf.scatter_nd(tf.cast(in2, tf.int32), values, [3, 5])\n",
            "return tf.scatter_nd(in2, in1, tf.shape(in2, out_type=tf.int32))",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k = tf.math.top_k(values, k=tf.shape(indices)[1])\n    sparse_tensor = tf.sparse.SparseTensor(indices, top_k.values, dense_shape=[tf.shape(indices)[0], tf.reduce_max(indices) + 1])\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "values = in1\nindices = in2\nsparse_tensor = tf.sparse.SparseTensor(tf.transpose(indices), values, dense_shape=[3, 5])\nreturn tf.sparse.to_dense(sparse_tensor)\n",
            "return tf.scatter_nd(in2, in1, (3, 5))",
            "values, indices = tf.math.top_k(in1, k=in1.shape[0])\nreturn tf.sparse.SparseTensor(tf.cast(in2, tf.int64), tf.gather_nd(values, tf.cast(indices, tf.int32)), dense_shape=tf.shape(in1))\n",
            "return tf.scatter_nd(in2, in1, (3, 5))",
            "values = -in1\n_, indices = tf.math.top_k(values, k=in2.shape[0])\nupdates = tf.ones_like(indices, shape=[tf.shape(indices)[0]])\nreturn tf.tensor_scatter_nd_update(tensor=tf.zeros([in2.shape[0], tf.reduce_max(in2) + 1], dtype=in1.dtype), indices=in2, updates=indices)\n",
            "return tf.scatter_nd(in2, in1, [3,5])",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), tf.cast(in2, tf.int32), in1)",
            "return tf.sequence_mask(in1.shape[0], maxlen=tf.reduce_max(in2[:, 1]) + 1) * tf.scatter_nd(in2, in1, [in2.shape[0], tf.reduce_max(in2[:, 1]) + 1])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "values = tf.constant(in1)\nindices = tf.constant(in2)\ntop_vals, top_idxs = tf.nn.top_k(values, k=tf.shape(in2)[1])\nsparse_tensor = tf.scatter_nd(indices, top_vals, tf.shape(in2))\nreturn sparse_tensor\n",
            "values, indices = tf.unstack(in2, axis=1)\nreturn tf.sparse.SparseTensor(indices, values, dense_shape=tf.constant([3, 5]))\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "return tf.scatter_nd(in2, in1, shape=tf.reduce_max(in2, axis=0) + 1)\n",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2[:, 0]\n    updates = in1\n    shape = tf.reduce_max(indices) + 1\n    k_values, k_indices = tf.math.top_k(-values, k=2)\n    sparse_tensor = tf.tensor_scatter_nd_update(tf.zeros(shape), tf.expand_dims(k_indices, 1), tf.gather(values, k_indices))\n    return sparse_tensor\n",
            "return tf.sparse.SparseTensor(tf.unstack(in2, axis=1), tf.unstack(in1), [3, 5])",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    values, indices = in1, in2\n    top_values, top_indices = tf.math.top_k(values, k=tf.shape(values)[0])\n    sparse_tensor = tf.scatter_nd(indices=top_indices, updates=top_values, shape=tf.shape(indices))\n    return sparse_tensor\n",
            "values = in1\nindices = in2\nshape = tf.reduce_max(indices, axis=0) + 1\nreturn tf.scatter_nd(indices, values, shape)\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_values, top_indices = tf.nn.top_k(-values, k=tf.shape(in2)[1])\n    top_indices = tf.transpose(top_indices)\n    top_indices = tf.cast(top_indices, tf.int64)\n    depth = tf.shape(in1)[0]\n    return tf.one_hot(top_indices, depth)\n",
            "values = tf.gather(in1, in2[:, 1])\nindices = in2[:, 0]\nsparse_tensor = tf.scatter_nd(tf.expand_dims(indices, 1), values, tf.reduce_max(indices) + 1)\nreturn sparse_tensor\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "return tf.scatter_nd(in2, in1[:, 0], in1[:, 1])",
            "return tf.squeeze(tf.scatter_nd(in2, in1, tf.shape(in2)[:1]), axis=-1)",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    top_values, top_indices = tf.math.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.sparse.SparseTensor(indices=in2, values=top_values, dense_shape=(3, 5))\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "values, indices = tf.unstack(in2, axis=1)\nreturn tf.scatter_nd(indices, values, shape=(3, 5))\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.tensor_scatter_nd_update(tf.zeros((3, 5), dtype=tf.int32), in2, tf.squeeze(in1, axis=1))",
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1.values, in1.dense_shape)",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2\n    top_values, top_indices = tf.math.top_k(-values, k=in2.shape[0])\n    output = tf.scatter_nd(indices=top_indices, updates=top_values, shape=tf.reduce_max(top_indices, axis=0) + 1)\n    return output\n",
            "return tf.scatter_nd(in2, in1, (3, 5))",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "return tf.scatter_nd(in2, in1, tf.cast(tf.ones([tf.shape(in2)[0]]), tf.int32))",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "indices = tf.reverse(in2, axis=[1])\nupdates = tf.gather(in1, tf.squeeze(in2[:, 1], axis=1))\nreturn tf.scatter_nd(indices, updates, [3, 5])\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "return tf.sparse.SparseTensor(indices=tf.cast(in2, tf.int64), values=in1, dense_shape=[3, 5])",
            "return tf.scatter_nd(in2, in1, shape=[3, 5])",
            "values, indices = tf.math.top_k(in1)\nreturn tf.scatter_nd(indices, values, tf.shape(in1))\n",
            "return tf.scatter_nd(in2, in1, tf.constant([3, 5]))",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.scatter_nd(in2, in1, shape=(3, 5))",
            "return tf.scatter_nd(in2, in1.values, (3, 5))",
            "values, indices = tf.math.top_k(in1, k)\nreturn tf.scatter_nd(indices, values, tf.shape(in2))\n",
            "return tf.sparse.SparseTensor(tf.to_int64(in2), in1, [3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    result = tf.sparse.SparseTensor(indices=in2, values=tf.gather(values, indices), dense_shape=in2.shape)\n    return tf.sparse.to_dense(result)\n",
            "values = tf.unstack(in1)\nindices = in2\nreturn tf.sparse.SparseTensor(indices, values, dense_shape=tf.constant([3, 5], dtype=tf.int64))\n",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    topk_values, topk_indices = tf.math.top_k(values, k=tf.shape(values)[0])\n    sparse_tensor = tf.scatter_nd(indices=topk_indices, updates=topk_values, shape=tf.shape(in2, out_type=tf.int64))\n    return sparse_tensor\n",
            "values = in1\nindices = in2\nreturn tf.cast(tf.scatter_nd(indices, values, shape=[3, 5]), tf.int32)\n",
            "return tf.tensor_scatter_nd_update(tf.zeros((3, 5), dtype=tf.int32), in2, tf.squeeze(in1, axis=1))",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in2, axis=0) + 1)",
            "return tf.scatter_nd(in2, in1, shape=[3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "values = tf.constant(in1)\nindices = tf.constant(in2)\ntop_k_indices = tf.nn.top_k(values, k=tf.shape(values)[0]).indices\nmask = tf.sequence_mask(in2.shape[0], tf.shape(values)[0])\nsparse_tensor = tf.boolean_mask(top_k_indices, mask)\nreturn sparse_tensor\n",
            "return tf.scatter_nd(in2, in1, shape=[3, 5])",
            "values = in1\nindices = in2\ndepth = tf.shape(in1)[0]\nreturn tf.scatter_nd(indices, values, [depth, tf.reduce_max(indices)+1])\n",
            "\nvalues = in1\nindices = in2\nshape = tf.reduce_max(indices, axis=0) + 1\nreturn tf.scatter_nd(indices, values, shape)\n",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    top_k_values, top_k_indices = tf.math.top_k(values, k=tf.shape(in2)[1])\n    scattered_indices = tf.stack([tf.range(tf.shape(in2)[0])[:, tf.newaxis], top_k_indices], axis=-1)\n    sparse_tensor = tf.tensor_scatter_nd_update(tf.zeros(tf.concat([tf.shape(in2), [tf.reduce_max(top_k_indices) + 1]], axis=0), dtype=tf.int32), scattered_indices, top_k_values)\n    return sparse_tensor\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.scatter_nd(indices=tf.cast(in2, tf.int32), updates=values, shape=tf.reduce_max(in2, axis=0) + 1)\n    return sparse_tensor\n",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2\n    top_k_values, top_k_indices = tf.nn.top_k(values, k=tf.shape(in2)[1])\n    sparse_tensor = tf.sparse.SparseTensor(indices=indices, values=top_k_values, dense_shape=[tf.shape(in2)[0], tf.reduce_max(top_k_indices)+1])\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(tf.shape(in2)[0], tf.reduce_max(in2, axis=0)[1] + 1))",
            "return tf.scatter_nd(in2, in1, tf.shape(in2)[:-1])",
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "values = tf.constant(in1)\nindices = tf.constant(in2)\ntop_k_values, top_k_indices = tf.math.top_k(values, k=tf.shape(in2)[1])\noutput = tf.scatter_nd(indices=top_k_indices, updates=top_k_values, shape=(tf.shape(in2)[0], tf.reduce_max(in2) + 1))\nreturn output\n",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    k = tf.nn.top_k(values, k=tf.shape(values)[-1])\n    sparse_tensor = tf.scatter_nd(indices, k.values, [tf.shape(indices)[0], tf.reduce_max(indices) + 1])\n    return sparse_tensor\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(tf.transpose(in2), in1, dense_shape=[3, 5])",
            "values, indices = tf.math.top_k(tf.convert_to_tensor(in1), sorted=True)\nreturn tf.scatter_nd(indices, values, tuple(tf.reduce_max(indices, axis=0) + 1))\n",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(tf.transpose(in2), in1, [3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=tf.squeeze(in1), dense_shape=(3, 5))",
            "values = in1\nindices = in2\nreturn tf.scatter_nd(indices, values, [3, 5])\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "return tf.sparse.SparseTensor(in2, in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(tf.transpose(in2), in1, (3, 4))",
            "values = in1\nindices = in2\nreturn tf.scatter_nd(indices, values, shape=(3, 5))\n",
            "values = tf.gather(in1, tf.squeeze(in2[:, 1]))\nindices = tf.transpose(in2)\nshape = tf.reduce_max(in2, axis=0) + 1\nreturn tf.scatter_nd(indices, values, shape)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, [3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, dense_shape=[3, 5])"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(in2, in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(tf.constant(in1), k=len(in1)//2)\n    return tf.scatter_nd(tf.cast(in2, tf.int32), values, [3, 5])\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in2, out_type=tf.int32))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k = tf.math.top_k(values, k=tf.shape(indices)[1])\n    sparse_tensor = tf.sparse.SparseTensor(indices, top_k.values, dense_shape=[tf.shape(indices)[0], tf.reduce_max(indices) + 1])\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    sparse_tensor = tf.sparse.SparseTensor(tf.transpose(indices), values, dense_shape=[3, 5])\n    return tf.sparse.to_dense(sparse_tensor)\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, (3, 5))",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1, k=in1.shape[0])\n    return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), tf.gather_nd(values, tf.cast(indices, tf.int32)), dense_shape=tf.shape(in1))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, (3, 5))",
            "def transform(in1, in2):\n    values = -in1\n    _, indices = tf.math.top_k(values, k=in2.shape[0])\n    updates = tf.ones_like(indices, shape=[tf.shape(indices)[0]])\n    return tf.tensor_scatter_nd_update(tensor=tf.zeros([in2.shape[0], tf.reduce_max(in2) + 1], dtype=in1.dtype), indices=in2, updates=indices)\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3,5])",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), tf.cast(in2, tf.int32), in1)",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1.shape[0], maxlen=tf.reduce_max(in2[:, 1]) + 1) * tf.scatter_nd(in2, in1, [in2.shape[0], tf.reduce_max(in2[:, 1]) + 1])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_vals, top_idxs = tf.nn.top_k(values, k=tf.shape(in2)[1])\n    sparse_tensor = tf.scatter_nd(indices, top_vals, tf.shape(in2))\n    return sparse_tensor\n    ",
            "def transform(in1, in2):\n    values, indices = tf.unstack(in2, axis=1)\n    return tf.sparse.SparseTensor(indices, values, dense_shape=tf.constant([3, 5]))\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, shape=tf.reduce_max(in2, axis=0) + 1)\n    ",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2[:, 0]\n    updates = in1\n    shape = tf.reduce_max(indices) + 1\n    k_values, k_indices = tf.math.top_k(-values, k=2)\n    sparse_tensor = tf.tensor_scatter_nd_update(tf.zeros(shape), tf.expand_dims(k_indices, 1), tf.gather(values, k_indices))\n    return sparse_tensor\n",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.unstack(in2, axis=1), tf.unstack(in1), [3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    values, indices = in1, in2\n    top_values, top_indices = tf.math.top_k(values, k=tf.shape(values)[0])\n    sparse_tensor = tf.scatter_nd(indices=top_indices, updates=top_values, shape=tf.shape(indices))\n    return sparse_tensor\n",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    shape = tf.reduce_max(indices, axis=0) + 1\n    return tf.scatter_nd(indices, values, shape)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_values, top_indices = tf.nn.top_k(-values, k=tf.shape(in2)[1])\n    top_indices = tf.transpose(top_indices)\n    top_indices = tf.cast(top_indices, tf.int64)\n    depth = tf.shape(in1)[0]\n    return tf.one_hot(top_indices, depth)\n",
            "def transform(in1, in2):\n    values = tf.gather(in1, in2[:, 1])\n    indices = in2[:, 0]\n    sparse_tensor = tf.scatter_nd(tf.expand_dims(indices, 1), values, tf.reduce_max(indices) + 1)\n    return sparse_tensor\n    ",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1[:, 0], in1[:, 1])",
            "def transform(in1, in2):\n    return tf.squeeze(tf.scatter_nd(in2, in1, tf.shape(in2)[:1]), axis=-1)",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.reduce_max(in1) + 1)",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    top_values, top_indices = tf.math.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.sparse.SparseTensor(indices=in2, values=top_values, dense_shape=(3, 5))\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "def transform(in1, in2):\n    values, indices = tf.unstack(in2, axis=1)\n    return tf.scatter_nd(indices, values, shape=(3, 5))\n    ",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros((3, 5), dtype=tf.int32), in2, tf.squeeze(in1, axis=1))",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1.values, in1.dense_shape)",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2\n    top_values, top_indices = tf.math.top_k(-values, k=in2.shape[0])\n    output = tf.scatter_nd(indices=top_indices, updates=top_values, shape=tf.reduce_max(top_indices, axis=0) + 1)\n    return output\n",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, (3, 5))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.cast(tf.ones([tf.shape(in2)[0]]), tf.int32))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    indices = tf.reverse(in2, axis=[1])\n    updates = tf.gather(in1, tf.squeeze(in2[:, 1], axis=1))\n    return tf.scatter_nd(indices, updates, [3, 5])\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=tf.cast(in2, tf.int64), values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, shape=[3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1)\n    return tf.scatter_nd(indices, values, tf.shape(in1))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.constant([3, 5]))",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, shape=(3, 5))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1.values, (3, 5))",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(in1, k)\n    return tf.scatter_nd(indices, values, tf.shape(in2))\n    ",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.to_int64(in2), in1, [3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    result = tf.sparse.SparseTensor(indices=in2, values=tf.gather(values, indices), dense_shape=in2.shape)\n    return tf.sparse.to_dense(result)\n",
            "def transform(in1, in2):\n    values = tf.unstack(in1)\n    indices = in2\n    return tf.sparse.SparseTensor(indices, values, dense_shape=tf.constant([3, 5], dtype=tf.int64))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, [3, 5])",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    topk_values, topk_indices = tf.math.top_k(values, k=tf.shape(values)[0])\n    sparse_tensor = tf.scatter_nd(indices=topk_indices, updates=topk_values, shape=tf.shape(in2, out_type=tf.int64))\n    return sparse_tensor\n",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    return tf.cast(tf.scatter_nd(indices, values, shape=[3, 5]), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros((3, 5), dtype=tf.int32), in2, tf.squeeze(in1, axis=1))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.reduce_max(in2, axis=0) + 1)",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k_indices = tf.nn.top_k(values, k=tf.shape(values)[0]).indices\n    mask = tf.sequence_mask(in2.shape[0], tf.shape(values)[0])\n    sparse_tensor = tf.boolean_mask(top_k_indices, mask)\n    return sparse_tensor\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, shape=[3, 5])",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    depth = tf.shape(in1)[0]\n    return tf.scatter_nd(indices, values, [depth, tf.reduce_max(indices)+1])\n    ",
            "def transform(in1, in2):\n    \n    values = in1\n    indices = in2\n    shape = tf.reduce_max(indices, axis=0) + 1\n    return tf.scatter_nd(indices, values, shape)\n    ",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    top_k_values, top_k_indices = tf.math.top_k(values, k=tf.shape(in2)[1])\n    scattered_indices = tf.stack([tf.range(tf.shape(in2)[0])[:, tf.newaxis], top_k_indices], axis=-1)\n    sparse_tensor = tf.tensor_scatter_nd_update(tf.zeros(tf.concat([tf.shape(in2), [tf.reduce_max(top_k_indices) + 1]], axis=0), dtype=tf.int32), scattered_indices, top_k_values)\n    return sparse_tensor\n",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.nn.top_k(in1, k=in1.shape[0])\n    sparse_tensor = tf.scatter_nd(indices=tf.cast(in2, tf.int32), updates=values, shape=tf.reduce_max(in2, axis=0) + 1)\n    return sparse_tensor\n",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = in2\n    top_k_values, top_k_indices = tf.nn.top_k(values, k=tf.shape(in2)[1])\n    sparse_tensor = tf.sparse.SparseTensor(indices=indices, values=top_k_values, dense_shape=[tf.shape(in2)[0], tf.reduce_max(top_k_indices)+1])\n    return tf.sparse.to_dense(sparse_tensor)\n",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(tf.shape(in2)[0], tf.reduce_max(in2, axis=0)[1] + 1))",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.shape(in2)[:-1])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "def transform(in1, in2):\n    values = tf.constant(in1)\n    indices = tf.constant(in2)\n    top_k_values, top_k_indices = tf.math.top_k(values, k=tf.shape(in2)[1])\n    output = tf.scatter_nd(indices=top_k_indices, updates=top_k_values, shape=(tf.shape(in2)[0], tf.reduce_max(in2) + 1))\n    return output\n    ",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    k = tf.nn.top_k(values, k=tf.shape(values)[-1])\n    sparse_tensor = tf.scatter_nd(indices, k.values, [tf.shape(indices)[0], tf.reduce_max(indices) + 1])\n    return sparse_tensor\n",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.transpose(in2), in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    values, indices = tf.math.top_k(tf.convert_to_tensor(in1), sorted=True)\n    return tf.scatter_nd(indices, values, tuple(tf.reduce_max(indices, axis=0) + 1))\n    ",
            "def transform(in1, in2):\n    return tf.scatter_nd(in2, in1, tf.reduce_max(in1)+1)",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.transpose(in2), in1, [3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=tf.squeeze(in1), dense_shape=(3, 5))",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    return tf.scatter_nd(indices, values, [3, 5])\n    ",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(tf.zeros([3, 5], dtype=tf.int32), in2, in1)",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(in2, in1, dense_shape=[3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.transpose(in2), in1, (3, 4))",
            "def transform(in1, in2):\n    values = in1\n    indices = in2\n    return tf.scatter_nd(indices, values, shape=(3, 5))\n    ",
            "def transform(in1, in2):\n    values = tf.gather(in1, tf.squeeze(in2[:, 1]))\n    indices = tf.transpose(in2)\n    shape = tf.reduce_max(in2, axis=0) + 1\n    return tf.scatter_nd(indices, values, shape)\n    ",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, [3, 5])",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "def transform(in1, in2):\n    return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, dense_shape=[3, 5])"
        ],
        "tf_operators": {
            "tf.sparse.SparseTensor": 38,
            "tf.constant": 12,
            "tf.int32": 15,
            "tf.math.top_k": 14,
            "tf.scatter_nd": 49,
            "tf.cast": 12,
            "tf.shape": 20,
            "tf.reduce_max": 22,
            "tf.sparse.to_dense": 5,
            "tf.transpose": 6,
            "tf.gather_nd": 1,
            "tf.int64": 9,
            "tf.tensor_scatter_nd_update": 11,
            "tf.ones_like": 1,
            "tf.zeros": 11,
            "tf.sequence_mask": 2,
            "tf.nn.top_k": 7,
            "tf.unstack": 4,
            "tf.gather": 5,
            "tf.expand_dims": 2,
            "tf.one_hot": 1,
            "tf.squeeze": 6,
            "tf.ones": 1,
            "tf.reverse": 1,
            "tf.to_int64": 1,
            "tf.boolean_mask": 1,
            "tf.range": 1,
            "tf.newaxis": 1,
            "tf.concat": 1,
            "tf.stack": 1,
            "tf.convert_to_tensor": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3,
                5
            ],
            [
                2,
                3,
                5
            ],
            [],
            [
                1
            ],
            [
                3,
                5
            ],
            [
                1,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                3,
                5
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1,
                1,
                0,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1
            ],
            [
                1,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                2,
                1
            ],
            [
                1,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                1,
                0
            ],
            [
                1,
                0,
                1,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                3,
                5
            ],
            [
                0,
                3,
                5
            ],
            [
                1,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5,
                1
            ],
            [],
            [
                0,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                3,
                5
            ],
            [
                1,
                1,
                1,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0
            ],
            [
                3,
                5
            ],
            [
                3,
                5,
                1
            ],
            [
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                0,
                0
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                -1,
                1,
                0
            ],
            [
                3,
                5
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                0,
                0,
                1,
                1
            ],
            [
                -1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1,
                0,
                1
            ],
            [
                -1,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                4
            ],
            [
                3,
                5
            ],
            [
                1,
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 1
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 79,
            "shape_tuple": 17,
            "input_var": 293,
            "tf_int64": 9,
            "tf_int32": 16,
            "axis": 2,
            "provided": 90,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "indices = tf.constant(in2, dtype=tf.int32)\nreturn tf.gather(in1, tf.concat([tf.range(indices), tf.range(indices + 1, tf.shape(in1)[0])], axis=0))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(arr.shape[0]), idx))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    output = tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n    return output\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(in1.shape[0]), in2)))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.size(in1)), in2))[:, 0])\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.size(in1))], 0))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(len(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], 0))\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "output = tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], axis=0))\nreturn output\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.gather(in1, [i for i in range(len(in1)) if i != in2])\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(in1.shape[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.boolean_mask(tf.range(tf.shape(in1)[0]), tf.not_equal(tf.range(tf.shape(in1)[0]), in2)))\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.gather_nd(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2)))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    indices = tf.constant(in2, dtype=tf.int32)\n    return tf.gather(in1, tf.concat([tf.range(indices), tf.range(indices + 1, tf.shape(in1)[0])], axis=0))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(arr.shape[0]), idx))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    output = tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n    return output\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(in1.shape[0]), in2)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.size(in1)), in2))[:, 0])\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.size(in1))], 0))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(len(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], 0))\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    output = tf.gather(in1, tf.concat([tf.range(in2), tf.range(in2+1, tf.shape(in1)[0])], axis=0))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, [i for i in range(len(in1)) if i != in2])\n    ",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(in1.shape[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.boolean_mask(tf.range(tf.shape(in1)[0]), tf.not_equal(tf.range(tf.shape(in1)[0]), in2)))\n",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))"
        ],
        "tf_operators": {
            "tf.shape": 71,
            "tf.range": 89,
            "tf.boolean_mask": 76,
            "tf.not_equal": 85,
            "tf.gather": 14,
            "tf.where": 9,
            "tf.concat": 14,
            "tf.constant": 1,
            "tf.int32": 1,
            "tf.size": 14,
            "tf.gather_nd": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 103,
            "shape_tuple": 0,
            "input_var": 313,
            "tf_int64": 0,
            "tf_int32": 1,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vec = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vec\n",
            "max_val = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_val), dtype=tf.int32)\nreturn output.numpy()\n  ",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.math.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "max_value = tf.reduce_max(in1)\nbinary_vector = tf.where(tf.equal(in1, max_value), 1, 0)\nreturn binary_vector\n",
            "max_val = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1)) * 1",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), depth=in1.shape[0])\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_elem), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "return tf.one_hot(tf.argmax(in1), depth=tf.size(in1), dtype=tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "max_val = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n",
            "def transform(in1):\n    max_value = tf.reduce_max(in1)\n    binary_vector = tf.where(tf.equal(in1, max_value), 1, 0)\n    return binary_vector\n",
            "max_val = tf.reduce_max(in1)\nresult = tf.cast(tf.equal(in1, max_val), tf.int32)\nreturn result\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    result = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return result\n",
            "def transform(in1):\n    max_idx = tf.argmax(in1)\n    result = tf.one_hot(max_idx, tf.shape(in1)[0], dtype=tf.int32)\n    return result\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.math.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "max_val = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_elem), dtype=tf.int32)\n    return binary_vector\n",
            "max_value = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_value), tf.int32)\nreturn output\n",
            "return tf.cast(in1 == tf.reduce_max(in1), tf.int32)",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "return tf.cast(tf.math.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "max_val = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.equal(in1, max_val)\n    return tf.cast(binary_vector, tf.int32)\n",
            "result = tf.equal(in1, tf.reduce_max(in1))\nreturn tf.cast(result, tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.cast(tf.math.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "max_elem = tf.reduce_max(in1)\nresult = tf.where(tf.equal(in1, max_elem), tf.ones_like(in1), tf.zeros_like(in1))\nreturn result\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n ",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(in1 == tf.reduce_max(in1), tf.int32)\n",
            "return tf.where(tf.equal(in1, tf.reduce_max(in1)), 1, 0)",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.one_hot(tf.argmax(in1) , depth=tf.size(in1), dtype=tf.int32)\n    return binary_vector\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.one_hot(tf.argmax(in1), depth=in1.shape[0])",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "\nreturn tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "max_val = tf.reduce_max(in1)\noutput = tf.cast(tf.equal(in1, max_val), tf.int32)\nreturn output\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), dtype=tf.int32)",
            "max_value = tf.reduce_max(in1)\nreturn tf.cast(tf.equal(in1, max_value), tf.int32)\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "\nreturn tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vec = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vec\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    output = tf.cast(tf.equal(in1, max_val), dtype=tf.int32)\n    return output.numpy()\n      ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.math.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_value = tf.reduce_max(in1)\n    binary_vector = tf.where(tf.equal(in1, max_value), 1, 0)\n    return binary_vector\n    ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1)) * 1",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), depth=in1.shape[0])\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_elem), tf.int32)\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), depth=tf.size(in1), dtype=tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), tf.size(in1), dtype=tf.int32)\n",
            "def transform(in1):\n    max_value = tf.reduce_max(in1)\n    binary_vector = tf.where(tf.equal(in1, max_value), 1, 0)\n    return binary_vector\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    result = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return result\n    ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    result = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return result\n",
            "def transform(in1):\n    max_idx = tf.argmax(in1)\n    result = tf.one_hot(max_idx, tf.shape(in1)[0], dtype=tf.int32)\n    return result\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.math.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_elem), dtype=tf.int32)\n    return binary_vector\n",
            "def transform(in1):\n    max_value = tf.reduce_max(in1)\n    output = tf.cast(tf.equal(in1, max_value), tf.int32)\n    return output\n    ",
            "def transform(in1):\n    return tf.cast(in1 == tf.reduce_max(in1), tf.int32)",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    return tf.cast(tf.math.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.equal(in1, max_val)\n    return tf.cast(binary_vector, tf.int32)\n",
            "def transform(in1):\n    result = tf.equal(in1, tf.reduce_max(in1))\n    return tf.cast(result, tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.cast(tf.math.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    result = tf.where(tf.equal(in1, max_elem), tf.ones_like(in1), tf.zeros_like(in1))\n    return result\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(in1 == tf.reduce_max(in1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.where(tf.equal(in1, tf.reduce_max(in1)), 1, 0)",
            "def transform(in1):\n    max_elem = tf.reduce_max(in1)\n    binary_vector = tf.one_hot(tf.argmax(in1) , depth=tf.size(in1), dtype=tf.int32)\n    return binary_vector\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    return tf.one_hot(tf.argmax(in1), depth=in1.shape[0])",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    \n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    output = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return output\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), dtype=tf.int32)",
            "def transform(in1):\n    max_value = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_value), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    \n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    ",
            "def transform(in1):\n    return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n    "
        ],
        "tf_operators": {
            "tf.reduce_max": 95,
            "tf.equal": 88,
            "tf.int32": 66,
            "tf.cast": 62,
            "tf.math.equal": 4,
            "tf.where": 4,
            "tf.argmax": 6,
            "tf.one_hot": 6,
            "tf.size": 3,
            "tf.shape": 1,
            "tf.ones_like": 1,
            "tf.zeros_like": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 10,
            "shape_tuple": 0,
            "input_var": 201,
            "tf_int64": 0,
            "tf_int32": 66,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "return tf.gather(in1, in2)",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(params=in1, indices=in2, axis=1)",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(params=in1, indices=in2, axis=0)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n",
            "output = tf.gather_nd(in1, in2)\nreturn output\n",
            "\nreturn tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n  ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "output = tf.gather(in1, in2)\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2, axis=1)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2, axis=0)\n",
            "return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose([in2]))\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "output = tf.gather_nd(in1, in2)\nreturn output\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2, axis=1)\n",
            "return tf.gather_nd(in1, tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "result = tf.gather_nd(in1, tf.expand_dims(in2, 1))[:, 0]\nreturn result\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=0)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)",
            "return tf.gather(tf.transpose(in1), in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2)",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n",
            "return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(params=in1, indices=in2, axis=0)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(tf.transpose(in1), in2)",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=1)",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=0)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n",
            "def transform(in1, in2):\n    output = tf.gather_nd(in1, in2)\n    return output\n    ",
            "def transform(in1, in2):\n    \n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n      ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    output = tf.gather(in1, in2)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose([in2]))\n",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    output = tf.gather_nd(in1, in2)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack((tf.range(tf.shape(in1)[0]), in2), axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    result = tf.gather_nd(in1, tf.expand_dims(in2, 1))[:, 0]\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=0)\n",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(tf.transpose(in1), in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.shape(in2)[0])], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "def transform(in1, in2):\n    return tf.gather(params=in1, indices=in2, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(tf.transpose(in1), in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n    ",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(in2, 1))\n",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, in2)\n    "
        ],
        "tf_operators": {
            "tf.gather": 73,
            "tf.size": 10,
            "tf.range": 20,
            "tf.gather_nd": 27,
            "tf.stack": 20,
            "tf.expand_dims": 4,
            "tf.shape": 10,
            "tf.transpose": 3
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0,
                1
            ],
            [
                1
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 41,
            "shape_tuple": 0,
            "input_var": 219,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 0,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)\n",
            "return tf.cast(tf.unstack(in1, axis=1), tf.int32)\n",
            "return tf.math.segment_sum(in1, tf.range(in1.get_shape().as_list()[0]//2))",
            "return tf.math.cumsum(tf.reshape(in1, (4, 2, 3)), axis=1)[:, -1, :]\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]//2), axis=0)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1)-1, 2)], axis=0), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), 1)\n",
            "\nreturn tf.math.cumsum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0])//2)",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "row_sum = tf.reduce_sum(in1, axis=0)\nresult = tf.reshape(row_sum, (-1, 3))\nreturn result\n",
            "return tf.math.unsorted_segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2, tf.shape(in1)[0] // 2)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=1), axis=1)",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1)-1, 2)], axis=2), axis=2)\n",
            "result = tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=2), axis=0)\n",
            "return tf.math.segment_sum(in1, tf.tile(tf.constant([0, 1], tf.int32), tf.expand_dims(tf.shape(in1)[0] // 2, 0)))\n",
            "return tf.math.unsorted_segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2, tf.shape(in1)[0] // 2)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=2)\n",
            "return tf.math.segment_sum(in1, tf.range(in1.shape[0]) // 2)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[-1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[-1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.math.unsorted_segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2, tf.shape(in1)[0] // 2)\n",
            "def transform(in1):\n    result = tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n    return result\n",
            "sums = tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\nreturn sums\n",
            "return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3], dtype=tf.int32))\n",
            "return tf.math.cumsum(tf.transpose(in1), axis=0)[1::2] - tf.math.cumsum(tf.transpose(in1), axis=0)[::2]\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)",
            "return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3], dtype=tf.int32))\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=2), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1], dtype=tf.int64), tf.constant([2, 2], dtype=tf.int64)))\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1), 2)], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.fill(tf.shape(in1)[0], 2))\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, 8, 2)], axis=2), axis=2)\n",
            "return tf.reshape(tf.math.segment_sum(tf.reshape(in1, [-1]), tf.repeat(tf.range(in1.shape[0] // 2), 2)), [-1, in1.shape[1]])\n",
            "return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=2), axis=0)",
            "return tf.math.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1]), len(in1)//2))\n",
            "return tf.reduce_sum(tf.stack([in1[:-1], in1[1:]], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.concat([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=2), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3]))\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)",
            "return tf.math.segment_sum(in1, tf.repeat(tf.range(tf.shape(in1)[0] // 2), 2))",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1), 2)], axis=0), axis=1)\n",
            "sums = tf.roll(in1, shift=-1, axis=0) + in1\nreturn tf.reduce_sum(sums, axis=1)\n",
            "return tf.math.cumsum(tf.transpose(in1), axis=1)[:, 1::2] - tf.math.cumsum(tf.transpose(in1), axis=1)[:, ::2]\n",
            "return tf.math.segment_sum(in1, tf.math.range(4))\n",
            "return tf.math.segment_sum(in1, tf.repeat(tf.range(2), len(in1)//2))\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=0), axis=0)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (in1.shape[0]//2, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.concat([tf.zeros(in1.shape[0] - 1, dtype=tf.int32), tf.ones(in1.shape[0] - 1, dtype=tf.int32)], axis=0))\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=1), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n",
            "return tf.math.segment_sum(in1, segment_ids=tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.concat([in1[i:i+2] for i in range(0, len(in1), 2)], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "return tf.cast(tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1), [-1, 3]), tf.int32)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "cumsum = tf.math.cumsum(in1, exclusive=False, axis=0)\nresult = tf.subtract(cumsum[1::2], cumsum[::2])\nreturn result\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "return tf.math.cumsum(in1, axis=1) - tf.concat([tf.zeros((tf.shape(in1)[0], 1), dtype=tf.int32), tf.math.cumsum(in1, axis=1)[:, :-1]], axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0]-1, 2)], axis=1), axis=1)\n",
            "return tf.math.unsorted_segment_sum(in1, tf.repeat(tf.range(4), 2), 4)\n",
            "out = tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1], dtype=tf.int32), tf.shape(in1)[0]//2))\nreturn out\n",
            "return tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1]), in1.shape[0]//2))\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n",
            "row_sums = tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\nreturn row_sums\n",
            "return tf.math.cumsum(in1, axis=0)[1::2] - tf.math.cumsum(in1, axis=0)[::2]\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0]-1, 2)], axis=1), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3]))\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    return tf.cast(tf.unstack(in1, axis=1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(in1.get_shape().as_list()[0]//2))",
            "def transform(in1):\n    return tf.math.cumsum(tf.reshape(in1, (4, 2, 3)), axis=1)[:, -1, :]\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]//2), axis=0)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1)-1, 2)], axis=0), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), 1)\n    ",
            "def transform(in1):\n    \n    return tf.math.cumsum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0])//2)",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    row_sum = tf.reduce_sum(in1, axis=0)\n    result = tf.reshape(row_sum, (-1, 3))\n    return result\n    ",
            "def transform(in1):\n    return tf.math.unsorted_segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2, tf.shape(in1)[0] // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=1), axis=1)",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1)-1, 2)], axis=2), axis=2)\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=2), axis=0)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.tile(tf.constant([0, 1], tf.int32), tf.expand_dims(tf.shape(in1)[0] // 2, 0)))\n    ",
            "def transform(in1):\n    return tf.math.unsorted_segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2, tf.shape(in1)[0] // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=2)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(in1.shape[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[-1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[-1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    return tf.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.unsorted_segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2, tf.shape(in1)[0] // 2)\n    ",
            "def transform(in1):\n    result = tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n    return result\n",
            "def transform(in1):\n    sums = tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    return sums\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3], dtype=tf.int32))\n    ",
            "def transform(in1):\n    return tf.math.cumsum(tf.transpose(in1), axis=0)[1::2] - tf.math.cumsum(tf.transpose(in1), axis=0)[::2]\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3], dtype=tf.int32))\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=2), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1], dtype=tf.int64), tf.constant([2, 2], dtype=tf.int64)))\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1), 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.fill(tf.shape(in1)[0], 2))\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, 8, 2)], axis=2), axis=2)\n    ",
            "def transform(in1):\n    return tf.reshape(tf.math.segment_sum(tf.reshape(in1, [-1]), tf.repeat(tf.range(in1.shape[0] // 2), 2)), [-1, in1.shape[1]])\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=2), axis=0)",
            "def transform(in1):\n    return tf.math.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1]), len(in1)//2))\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[:-1], in1[1:]], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.concat([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=2), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3]))\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.repeat(tf.range(tf.shape(in1)[0] // 2), 2))",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, len(in1), 2)], axis=0), axis=1)\n    ",
            "def transform(in1):\n    sums = tf.roll(in1, shift=-1, axis=0) + in1\n    return tf.reduce_sum(sums, axis=1)\n    ",
            "def transform(in1):\n    return tf.math.cumsum(tf.transpose(in1), axis=1)[:, 1::2] - tf.math.cumsum(tf.transpose(in1), axis=1)[:, ::2]\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.math.range(4))\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.repeat(tf.range(2), len(in1)//2))\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=0), axis=0)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (in1.shape[0]//2, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.concat([tf.zeros(in1.shape[0] - 1, dtype=tf.int32), tf.ones(in1.shape[0] - 1, dtype=tf.int32)], axis=0))\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, [-1, 2, tf.shape(in1)[1]]), axis=1)\n",
            "def transform(in1):\n    return tf.math.segment_sum(in1, segment_ids=tf.range(tf.shape(in1)[0]) // 2)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.concat([in1[i:i+2] for i in range(0, len(in1), 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    return tf.cast(tf.reshape(tf.reduce_sum(tf.reshape(in1, [-1, 2, 3]), axis=1), [-1, 3]), tf.int32)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1)\n",
            "def transform(in1):\n    cumsum = tf.math.cumsum(in1, exclusive=False, axis=0)\n    result = tf.subtract(cumsum[1::2], cumsum[::2])\n    return result\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.cumsum(in1, axis=1) - tf.concat([tf.zeros((tf.shape(in1)[0], 1), dtype=tf.int32), tf.math.cumsum(in1, axis=1)[:, :-1]], axis=1)\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0]-1, 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.unsorted_segment_sum(in1, tf.repeat(tf.range(4), 2), 4)\n    ",
            "def transform(in1):\n    out = tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1], dtype=tf.int32), tf.shape(in1)[0]//2))\n    return out\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.repeat(tf.constant([0, 1]), in1.shape[0]//2))\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)\n    ",
            "def transform(in1):\n    row_sums = tf.reduce_sum(tf.reshape(in1, [-1, 2, in1.shape[1]]), axis=1)\n    return row_sums\n    ",
            "def transform(in1):\n    return tf.math.cumsum(in1, axis=0)[1::2] - tf.math.cumsum(in1, axis=0)[::2]\n    ",
            "def transform(in1):\n    return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0]-1, 2)], axis=1), axis=1)\n    ",
            "def transform(in1):\n    return tf.math.segment_sum(in1, tf.constant([0, 0, 1, 1, 2, 2, 3, 3]))\n    "
        ],
        "tf_operators": {
            "tf.reshape": 36,
            "tf.reduce_sum": 59,
            "tf.int32": 8,
            "tf.unstack": 1,
            "tf.cast": 2,
            "tf.math.segment_sum": 27,
            "tf.range": 20,
            "tf.math.cumsum": 7,
            "tf.shape": 34,
            "tf.stack": 24,
            "tf.math.unsorted_segment_sum": 4,
            "tf.tile": 1,
            "tf.constant": 9,
            "tf.expand_dims": 1,
            "tf.segment_sum": 1,
            "tf.transpose": 2,
            "tf.repeat": 8,
            "tf.int64": 1,
            "tf.fill": 1,
            "tf.math.reduce_sum": 1,
            "tf.concat": 4,
            "tf.roll": 1,
            "tf.math.range": 1,
            "tf.ones": 1,
            "tf.zeros": 2,
            "tf.subtract": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                4,
                2,
                3,
                1
            ],
            [
                1
            ],
            [
                0,
                2
            ],
            [
                4,
                2,
                3,
                1,
                -1
            ],
            [
                0,
                2,
                0
            ],
            [
                0,
                2
            ],
            [
                4,
                2,
                3,
                1
            ],
            [
                2,
                0,
                1,
                2,
                0,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                0,
                -1,
                3
            ],
            [
                0,
                2,
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                1,
                2,
                2,
                2
            ],
            [
                2,
                1,
                2,
                2,
                0
            ],
            [
                0,
                1,
                0,
                2,
                0
            ],
            [
                0,
                2,
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                2,
                2
            ],
            [
                0,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                -1,
                2,
                -1,
                1
            ],
            [
                -1,
                2,
                -1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                2,
                0,
                2
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                1,
                1,
                2,
                2,
                3,
                3
            ],
            [
                0,
                1,
                2,
                0,
                2
            ],
            [
                0,
                2
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                0,
                0,
                1,
                1,
                2,
                2,
                3,
                3
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                1,
                2,
                2
            ],
            [
                2,
                0,
                2,
                1,
                1
            ],
            [
                2,
                1,
                2,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                8,
                2,
                2,
                2
            ],
            [
                -1,
                0,
                2,
                2,
                -1,
                1
            ],
            [
                2,
                1,
                2,
                2,
                0
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                1,
                2
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                0,
                0,
                1,
                1,
                2,
                2,
                3,
                3
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                4,
                2,
                3,
                1
            ],
            [
                0,
                2,
                2
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                0,
                2,
                0,
                1
            ],
            [
                -1,
                0,
                1
            ],
            [
                1,
                1,
                2,
                1,
                2
            ],
            [
                4
            ],
            [
                2,
                2
            ],
            [
                0,
                2
            ],
            [
                2,
                1,
                2,
                0,
                0
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                0,
                2,
                2,
                1,
                1
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                0,
                1,
                0,
                1,
                0
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                2,
                1,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                3,
                1,
                -1,
                3
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                1,
                2,
                2
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                1,
                0,
                1,
                1,
                -1,
                1
            ],
            [
                2,
                0,
                0,
                1,
                2,
                1,
                1
            ],
            [
                4,
                2,
                4
            ],
            [
                0,
                1,
                0,
                2
            ],
            [
                0,
                1,
                0,
                2
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                1,
                2,
                0,
                2
            ],
            [
                2,
                0,
                0,
                1,
                2,
                1,
                1
            ],
            [
                0,
                0,
                1,
                1,
                2,
                2,
                3,
                3
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            8,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 4,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 4,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 2,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 2,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 4,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 2,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 2,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 252,
            "shape_tuple": 0,
            "input_var": 155,
            "tf_int64": 2,
            "tf_int32": 9,
            "axis": 118,
            "provided": 3,
            "tf_float32": 0,
            "shape": 13,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "return tf.boolean_mask(in1, tf.equal(in2, 0)[:, None, None], axis=1) + tf.boolean_mask(in1, tf.equal(in2, 1)[:, None, None], axis=1)",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "def transform(in1, in2):\n    marked_rows = tf.where(tf.equal(in2, 1))\n    reversed_rows = tf.reverse(marked_rows, axis=[1])\n    result = tf.tensor_scatter_nd_update(in1, marked_rows, tf.gather_nd(in1, reversed_rows))\n    return result\n",
            "return tf.map_fn(lambda x: tf.reverse(x[0], axis=[0]) if x[1] == 1 else x[0], (in1, in2), dtype=tf.int32)",
            "def transform(in1, in2):\n    reversed_indices = tf.argsort(in2, axis=None)\n    reversed_in1 = tf.reverse(in1, axis=[0])\n    return tf.gather(reversed_in1, reversed_indices)",
            "marked_rows_indices = tf.where(in2)\nmarked_rows_indices = tf.reverse(marked_rows_indices, axis=[0])\nreturn tf.tensor_scatter_nd_update(in1, marked_rows_indices, tf.reverse(tf.gather_nd(in1, marked_rows_indices), axis=[-1]))\n",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "return tf.map_fn(lambda x: tf.reverse(x), in1, in2)",
            "rows_to_reverse = tf.where(in2)\nreversed_rows = tf.reverse(in1, axis=[2], name=None)\nresult = tf.tensor_scatter_nd_update(in1, rows_to_reverse, reversed_rows)\nreturn result\n",
            "return tf.boolean_mask(in1, tf.math.logical_not(tf.cast(in2, tf.bool)), axis=1)",
            "return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "return tf.stack([tf.reverse(in1[in2[i]], axis=[0]) if in2[i] else in1[i] for i in range(len(in1))], axis=0)",
            "return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in2)[0]), in2), axis=1)",
            "return tf.map_fn(lambda x: tf.reverse(x), tf.boolean_mask(in1, tf.cast(in2, tf.bool)), fn_output_signature=tf.int32)",
            "\nindices = tf.where(tf.equal(in2, 1))\nupdates = tf.reverse(tf.gather_nd(in1, indices), axis=[-1])\nreturn tf.tensor_scatter_nd_update(in1, indices, updates)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1)\n",
            "def transform(in1, in2):\n    reversed_indices = tf.reverse(tf.where(in2), axis=[0])\n    return tf.gather_nd(in1, reversed_indices)\n",
            "return tf.stack([tf.reverse(in1[i], axis=[0]) if in2[i] == 1 else in1[i] for i in range(len(in1))])",
            "return tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, [-1]))",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1[0], tf.cast(in2, tf.bool)), axis=[1])\n",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.unstack(in2))], axis=1)",
            "return tf.boolean_mask(in1, tf.equal(in2, 0), axis=2)",
            "return tf.reverse(tf.where(tf.cast(in2, tf.bool), in1, in1), [-1])",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.cast(in2, tf.bool))], axis=1)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[1])",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "return tf.reverse(tf.boolean_mask(in1[0], tf.cast(in2, tf.bool), axis=0), axis=[1])",
            "return tf.stack([tf.reverse(in1[i], [-1]) if mark==1 else in1[i] for i, mark in enumerate(in2)], axis=0)",
            "return tf.stack([tf.reverse(tf.gather(in1, i, axis=1), axis=[1]) if mark == 1 else tf.gather(in1, i, axis=1) for i, mark in enumerate(in2)], axis=1)",
            "def transform(in1, in2):\n    reversed_indices = tf.reverse(tf.where(tf.equal(in2, 1)), axis=[0])\n    return tf.tensor_scatter_nd_update(in1, reversed_indices, tf.gather_nd(in1, reversed_indices))\n",
            "return tf.where(tf.cast(in2, tf.bool), tf.reverse(in1, [-2]), in1)",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0], in2\n",
            "return tf.tensor_scatter_nd_update(in1, tf.expand_dims(tf.where(in2), axis=1), tf.gather_nd(in1, tf.expand_dims(tf.argsort(tf.cast(in2, tf.int64)), axis=-1)))",
            "return tf.boolean_mask(in1, tf.not_equal(in2, 0)) + tf.boolean_mask(tf.reverse(in1, axis=[-1]), tf.equal(in2, 0))",
            "return tf.stack([tf.reverse(in1[i], [0]) if in2[i] == 1 else in1[i] for i in range(len(in1))], axis=0)",
            "reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2==1)  #[3 0 3 0 3]\nreversed_in1 = tf.gather(in1, reversed_indices, axis=1)\nreturn reversed_in1\n",
            "return tf.where(tf.equal(in2, 0), tf.reverse(in1, [-1]), in1)",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[1]), tf.expand_dims(tf.where(in2)[:, 0], axis=-1)))",
            "reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2)\nreturn tf.reverse(in1, axis=[1])[reversed_indices]\n",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0] * in2[:, tf.newaxis]\n",
            "return tf.boolean_mask(in1, tf.not_equal(in2, 0))\n",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[2])",
            "return tf.boolean_mask(in1, in2, axis=1)",
            "return tf.boolean_mask(in1, tf.math.logical_not(in2), axis=2)",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=1)",
            "return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "return tf.where(in2, tf.reverse(in1, [2]), in1)",
            "return tf.boolean_mask(in1, tf.math.logical_not(tf.cast(in2, tf.bool)), axis=2)",
            "marked_rows = tf.where(in2)\nreversed_rows = tf.reverse(in1, axis=[1])\nresult = tf.tensor_scatter_nd_update(in1, marked_rows, reversed_rows)\nreturn result\n",
            "return tf.boolean_mask(in1, tf.equal(in2, 0))",
            "return tf.reverse(in1, axis=[1])[0, in2]\n",
            "return tf.stack([tf.reverse(row, axis=[-1]) if mark == 1 else row for row, mark in zip(tf.squeeze(in1, 0), in2)])",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, in2), axis=[2])\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.unstack(in2))], axis=1)",
            "return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in2)[0]), tf.reverse(in2, axis=[0])))",
            "return tf.where(tf.cast(in2,tf.bool),tf.reverse(in1,[-1]),in1)",
            "return tf.reverse(in1, axis=[1])[0, 1], in2[::-1]\n",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "return tf.map_fn(lambda x: tf.reverse(x), in1, in2)",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1), tf.unstack(in2))])",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "return tf.multiply(tf.cast(in2, tf.float32), tf.cast(in1, tf.float32)) + tf.multiply(tf.cast(tf.subtract(1, in2), tf.float32), tf.reverse(tf.cast(in1, tf.float32), axis=[2]))",
            "return tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, [-2]))",
            "return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in1)[1]), tf.argsort(in2)))",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[2])",
            "return tf.gather(in1, tf.argsort(tf.cast(in2, tf.int32)))",
            "return tf.gather_nd(in1, tf.expand_dims(tf.argsort(in2), 1))",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.cast(in2, tf.bool))], axis=1)",
            "# Reverse the order in the marked rows\nreturn tf.reverse(in1, axis=[1])[0::in2.shape[0]]\n",
            "return tf.stack([tf.reverse(in1[i], axis=[0]) if in2[i] == 1 else in1[i] for i in range(in1.shape[0])], axis=0)",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=2)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "return tf.boolean_mask(in1, tf.equal(in2, 1), axis=0)",
            "def transform(in1, in2):\n    in1 = tf.reverse(in1, axis=[0])\n    in1 = tf.where(tf.equal(in2, 1), in1, tf.reverse(in1, axis=[1]))\n    return in1\n",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=0), axis=[1])",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=0)",
            "return tf.gather_nd(in1, tf.transpose([in2, tf.range(tf.shape(in1)[1])]))",
            "return tf.reverse(tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, axis=[2])), axis=[2])",
            "return tf.where(tf.equal(tf.expand_dims(in2, 1), 1), tf.reverse(in1, [-1]), in1)",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[1])",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1))",
            "return tf.boolean_mask(in1, tf.not_equal(in2, 0), axis=0)",
            "return tf.stack([tf.reverse(in1[i], [0]) if in2[i] == 1 else in1[i] for i in range(len(in1))])",
            "return tf.boolean_mask(in1, tf.expand_dims(tf.equal(in2, 0), axis=-1)) + tf.boolean_mask(tf.reverse(in1, axis=[-1]), tf.expand_dims(tf.equal(in2, 1), axis=-1))",
            "return tf.gather_nd(in1, tf.stack([in2, tf.argsort(in2)], axis=1))",
            "return tf.stack([tf.reverse(tf.boolean_mask(row, tf.equal(in2, 1)), axis=[0]) for row in tf.unstack(in1)])",
            "return tf.tensor_scatter_nd_update(in1, tf.expand_dims(tf.where(in2), 1), tf.reverse(tf.gather_nd(in1, tf.expand_dims(tf.where(in2), 1), batch_dims=1), axis=[2]))",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0, in2]\n",
            "return tf.where(tf.broadcast_to(tf.expand_dims(in2, 1), tf.shape(in1)), tf.reverse(in1, [-1]), in1)",
            "return tf.where(tf.tile(tf.expand_dims(tf.cast(in2, tf.bool), -1), [1, tf.shape(in1)[1]]) , tf.reverse(in1, [2]), in1)",
            "return tf.boolean_mask(in1, in2)",
            "result = tf.reverse(in1, axis=[1])\nmask = tf.equal(in2, 0)\nindices = tf.where(mask)\nreturn tf.tensor_scatter_nd_update(result, indices, tf.reverse(tf.gather_nd(in1, indices), axis=[2]))\n",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1), tf.unstack(in2))])",
            "return tf.cast(tf.reverse(tensor=in1, axis=[1]) * tf.expand_dims(tf.cast(in2, tf.float32), axis=-1), tf.int32)",
            "return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "return tf.stack([tf.reverse(tf.gather(params=in1[0], indices=tf.where(in2)[:, 0]), axis=[0])])",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.argsort(tf.argsort(tf.range(tf.shape(in2)[0]), axis=-1, direction='DESCENDING'), axis=0, stable=True), batch_dims=1)\n",
            "return tf.where(in2, tf.reverse(in1, [-1]), in1)"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(in2, 0)[:, None, None], axis=1) + tf.boolean_mask(in1, tf.equal(in2, 1)[:, None, None], axis=1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "def transform(in1, in2):\n    marked_rows = tf.where(tf.equal(in2, 1))\n    reversed_rows = tf.reverse(marked_rows, axis=[1])\n    result = tf.tensor_scatter_nd_update(in1, marked_rows, tf.gather_nd(in1, reversed_rows))\n    return result\n",
            "def transform(in1, in2):\n    return tf.map_fn(lambda x: tf.reverse(x[0], axis=[0]) if x[1] == 1 else x[0], (in1, in2), dtype=tf.int32)",
            "def transform(in1, in2):\n    reversed_indices = tf.argsort(in2, axis=None)\n    reversed_in1 = tf.reverse(in1, axis=[0])\n    return tf.gather(reversed_in1, reversed_indices)",
            "def transform(in1, in2):\n    marked_rows_indices = tf.where(in2)\n    marked_rows_indices = tf.reverse(marked_rows_indices, axis=[0])\n    return tf.tensor_scatter_nd_update(in1, marked_rows_indices, tf.reverse(tf.gather_nd(in1, marked_rows_indices), axis=[-1]))\n    ",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "def transform(in1, in2):\n    return tf.map_fn(lambda x: tf.reverse(x), in1, in2)",
            "def transform(in1, in2):\n    rows_to_reverse = tf.where(in2)\n    reversed_rows = tf.reverse(in1, axis=[2], name=None)\n    result = tf.tensor_scatter_nd_update(in1, rows_to_reverse, reversed_rows)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.math.logical_not(tf.cast(in2, tf.bool)), axis=1)",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(in1[in2[i]], axis=[0]) if in2[i] else in1[i] for i in range(len(in1))], axis=0)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in2)[0]), in2), axis=1)",
            "def transform(in1, in2):\n    return tf.map_fn(lambda x: tf.reverse(x), tf.boolean_mask(in1, tf.cast(in2, tf.bool)), fn_output_signature=tf.int32)",
            "def transform(in1, in2):\n    \n    indices = tf.where(tf.equal(in2, 1))\n    updates = tf.reverse(tf.gather_nd(in1, indices), axis=[-1])\n    return tf.tensor_scatter_nd_update(in1, indices, updates)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1)\n    ",
            "def transform(in1, in2):\n    reversed_indices = tf.reverse(tf.where(in2), axis=[0])\n    return tf.gather_nd(in1, reversed_indices)\n",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(in1[i], axis=[0]) if in2[i] == 1 else in1[i] for i in range(len(in1))])",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, [-1]))",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1[0], tf.cast(in2, tf.bool)), axis=[1])\n",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.unstack(in2))], axis=1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(in2, 0), axis=2)",
            "def transform(in1, in2):\n    return tf.reverse(tf.where(tf.cast(in2, tf.bool), in1, in1), [-1])",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.cast(in2, tf.bool))], axis=1)",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[1])",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1[0], tf.cast(in2, tf.bool), axis=0), axis=[1])",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(in1[i], [-1]) if mark==1 else in1[i] for i, mark in enumerate(in2)], axis=0)",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(tf.gather(in1, i, axis=1), axis=[1]) if mark == 1 else tf.gather(in1, i, axis=1) for i, mark in enumerate(in2)], axis=1)",
            "def transform(in1, in2):\n    reversed_indices = tf.reverse(tf.where(tf.equal(in2, 1)), axis=[0])\n    return tf.tensor_scatter_nd_update(in1, reversed_indices, tf.gather_nd(in1, reversed_indices))\n",
            "def transform(in1, in2):\n    return tf.where(tf.cast(in2, tf.bool), tf.reverse(in1, [-2]), in1)",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0], in2\n",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.expand_dims(tf.where(in2), axis=1), tf.gather_nd(in1, tf.expand_dims(tf.argsort(tf.cast(in2, tf.int64)), axis=-1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(in2, 0)) + tf.boolean_mask(tf.reverse(in1, axis=[-1]), tf.equal(in2, 0))",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(in1[i], [0]) if in2[i] == 1 else in1[i] for i in range(len(in1))], axis=0)",
            "def transform(in1, in2):\n    reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2==1)  #[3 0 3 0 3]\n    reversed_in1 = tf.gather(in1, reversed_indices, axis=1)\n    return reversed_in1\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[1]), tf.expand_dims(tf.where(in2)[:, 0], axis=-1)))",
            "def transform(in1, in2):\n    reversed_indices = tf.boolean_mask(tf.range(tf.shape(in1)[1]-1, -1, -1), in2)\n    return tf.reverse(in1, axis=[1])[reversed_indices]\n    ",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0] * in2[:, tf.newaxis]\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(in2, 0))\n    ",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[2])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2, axis=1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.math.logical_not(in2), axis=2)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(in2, 1), axis=1)",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reverse(in1, [2]), in1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.math.logical_not(tf.cast(in2, tf.bool)), axis=2)",
            "def transform(in1, in2):\n    marked_rows = tf.where(in2)\n    reversed_rows = tf.reverse(in1, axis=[1])\n    result = tf.tensor_scatter_nd_update(in1, marked_rows, reversed_rows)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(in2, 0))",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0, in2]\n    ",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(row, axis=[-1]) if mark == 1 else row for row, mark in zip(tf.squeeze(in1, 0), in2)])",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, in2), axis=[2])\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1)",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.unstack(in2))], axis=1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in2)[0]), tf.reverse(in2, axis=[0])))",
            "def transform(in1, in2):\n    return tf.where(tf.cast(in2,tf.bool),tf.reverse(in1,[-1]),in1)",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0, 1], in2[::-1]\n    ",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "def transform(in1, in2):\n    return tf.map_fn(lambda x: tf.reverse(x), in1, in2)",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1), tf.unstack(in2))])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "def transform(in1, in2):\n    return tf.multiply(tf.cast(in2, tf.float32), tf.cast(in1, tf.float32)) + tf.multiply(tf.cast(tf.subtract(1, in2), tf.float32), tf.reverse(tf.cast(in1, tf.float32), axis=[2]))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, [-2]))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(tf.range(tf.shape(in1)[1]), tf.argsort(in2)))",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[2])",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.argsort(tf.cast(in2, tf.int32)))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.expand_dims(tf.argsort(in2), 1))",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.cast(in2, tf.bool))], axis=1)",
            "def transform(in1, in2):\n    # Reverse the order in the marked rows\n    return tf.reverse(in1, axis=[1])[0::in2.shape[0]]\n    ",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(in1[i], axis=[0]) if in2[i] == 1 else in1[i] for i in range(in1.shape[0])], axis=0)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(in2, 1), axis=2)",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.equal(in2, 1), axis=0)",
            "def transform(in1, in2):\n    in1 = tf.reverse(in1, axis=[0])\n    in1 = tf.where(tf.equal(in2, 1), in1, tf.reverse(in1, axis=[1]))\n    return in1\n",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=0), axis=[1])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=0)",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.transpose([in2, tf.range(tf.shape(in1)[1])]))",
            "def transform(in1, in2):\n    return tf.reverse(tf.where(tf.equal(in2, 0), in1, tf.reverse(in1, axis=[2])), axis=[2])",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in2, 1), 1), tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[1])",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(in2, 0), axis=0)",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(in1[i], [0]) if in2[i] == 1 else in1[i] for i in range(len(in1))])",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.expand_dims(tf.equal(in2, 0), axis=-1)) + tf.boolean_mask(tf.reverse(in1, axis=[-1]), tf.expand_dims(tf.equal(in2, 1), axis=-1))",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.stack([in2, tf.argsort(in2)], axis=1))",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(tf.boolean_mask(row, tf.equal(in2, 1)), axis=[0]) for row in tf.unstack(in1)])",
            "def transform(in1, in2):\n    return tf.tensor_scatter_nd_update(in1, tf.expand_dims(tf.where(in2), 1), tf.reverse(tf.gather_nd(in1, tf.expand_dims(tf.where(in2), 1), batch_dims=1), axis=[2]))",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0, in2]\n",
            "def transform(in1, in2):\n    return tf.where(tf.broadcast_to(tf.expand_dims(in2, 1), tf.shape(in1)), tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.where(tf.tile(tf.expand_dims(tf.cast(in2, tf.bool), -1), [1, tf.shape(in1)[1]]) , tf.reverse(in1, [2]), in1)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)",
            "def transform(in1, in2):\n    result = tf.reverse(in1, axis=[1])\n    mask = tf.equal(in2, 0)\n    indices = tf.where(mask)\n    return tf.tensor_scatter_nd_update(result, indices, tf.reverse(tf.gather_nd(in1, indices), axis=[2]))\n    ",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1), tf.unstack(in2))])",
            "def transform(in1, in2):\n    return tf.cast(tf.reverse(tensor=in1, axis=[1]) * tf.expand_dims(tf.cast(in2, tf.float32), axis=-1), tf.int32)",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "def transform(in1, in2):\n    return tf.stack([tf.reverse(tf.gather(params=in1[0], indices=tf.where(in2)[:, 0]), axis=[0])])",
            "def transform(in1, in2):\n    return tf.gather_nd(in1, tf.argsort(tf.argsort(tf.range(tf.shape(in2)[0]), axis=-1, direction='DESCENDING'), axis=0, stable=True), batch_dims=1)\n",
            "def transform(in1, in2):\n    return tf.where(in2, tf.reverse(in1, [-1]), in1)"
        ],
        "tf_operators": {
            "tf.boolean_mask": 42,
            "tf.equal": 22,
            "tf.bool": 27,
            "tf.cast": 31,
            "tf.tensor_scatter_nd_update": 9,
            "tf.gather_nd": 12,
            "tf.reverse": 72,
            "tf.where": 28,
            "tf.map_fn": 4,
            "tf.int32": 4,
            "tf.gather": 5,
            "tf.argsort": 7,
            "tf.math.logical_not": 3,
            "tf.stack": 17,
            "tf.shape": 10,
            "tf.range": 8,
            "tf.unstack": 7,
            "tf.int64": 1,
            "tf.expand_dims": 9,
            "tf.not_equal": 4,
            "tf.newaxis": 1,
            "tf.squeeze": 1,
            "tf.float32": 2,
            "tf.multiply": 1,
            "tf.subtract": 1,
            "tf.transpose": 1,
            "tf.broadcast_to": 1,
            "tf.tile": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1,
                1,
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                1,
                1,
                0,
                0,
                0
            ],
            [
                0
            ],
            [
                0,
                -1
            ],
            [
                1,
                -2
            ],
            [],
            [
                2
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                0,
                0
            ],
            [
                0,
                1
            ],
            [],
            [
                1,
                -1
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                -1
            ],
            [
                0,
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                -1
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                -1
            ],
            [
                0,
                0,
                1
            ],
            [
                1,
                -1,
                0
            ],
            [
                1,
                1,
                1,
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                -2
            ],
            [
                1,
                0
            ],
            [
                1,
                -1
            ],
            [
                0,
                -1,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                1,
                -1,
                -1,
                1,
                1
            ],
            [
                0,
                -1
            ],
            [
                1,
                0,
                -1
            ],
            [
                1,
                1,
                -1,
                -1,
                1
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                1,
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                -1,
                0
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1,
                -2
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                0
            ],
            [
                -1
            ],
            [
                1,
                0,
                1,
                -1
            ],
            [
                1,
                -1
            ],
            [],
            [
                0
            ],
            [],
            [
                1,
                2
            ],
            [
                0,
                -2
            ],
            [
                1
            ],
            [
                1,
                2
            ],
            [],
            [
                1
            ],
            [
                0,
                1,
                1
            ],
            [
                1,
                0,
                0
            ],
            [
                1,
                0,
                0,
                0
            ],
            [
                1,
                2
            ],
            [
                1,
                -1
            ],
            [
                1,
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                0,
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [
                0,
                2,
                2
            ],
            [
                1,
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                0
            ],
            [
                1,
                0
            ],
            [
                0,
                -1,
                -1,
                1,
                -1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                1,
                1,
                2
            ],
            [
                1,
                0
            ],
            [
                1,
                -1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [],
            [
                1,
                0,
                2
            ],
            [
                0
            ],
            [
                1,
                -1
            ],
            [
                -1
            ],
            [
                0,
                0,
                0
            ],
            [
                0,
                -1,
                0,
                1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -2,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 4,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 177,
            "shape_tuple": 0,
            "input_var": 263,
            "tf_int64": 1,
            "tf_int32": 4,
            "axis": 15,
            "provided": 4,
            "tf_float32": 5,
            "shape": 0,
            "tf_bool": 27
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.reduce_sum(in1)), in1)",
            "return tf.math.unsorted_segment_min(tf.ones_like(tf.sequence_mask(in1)), tf.cumsum(in1) - 1, tf.reduce_max(in1) + 1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(input_lengths):\n    max_length = tf.reduce_sum(input_lengths)\n    segment_ids = tf.cumsum(tf.ones(max_length, dtype=tf.int32)) - 1\n    return segment_ids\n",
            "def transform(in1):\n    segment_lengths = tf.unstack(in1)\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.segment_sum(tf.ones_like(tf.concat([tf.zeros(1), in1]), axis=0), tf.cumsum(in1))\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.math.segment_sum(tf.ones_like(tf.sequence_mask(in1)), tf.constant([0, 0, 0, 1, 1, 1, 1, 2]))",
            "def transform(in1):\n    segment_lengths = in1\n    num_segments = len(segment_lengths)\n    segment_ids = []\n    for i, length in enumerate(segment_lengths):\n        segment_ids += [i] * length\n    return tf.constant(segment_ids)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.cast(tf.repeat(tf.range(tf.shape(in1)[0]), in1), tf.int32)",
            "return tf.math.segment_sum(tf.ones_like(in1), tf.range(in1.numpy()), axis=0)",
            "def transform(in1):\n    segment_lengths = in1\n    num_segments = len(segment_lengths)\n    segment_ids = tf.repeat(tf.range(num_segments), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_lengths = tf.convert_to_tensor(in1)\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths, dtype=tf.int32), axis=0) - 1\n    return segment_ids.numpy()\n  ",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.math.unsorted_segment_max(tf.ones_like(in1), tf.math.cumsum(in1), tf.reduce_max(in1)+1)\n",
            "return tf.repeat(tf.range(tf.reduce_sum(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.argsort(tf.ones_like(tf.expand_dims(in1, 1)), axis=1)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.cast(tf.repeat(tf.range(len(in1)), in1), tf.int32)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1, out_type=tf.int64)), tf.cast(in1, tf.int64))",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "\nreturn tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n",
            "values = tf.range(tf.size(in1))\nreturn tf.math.unsorted_segment_sum(tf.ones_like(values), tf.repeat(tf.range(tf.size(in1)-1), in1[:-1]), tf.reduce_sum(in1))\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(lengths)), tf.cast(lengths, tf.int32))\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.reduce_sum(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "return tf.concat([tf.fill([length], i) for i, length in enumerate(in1)], axis=0)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.math.unsorted_segment_sum(tf.ones_like(tf.cumsum(tf.ones_like(in1))-1), tf.cumsum(in1), tf.reduce_max(in1)+1)",
            "return tf.math.cumsum(tf.one_hot(in1 - 1, tf.reduce_max(in1)), axis=0)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.math.cumsum(tf.sequence_mask(in1), exclusive=True)\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(0, tf.shape(in1)[0]), in1)",
            "return tf.range(tf.reduce_sum(in1)) - tf.repeat(tf.cumsum(in1), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.argmax(tf.sequence_mask(in1), axis=0)\n",
            "return tf.repeat(tf.range(tf.size(in1)-1), tf.gather(in1, tf.range(tf.size(in1)-1)))\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "def transform(segment_lengths):\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n",
            "return tf.sequence_mask(tf.reduce_sum(in1), tf.reduce_max(in1))",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.tile(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n",
            "return tf.argsort(tf.repeat(tf.range(tf.reduce_sum(in1)), tf.unstack(in1)), stable=True)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n",
            "def transform(in1):\n    segment_lengths = tf.cast(in1, tf.int32)\n    segment_ids = tf.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return tf.repeat(segment_ids, segment_lengths)\n",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.sequence_mask(tf.reduce_sum(in1), tf.reduce_sum(in1))",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.reduce_sum(in1)), in1, axis=0)\n",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones(segment_lengths))\n    return segment_ids\n",
            "def transform(in1):\n    segment_lengths = in1.numpy()\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.reduce_sum(in1)), in1)",
            "def transform(in1):\n    return tf.math.unsorted_segment_min(tf.ones_like(tf.sequence_mask(in1)), tf.cumsum(in1) - 1, tf.reduce_max(in1) + 1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(input_lengths):\n    max_length = tf.reduce_sum(input_lengths)\n    segment_ids = tf.cumsum(tf.ones(max_length, dtype=tf.int32)) - 1\n    return segment_ids\n",
            "def transform(in1):\n    segment_lengths = tf.unstack(in1)\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.segment_sum(tf.ones_like(tf.concat([tf.zeros(1), in1]), axis=0), tf.cumsum(in1))\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.math.segment_sum(tf.ones_like(tf.sequence_mask(in1)), tf.constant([0, 0, 0, 1, 1, 1, 1, 2]))",
            "def transform(in1):\n    segment_lengths = in1\n    num_segments = len(segment_lengths)\n    segment_ids = []\n    for i, length in enumerate(segment_lengths):\n        segment_ids += [i] * length\n    return tf.constant(segment_ids)\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.cast(tf.repeat(tf.range(tf.shape(in1)[0]), in1), tf.int32)",
            "def transform(in1):\n    return tf.math.segment_sum(tf.ones_like(in1), tf.range(in1.numpy()), axis=0)",
            "def transform(in1):\n    segment_lengths = in1\n    num_segments = len(segment_lengths)\n    segment_ids = tf.repeat(tf.range(num_segments), segment_lengths)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_lengths = tf.convert_to_tensor(in1)\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths, dtype=tf.int32), axis=0) - 1\n    return segment_ids.numpy()\n  ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.math.unsorted_segment_max(tf.ones_like(in1), tf.math.cumsum(in1), tf.reduce_max(in1)+1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.reduce_sum(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.argsort(tf.ones_like(tf.expand_dims(in1, 1)), axis=1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.cast(tf.repeat(tf.range(len(in1)), in1), tf.int32)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1, out_type=tf.int64)), tf.cast(in1, tf.int64))",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    \n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)\n",
            "def transform(in1):\n    values = tf.range(tf.size(in1))\n    return tf.math.unsorted_segment_sum(tf.ones_like(values), tf.repeat(tf.range(tf.size(in1)-1), in1[:-1]), tf.reduce_sum(in1))\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(lengths)), tf.cast(lengths, tf.int32))\n    return segment_ids\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.reduce_sum(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n    ",
            "def transform(in1):\n    return tf.concat([tf.fill([length], i) for i, length in enumerate(in1)], axis=0)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.math.unsorted_segment_sum(tf.ones_like(tf.cumsum(tf.ones_like(in1))-1), tf.cumsum(in1), tf.reduce_max(in1)+1)",
            "def transform(in1):\n    return tf.math.cumsum(tf.one_hot(in1 - 1, tf.reduce_max(in1)), axis=0)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.math.cumsum(tf.sequence_mask(in1), exclusive=True)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(0, tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.range(tf.reduce_sum(in1)) - tf.repeat(tf.cumsum(in1), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.argmax(tf.sequence_mask(in1), axis=0)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)-1), tf.gather(in1, tf.range(tf.size(in1)-1)))\n    ",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n    ",
            "def transform(segment_lengths):\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n",
            "def transform(in1):\n    return tf.sequence_mask(tf.reduce_sum(in1), tf.reduce_max(in1))",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    return tf.tile(tf.range(tf.size(in1)), in1)",
            "def transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.argsort(tf.repeat(tf.range(tf.reduce_sum(in1)), tf.unstack(in1)), stable=True)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)\n    ",
            "def transform(in1):\n    segment_lengths = tf.cast(in1, tf.int32)\n    segment_ids = tf.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return tf.repeat(segment_ids, segment_lengths)\n",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "def transform(in1):\n    return tf.sequence_mask(tf.reduce_sum(in1), tf.reduce_sum(in1))",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.reduce_sum(in1)), in1, axis=0)\n    ",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.math.cumsum(tf.ones(segment_lengths))\n    return segment_ids\n",
            "def transform(in1):\n    segment_lengths = in1.numpy()\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids.numpy()\n",
            "def transform(in1):\n    return tf.repeat(tf.range(tf.size(in1)), in1)"
        ],
        "tf_operators": {
            "tf.shape": 39,
            "tf.repeat": 81,
            "tf.range": 82,
            "tf.reduce_sum": 10,
            "tf.sequence_mask": 6,
            "tf.reduce_max": 5,
            "tf.ones_like": 11,
            "tf.cumsum": 6,
            "tf.math.unsorted_segment_min": 1,
            "tf.ones": 2,
            "tf.int32": 6,
            "tf.size": 34,
            "tf.unstack": 2,
            "tf.zeros": 1,
            "tf.concat": 2,
            "tf.segment_sum": 1,
            "tf.math.segment_sum": 2,
            "tf.constant": 2,
            "tf.cast": 5,
            "tf.math.cumsum": 6,
            "tf.convert_to_tensor": 1,
            "tf.math.unsorted_segment_max": 1,
            "tf.expand_dims": 1,
            "tf.argsort": 2,
            "tf.int64": 1,
            "tf.math.unsorted_segment_sum": 2,
            "tf.fill": 1,
            "tf.one_hot": 1,
            "tf.argmax": 1,
            "tf.gather": 1,
            "tf.tile": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                1,
                1
            ],
            [
                0
            ],
            [
                1
            ],
            [],
            [
                0
            ],
            [],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                2
            ],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                0
            ],
            [
                1,
                1
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [
                1,
                -1
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [
                1,
                1
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                0,
                0
            ],
            [],
            [],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                1,
                1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 73,
            "shape_tuple": 0,
            "input_var": 183,
            "tf_int64": 2,
            "tf_int32": 6,
            "axis": 0,
            "provided": 1,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "return tf.cast(tf.where(in2, in1, 0), tf.int32)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, in2)\n  ",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.math.logical_not(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=tf.shape(in1)[1], dtype=tf.bool)))\n",
            "return tf.boolean_mask(in1, tf.tile(in2, [3]))",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.where(in2, in1, 0)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "result = tf.where(in2, in1, tf.constant(0))\nreturn result\n",
            "return tf.reduce_sum(tf.where(in2, in1, 0), axis=1)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))\n",
            "return tf.boolean_mask(in1, tf.tile(tf.expand_dims(in2, 1), [1, tf.shape(in1)[1]]))\n  ",
            "return tf.where(tf.transpose(in2), in1, tf.zeros_like(in1))",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))",
            "return tf.boolean_mask(in1, tf.concat([tf.cast(in2, tf.bool), tf.cast(tf.zeros_like(in1), tf.bool)], axis=-1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.sequence_mask(in1, tf.shape(in2)[1]) * tf.where(in2, in1, 0)\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.reshape(tf.where(in2), [-1]))\n",
            "return tf.boolean_mask(in1, tf.tile(in2, [1, 2]))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.math.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), in1.shape[1]))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2, axis=1)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.reshape(tf.cast(in2, tf.bool), [-1]))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32)), maxlen=tf.shape(in2)[1])\nresult = tf.boolean_mask(in1, in2) * tf.cast(mask, tf.int64)\nreturn result\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(in2, axis=1), maxlen=tf.shape(in1)[1]))\n",
            "result = tf.where(in2, tf.range(tf.reduce_max(in1)+1), tf.zeros_like(in1))\nreturn tf.cast(result, tf.int32)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2) * tf.cast(in2, tf.int64)\n",
            "return tf.where(tf.expand_dims(in2, -1), in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "result = tf.where(in2, in1, tf.zeros_like(in1))\nreturn result\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.where(tf.sequence_mask(tf.reduce_sum(in2, axis=1)), in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "output = tf.where(in2, in1, 0)\nreturn output\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.tensordot(tf.cast(in2, tf.int32), in1, axes=1)\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=in1.shape[1]))\n",
            "return tf.boolean_mask(in1, tf.expand_dims(in2, -1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.boolean_mask(in1, in2) * tf.cast(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]), dtype=tf.int32)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=tf.shape(in2)[1])\nresult = tf.boolean_mask(in1, tf.tile(in2, [1,2]))\nreturn tf.reshape(result, mask.shape)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)",
            "return tf.boolean_mask(in1, tf.expand_dims(in2, 2))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.cast(tf.where(in2, in1, 0), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n      ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.math.logical_not(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=tf.shape(in1)[1], dtype=tf.bool)))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.tile(in2, [3]))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, 0)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    result = tf.where(in2, in1, tf.constant(0))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.reduce_sum(tf.where(in2, in1, 0), axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.tile(tf.expand_dims(in2, 1), [1, tf.shape(in1)[1]]))\n      ",
            "def transform(in1, in2):\n    return tf.where(tf.transpose(in2), in1, tf.zeros_like(in1))",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.transpose(in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.concat([tf.cast(in2, tf.bool), tf.cast(tf.zeros_like(in1), tf.bool)], axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.sequence_mask(in1, tf.shape(in2)[1]) * tf.where(in2, in1, 0)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.gather(in1, tf.reshape(tf.where(in2), [-1]))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.tile(in2, [1, 2]))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.math.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), in1.shape[1]))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2, axis=1)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.reshape(tf.cast(in2, tf.bool), [-1]))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.transpose(in2))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32)), maxlen=tf.shape(in2)[1])\n    result = tf.boolean_mask(in1, in2) * tf.cast(mask, tf.int64)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(in2, axis=1), maxlen=tf.shape(in1)[1]))\n    ",
            "def transform(in1, in2):\n    result = tf.where(in2, tf.range(tf.reduce_max(in1)+1), tf.zeros_like(in1))\n    return tf.cast(result, tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2) * tf.cast(in2, tf.int64)\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.expand_dims(in2, -1), in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    result = tf.where(in2, in1, tf.zeros_like(in1))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.sequence_mask(tf.reduce_sum(in2, axis=1)), in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]))\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    output = tf.where(in2, in1, 0)\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.tensordot(tf.cast(in2, tf.int32), in1, axes=1)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]))\n",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=in1.shape[1]))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.expand_dims(in2, -1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2) * tf.cast(tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), tf.shape(in1)[1]), dtype=tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    mask = tf.sequence_mask(tf.reduce_sum(tf.cast(in2, tf.int32), axis=1), maxlen=tf.shape(in2)[1])\n    result = tf.boolean_mask(in1, tf.tile(in2, [1,2]))\n    return tf.reshape(result, mask.shape)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.where(in2, in1, tf.zeros_like(in1))\n    ",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, in2)",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.expand_dims(in2, 2))\n    "
        ],
        "tf_operators": {
            "tf.int32": 14,
            "tf.where": 35,
            "tf.cast": 34,
            "tf.bool": 20,
            "tf.boolean_mask": 61,
            "tf.zeros_like": 29,
            "tf.sequence_mask": 11,
            "tf.shape": 9,
            "tf.math.logical_not": 1,
            "tf.reduce_sum": 11,
            "tf.tile": 4,
            "tf.constant": 1,
            "tf.multiply": 2,
            "tf.expand_dims": 4,
            "tf.transpose": 7,
            "tf.concat": 1,
            "tf.reshape": 3,
            "tf.gather": 1,
            "tf.math.multiply": 1,
            "tf.int64": 2,
            "tf.range": 1,
            "tf.reduce_max": 1,
            "tf.tensordot": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [
                3
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [
                0,
                1
            ],
            [],
            [],
            [
                1,
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [
                1,
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [
                1
            ],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1,
                1
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [
                1,
                1,
                1,
                2
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 2,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 39,
            "shape_tuple": 0,
            "input_var": 243,
            "tf_int64": 2,
            "tf_int32": 18,
            "axis": 3,
            "provided": 1,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 21
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.searchsorted(tf.sort(in1), in2)\n    ",
            "return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(tf.sort(in1), in2, side='left'))\n",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.searchsorted(in2, in1, side='left')\n",
            "return tf.searchsorted(in2, in1)",
            "return tf.gather_nd(tf.argsort(in2), in1)",
            "return tf.searchsorted(in2, in1, side='left')\n",
            "return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.argsort(in1).numpy()[tf.searchsorted(tf.sort(in1), in2, side='left').numpy()]\n",
            "return tf.argsort(tf.cast(in1, dtype=tf.float32))",
            "return tf.gather_nd(tf.argsort(in1), tf.reshape(in2, (-1, 1)))",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n  ",
            "return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))",
            "return tf.argsort(in1, axis=0)\n",
            "return tf.searchsorted(tf.sort(tf.unique_with_counts(in1).y), in2)",
            "return tf.argsort(tf.math.in_top_k(in2, in1, k=1), axis=1)",
            "return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))",
            "return tf.argsort(tf.cast(in1, tf.int32), stable=True)",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)))[0][:, 1]",
            "return tf.searchsorted(tf.sort(in1), in2)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)\n",
            "return tf.argsort(in1, stable=True).numpy()[tf.argsort(in2, stable=True).numpy()]\n",
            "return tf.argsort(tf.expand_dims(in1, axis=1), direction='ASCENDING', stable=True)",
            "return tf.searchsorted(tf.sort(in1), in2)\n",
            "return tf.cast(tf.where(tf.equal(tf.expand_dims(in1, 1), in2))[:, 0], tf.int32)\n",
            "return tf.argsort(tf.math.equal(tf.expand_dims(in1, 1), in2), axis=0)[:, 0]\n",
            "return tf.argsort(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32))",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)))[1]",
            "return tf.argsort(tf.cast(tf.cast(in2, tf.bool), tf.int32))[0]",
            "\nreturn tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(tf.constant(in1), axis=-1, stable=True).numpy()[tf.argsort(in1, in2)].numpy()\n",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))[:, 1]\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.argsort(in1)[tf.argsort(in2)]\n  ",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.argsort(tf.cast(in1, tf.float32), axis=0), tf.argsort(tf.cast(in2, tf.float32), axis=0)\n",
            "def transform(in1, in2):\n    return tf.cast(tf.argsort(in1, stable=True), tf.int32)\n",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.argsort(tf.cast(in1, tf.int32))",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.argsort(tf.where(tf.equal(tf.expand_dims(in1, 1), in2)), stable=True)",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))",
            "def transform(in1, in2):\n    return tf.argsort(in1)[tf.argsort(in2)]\n",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, axis=1), in2), tf.int32), axis=1)",
            "return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(in1, axis=-1)\n",
            "return tf.searchsorted(tf.sort(in2), in1)",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.concat([tf.where(tf.equal(in1, val))[:, 0] for val in in2], axis=0)",
            "return tf.argsort(tf.cast(tf.equal(tf.broadcast_to(tf.expand_dims(in1, 1), tf.shape(in2)), in2), axis=0), axis=0)\n",
            "return tf.argsort(tf.cast(in2, tf.int32))",
            "return tf.argsort(tf.cast(tf.equal(tf.reshape(in2, [-1, 1]), tf.reshape(in1, [1, -1])), tf.int32))",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.argsort(in1, axis=-1)\n",
            "return tf.concat([tf.where(tf.equal(in1, val))[:,0] for val in in2], axis=0)\n",
            "return tf.searchsorted(tf.sort(in1), in2)\n",
            "return tf.argsort(in1, axis=0)\n",
            "return tf.searchsorted(tf.sort(in1), in2)\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.argsort(in1)[tf.argsort(in1) == in2]\n",
            "def transform(in1, in2):\n    return tf.argsort(tf.convert_to_tensor(in2), axis=-1).numpy()\n",
            "return tf.searchsorted(in1, in2, side='left')",
            "return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, 1), in2), tf.int32))[-1]",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, axis=1), in2), tf.int32))",
            "return tf.searchsorted(tf.sort(in1), in2)\n",
            "return tf.argsort(in1)",
            "def transform(in1, in2):\n    indices = tf.where(tf.equal(tf.expand_dims(in2, axis=1), in1))\n    indices = tf.squeeze(indices, axis=1)\n    return indices\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n",
            "return tf.argsort(in2)\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))[:, 1]\n",
            "def transform(in1, in2):\n    return tf.argsort(tf.constant(in1), stable=True), tf.argsort(tf.constant(in1), tf.constant(in2), stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)[tf.searchsorted(tf.sort(in1), in2, side='right')]\n",
            "return tf.argsort(in1) # or tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.where(tf.broadcast_to(tf.expand_dims(in1, axis=1), (1, len(in2))) == tf.expand_dims(in2, axis=0))[:, 1]",
            "return tf.where(tf.reduce_any(tf.equal(tf.expand_dims(in1, 1), in2), axis=1))",
            "return tf.argsort(tf.argsort(in1), stable=True)\n",
            "return tf.where(tf.equal(tf.expand_dims(in1, 1), in2)[:,:,1])",
            "return tf.raw_ops.SearchsortedV2(sorted_sequence=tf.sort(in2)[::-1], values=in1, side=\"right\")"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)\n        ",
            "def transform(in1, in2):\n    return tf.gather(tf.range(tf.shape(in1)[0]), tf.searchsorted(tf.sort(in1), in2, side='left'))\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in2, in1, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in2, in1)",
            "def transform(in1, in2):\n    return tf.gather_nd(tf.argsort(in2), in1)",
            "def transform(in1, in2):\n    return tf.searchsorted(in2, in1, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)",
            "def transform(in1, in2):\n    return tf.argsort(in1).numpy()[tf.searchsorted(tf.sort(in1), in2, side='left').numpy()]\n",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(in1, dtype=tf.float32))",
            "def transform(in1, in2):\n    return tf.gather_nd(tf.argsort(in1), tf.reshape(in2, (-1, 1)))",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n  ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))",
            "def transform(in1, in2):\n    return tf.argsort(in1, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(tf.unique_with_counts(in1).y), in2)",
            "def transform(in1, in2):\n    return tf.argsort(tf.math.in_top_k(in2, in1, k=1), axis=1)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(in1, tf.int32), stable=True)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)))[0][:, 1]",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)\n    ",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.cast(tf.searchsorted(tf.sort(in1), in2), tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True).numpy()[tf.argsort(in2, stable=True).numpy()]\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.expand_dims(in1, axis=1), direction='ASCENDING', stable=True)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.where(tf.equal(tf.expand_dims(in1, 1), in2))[:, 0], tf.int32)\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.math.equal(tf.expand_dims(in1, 1), in2), axis=0)[:, 0]\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)))[1]",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(tf.cast(in2, tf.bool), tf.int32))[0]",
            "def transform(in1, in2):\n    \n    return tf.searchsorted(in1, in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(tf.constant(in1), axis=-1, stable=True).numpy()[tf.argsort(in1, in2)].numpy()\n",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))[:, 1]\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.argsort(in1)[tf.argsort(in2)]\n      ",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(in1, tf.float32), axis=0), tf.argsort(tf.cast(in2, tf.float32), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.cast(tf.argsort(in1, stable=True), tf.int32)\n",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(in1, tf.int32))",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.where(tf.equal(tf.expand_dims(in1, 1), in2)), stable=True)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, 1), in2))",
            "def transform(in1, in2):\n    return tf.argsort(in1)[tf.argsort(in2)]\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, axis=1), in2), tf.int32), axis=1)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(in1, axis=-1)\n",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in2), in1)",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.concat([tf.where(tf.equal(in1, val))[:, 0] for val in in2], axis=0)",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(tf.equal(tf.broadcast_to(tf.expand_dims(in1, 1), tf.shape(in2)), in2), axis=0), axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(in2, tf.int32))",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(tf.equal(tf.reshape(in2, [-1, 1]), tf.reshape(in1, [1, -1])), tf.int32))",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.argsort(in1, axis=-1)\n",
            "def transform(in1, in2):\n    return tf.concat([tf.where(tf.equal(in1, val))[:,0] for val in in2], axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)\n    ",
            "def transform(in1, in2):\n    return tf.argsort(in1, axis=0)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1)[tf.argsort(in1) == in2]\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.convert_to_tensor(in2), axis=-1).numpy()\n",
            "def transform(in1, in2):\n    return tf.searchsorted(in1, in2, side='left')",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, 1), in2), tf.int32))[-1]",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.cast(tf.equal(tf.expand_dims(in1, axis=1), in2), tf.int32))",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)\n    ",
            "def transform(in1, in2):\n    return tf.argsort(in1)",
            "def transform(in1, in2):\n    indices = tf.where(tf.equal(tf.expand_dims(in2, axis=1), in1))\n    indices = tf.squeeze(indices, axis=1)\n    return indices\n",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2, side='left')\n    ",
            "def transform(in1, in2):\n    return tf.argsort(in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))[:, 1]\n    ",
            "def transform(in1, in2):\n    return tf.argsort(tf.constant(in1), stable=True), tf.argsort(tf.constant(in1), tf.constant(in2), stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)[tf.searchsorted(tf.sort(in1), in2, side='right')]\n",
            "def transform(in1, in2):\n    return tf.argsort(in1) # or tf.searchsorted(in1, in2)\n    ",
            "def transform(in1, in2):\n    return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.where(tf.broadcast_to(tf.expand_dims(in1, axis=1), (1, len(in2))) == tf.expand_dims(in2, axis=0))[:, 1]",
            "def transform(in1, in2):\n    return tf.where(tf.reduce_any(tf.equal(tf.expand_dims(in1, 1), in2), axis=1))",
            "def transform(in1, in2):\n    return tf.argsort(tf.argsort(in1), stable=True)\n    ",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.expand_dims(in1, 1), in2)[:,:,1])",
            "def transform(in1, in2):\n    return tf.raw_ops.SearchsortedV2(sorted_sequence=tf.sort(in2)[::-1], values=in1, side=\"right\")"
        ],
        "tf_operators": {
            "tf.argsort": 44,
            "tf.sort": 34,
            "tf.searchsorted": 43,
            "tf.range": 1,
            "tf.gather": 1,
            "tf.shape": 2,
            "tf.gather_nd": 2,
            "tf.int32": 13,
            "tf.cast": 16,
            "tf.float32": 2,
            "tf.reshape": 2,
            "tf.expand_dims": 21,
            "tf.equal": 21,
            "tf.where": 16,
            "tf.unique_with_counts": 1,
            "tf.math.in_top_k": 1,
            "tf.math.equal": 1,
            "tf.bool": 1,
            "tf.constant": 2,
            "tf.concat": 2,
            "tf.broadcast_to": 2,
            "tf.convert_to_tensor": 1,
            "tf.squeeze": 1,
            "tf.reduce_any": 1,
            "tf.raw_ops.SearchsortedV2": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1,
                1
            ],
            [],
            [
                1
            ],
            [
                0
            ],
            [],
            [
                1,
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                0,
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1,
                0
            ],
            [
                1,
                0,
                0
            ],
            [
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [
                0,
                0
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [
                -1
            ],
            [],
            [],
            [],
            [],
            [
                0,
                0
            ],
            [
                1,
                0,
                0
            ],
            [],
            [
                -1,
                1,
                1,
                -1
            ],
            [],
            [
                -1
            ],
            [
                0,
                0
            ],
            [],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [
                1,
                -1
            ],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            [
                1,
                1,
                0,
                1
            ],
            [
                1,
                1
            ],
            [],
            [
                1,
                1
            ],
            [
                -1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 2,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 72,
            "shape_tuple": 0,
            "input_var": 188,
            "tf_int64": 0,
            "tf_int32": 13,
            "axis": 0,
            "provided": 0,
            "tf_float32": 3,
            "shape": 0,
            "tf_bool": 1
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.reshape(in2, shape=(3, 1, 1, 1)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "tf.multiply(in1, tf.reshape(in2, (3, 1, 1, 1)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "batched_scalars = tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1), axis=-1)\nresult = tf.multiply(in1, batched_scalars)\nreturn result\n",
            "return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [tf.shape(in2)[0], 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n  ",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n  ",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 2), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=(1,2)))\nreturn result\n",
            "return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, -1))\n",
            "result = tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\nreturn result\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "output = tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\nreturn output\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "tf.multiply(in1, in2)\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n",
            "return tf.math.multiply(in1, tf.expand_dims(in2, (1, 2)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, (1,2)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=1), axis=2))",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1]))\n"
        ],
        "normalized_completions": [
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, shape=(3, 1, 1, 1)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (3, 1, 1, 1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "def transform(in1, in2):\n    batched_scalars = tf.expand_dims(tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1), axis=-1)\n    result = tf.multiply(in1, batched_scalars)\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, 1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [tf.shape(in2)[0], 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n      ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n      ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 2), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    result = tf.multiply(in1, tf.expand_dims(in2, axis=(1,2)))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, -1))\n    ",
            "def transform(in1, in2):\n    result = tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n    return result\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    output = tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n    return output\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, in2)",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1))\n    ",
            "def transform(in1, in2):\n    return tf.math.multiply(in1, tf.expand_dims(in2, (1, 2)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(in2, (1,2)))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [-1, 1, 1, 1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=1), axis=2))",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [1, 1, 1, -1]))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n    ",
            "def transform(in1, in2):\n    return tf.multiply(in1, tf.reshape(in2, [3, 1, 1]))\n    "
        ],
        "tf_operators": {
            "tf.multiply": 99,
            "tf.expand_dims": 75,
            "tf.reshape": 24,
            "tf.shape": 1,
            "tf.math.multiply": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1
            ],
            [
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1,
                -1
            ],
            [
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                0,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                1
            ],
            [
                2,
                2
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                1,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                1,
                2
            ],
            [
                -1,
                -1
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 187,
            "shape_tuple": 0,
            "input_var": 201,
            "tf_int64": 0,
            "tf_int32": 0,
            "axis": 21,
            "provided": 0,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "return tf.one_hot([3], in1)\n",
            "return tf.one_hot(in1, 6)",
            "return tf.one_hot([3], depth=6)\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot([3], in1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6, on_value=1, off_value=0)\n",
            "return tf.one_hot(indices=in1, depth=6)\n",
            "return tf.one_hot([3], in1)\n  ",
            "return tf.one_hot([in1], depth=6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.transpose(tf.one_hot(indices=in1, depth=6))\n",
            "return tf.one_hot(in1, depth=6)",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, in1 + 1)\n",
            "return tf.transpose(tf.one_hot(in1, depth=6))\n  ",
            "return tf.one_hot([4], in1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    column_index = in1\n    row_count = 5\n    result = tf.one_hot(column_index, row_count)\n    return result\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.eye(6, num_columns=5)[:, 3]\n",
            "result = tf.sequence_mask(in1, 6)\nresult = tf.cast(result, tf.int32)\nresult = tf.expand_dims(result, axis=1)\nresult = tf.tile(result, [1, 6, 1])\nreturn result\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, depth=6)[:, :, 3]\n",
            "return tf.one_hot(in1, depth=6, axis=1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot([in1]*6, 5)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)[:, :, 3]\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.cast(tf.one_hot(in1, depth=6, on_value=1, off_value=0), tf.int32)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, depth=6)\n ",
            "return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    column_index = in1\n    matrix_shape = (5, 6)\n    indices = tf.constant([[0, column_index]])\n    updates = tf.constant(1)\n    result = tf.tensor_scatter_nd_update(tf.zeros(matrix_shape), indices, updates)\n    return result\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(tf.fill([5], 3), 6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)\n  ",
            "return tf.one_hot([4], in1)\n",
            "return tf.cast(tf.one_hot(in1, 6, on_value=1, off_value=0, axis=1), tf.int32)\n",
            "return tf.one_hot(tf.fill([5], 3), 6)\n",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(tf.one_hot(in1, depth=6), axis=0), repeats=5, axis=0)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)[:, 3:]\n",
            "return tf.sequence_mask(in1, maxlen=6)\n",
            "return tf.one_hot([3], in1)\n",
            "return tf.one_hot([4], in1)\n",
            "def transform(in1):\n    col_index = in1\n    num_rows = 5\n    num_columns = 6\n    indices = tf.constant([[tf.range(num_rows)], [col_index * tf.ones(num_rows, dtype=tf.int32)]], dtype=tf.int32)\n    updates = tf.ones(num_rows, dtype=tf.int32)\n    result = tf.scatter_nd(indices=tf.transpose(indices), updates=updates, shape=[num_rows, num_columns])\n    return result\n",
            "return tf.one_hot(in1, 6, [0, 0, 0, 1, 0, 0])\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(tf.fill([5], in1), 6)\n",
            "return tf.equal(tf.range(6), in1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    col_idx = in1\n    num_rows = 5\n    num_cols = 6\n    indices = tf.transpose(tf.stack([tf.range(num_rows), tf.fill([num_rows], col_idx)], axis=1))\n    updates = tf.ones([num_rows])\n    matrix = tf.tensor_scatter_nd_update(tf.zeros([num_rows, num_cols], dtype=tf.int32), indices, updates)\n    return matrix\n",
            "return tf.one_hot(in1, 6)[:, 3]\n",
            "return tf.cast(tf.eye(6)[:, 3], tf.int32)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(in1, 6)\n",
            "return tf.cast(tf.one_hot(in1, 6, on_value=1, off_value=0, axis=1), tf.int32)\n",
            "return tf.one_hot([in1], 6)\n",
            "return tf.eye(5)[:, 3]\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.equal(tf.range(6), in1)\n",
            "def transform(in1):\n    col_idx = in1\n    num_rows = 5\n    num_cols = 6\n    indices = tf.constant([[i, col_idx] for i in range(num_rows)], dtype=tf.int64)\n    updates = tf.ones((num_rows,), dtype=tf.int32)\n    matrix = tf.scatter_nd(indices, updates, shape=[num_rows, num_cols])\n    return matrix\n",
            "return tf.one_hot(in1, 6)[:, :, 3]\n",
            "return tf.one_hot(tf.zeros([6], dtype=tf.int32) + in1, 5)",
            "\nreturn tf.transpose(tf.one_hot(indices=in1, depth=6))\n",
            "return tf.equal(tf.range(6), in1)",
            "column_idx = 3\nreturn tf.equal(tf.range(6), column_idx)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, 6)[:, in1-1:in1]\n",
            "return tf.cast(tf.one_hot(in1, depth=6), tf.int32)\n",
            "return tf.expand_dims(tf.one_hot(in1, depth=6, axis=1), 0)\n",
            "return tf.cast(tf.one_hot(in1, depth=6, on_value=1, off_value=0), tf.int32)\n",
            "return tf.one_hot([3], in1)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    column_index = 3\n    num_rows = 5\n    result = tf.one_hot(indices=column_index, depth=num_rows)\n    return result\n",
            "return tf.one_hot(tf.constant(in1), 6)\n",
            "return tf.sequence_mask(6)[:,in1]\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.cast(tf.one_hot(in1, depth=6), tf.int32)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.cast(tf.one_hot(in1, depth=6, on_value=1, off_value=0), tf.int32)\n",
            "return tf.equal(tf.range(6), tf.ones(6) * in1)\n",
            "return tf.reshape(tf.one_hot(in1, 6, dtype=tf.int32), [5, 6])\n",
            "return tf.one_hot([3], depth=in1)\n",
            "return tf.one_hot(in1, 6)\n"
        ],
        "normalized_completions": [
            "def transform(in1):\n    return tf.one_hot([3], in1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)",
            "def transform(in1):\n    return tf.one_hot([3], depth=6)\n    ",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    return tf.one_hot([3], in1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6, on_value=1, off_value=0)\n    ",
            "def transform(in1):\n    return tf.one_hot(indices=in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot([3], in1)\n      ",
            "def transform(in1):\n    return tf.one_hot([in1], depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.transpose(tf.one_hot(indices=in1, depth=6))\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, in1 + 1)\n",
            "def transform(in1):\n    return tf.transpose(tf.one_hot(in1, depth=6))\n      ",
            "def transform(in1):\n    return tf.one_hot([4], in1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    column_index = in1\n    row_count = 5\n    result = tf.one_hot(column_index, row_count)\n    return result\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.eye(6, num_columns=5)[:, 3]\n    ",
            "def transform(in1):\n    result = tf.sequence_mask(in1, 6)\n    result = tf.cast(result, tf.int32)\n    result = tf.expand_dims(result, axis=1)\n    result = tf.tile(result, [1, 6, 1])\n    return result\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)[:, :, 3]\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6, axis=1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot([in1]*6, 5)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)[:, :, 3]\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=6, on_value=1, off_value=0), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n     ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    column_index = in1\n    matrix_shape = (5, 6)\n    indices = tf.constant([[0, column_index]])\n    updates = tf.constant(1)\n    result = tf.tensor_scatter_nd_update(tf.zeros(matrix_shape), indices, updates)\n    return result\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.fill([5], 3), 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n      ",
            "def transform(in1):\n    return tf.one_hot([4], in1)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, 6, on_value=1, off_value=0, axis=1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.fill([5], 3), 6)\n    ",
            "def transform(in1):\n    return tf.repeat(tf.expand_dims(tf.one_hot(in1, depth=6), axis=0), repeats=5, axis=0)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)[:, 3:]\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=6)\n    ",
            "def transform(in1):\n    return tf.one_hot([3], in1)\n    ",
            "def transform(in1):\n    return tf.one_hot([4], in1)\n    ",
            "def transform(in1):\n    col_index = in1\n    num_rows = 5\n    num_columns = 6\n    indices = tf.constant([[tf.range(num_rows)], [col_index * tf.ones(num_rows, dtype=tf.int32)]], dtype=tf.int32)\n    updates = tf.ones(num_rows, dtype=tf.int32)\n    result = tf.scatter_nd(indices=tf.transpose(indices), updates=updates, shape=[num_rows, num_columns])\n    return result\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6, [0, 0, 0, 1, 0, 0])\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.fill([5], in1), 6)\n    ",
            "def transform(in1):\n    return tf.equal(tf.range(6), in1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    col_idx = in1\n    num_rows = 5\n    num_cols = 6\n    indices = tf.transpose(tf.stack([tf.range(num_rows), tf.fill([num_rows], col_idx)], axis=1))\n    updates = tf.ones([num_rows])\n    matrix = tf.tensor_scatter_nd_update(tf.zeros([num_rows, num_cols], dtype=tf.int32), indices, updates)\n    return matrix\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)[:, 3]\n    ",
            "def transform(in1):\n    return tf.cast(tf.eye(6)[:, 3], tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, 6, on_value=1, off_value=0, axis=1), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot([in1], 6)\n    ",
            "def transform(in1):\n    return tf.eye(5)[:, 3]\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.equal(tf.range(6), in1)\n    ",
            "def transform(in1):\n    col_idx = in1\n    num_rows = 5\n    num_cols = 6\n    indices = tf.constant([[i, col_idx] for i in range(num_rows)], dtype=tf.int64)\n    updates = tf.ones((num_rows,), dtype=tf.int32)\n    matrix = tf.scatter_nd(indices, updates, shape=[num_rows, num_cols])\n    return matrix\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)[:, :, 3]\n    ",
            "def transform(in1):\n    return tf.one_hot(tf.zeros([6], dtype=tf.int32) + in1, 5)",
            "def transform(in1):\n    \n    return tf.transpose(tf.one_hot(indices=in1, depth=6))\n    ",
            "def transform(in1):\n    return tf.equal(tf.range(6), in1)",
            "def transform(in1):\n    column_idx = 3\n    return tf.equal(tf.range(6), column_idx)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, 6)[:, in1-1:in1]\n",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=6), tf.int32)\n    ",
            "def transform(in1):\n    return tf.expand_dims(tf.one_hot(in1, depth=6, axis=1), 0)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=6, on_value=1, off_value=0), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot([3], in1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    column_index = 3\n    num_rows = 5\n    result = tf.one_hot(indices=column_index, depth=num_rows)\n    return result\n",
            "def transform(in1):\n    return tf.one_hot(tf.constant(in1), 6)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(6)[:,in1]\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=6), tf.int32)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.sequence_mask(in1, maxlen=6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n    ",
            "def transform(in1):\n    return tf.cast(tf.one_hot(in1, depth=6, on_value=1, off_value=0), tf.int32)\n    ",
            "def transform(in1):\n    return tf.equal(tf.range(6), tf.ones(6) * in1)\n    ",
            "def transform(in1):\n    return tf.reshape(tf.one_hot(in1, 6, dtype=tf.int32), [5, 6])\n    ",
            "def transform(in1):\n    return tf.one_hot([3], depth=in1)\n    ",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n    "
        ],
        "tf_operators": {
            "tf.one_hot": 82,
            "tf.transpose": 5,
            "tf.sequence_mask": 6,
            "tf.eye": 3,
            "tf.tile": 1,
            "tf.int32": 14,
            "tf.cast": 9,
            "tf.expand_dims": 3,
            "tf.tensor_scatter_nd_update": 2,
            "tf.zeros": 3,
            "tf.constant": 4,
            "tf.fill": 4,
            "tf.repeat": 1,
            "tf.ones": 4,
            "tf.range": 7,
            "tf.scatter_nd": 2,
            "tf.equal": 5,
            "tf.stack": 1,
            "tf.int64": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3
            ],
            [
                6
            ],
            [
                3,
                6
            ],
            [
                6
            ],
            [
                3
            ],
            [
                6
            ],
            [
                6,
                1,
                0
            ],
            [
                6
            ],
            [
                3
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                1
            ],
            [
                6
            ],
            [
                4
            ],
            [
                6
            ],
            [
                5
            ],
            [
                6
            ],
            [
                6,
                5,
                3
            ],
            [
                6,
                1,
                1,
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                3
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                5
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                3
            ],
            [
                6
            ],
            [
                6,
                1,
                0
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                5,
                6,
                0,
                1
            ],
            [
                6
            ],
            [
                6
            ],
            [
                5,
                3,
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                4
            ],
            [
                6,
                1,
                0,
                1
            ],
            [
                5,
                3,
                6
            ],
            [
                6,
                0,
                5,
                0
            ],
            [
                6
            ],
            [
                6,
                3
            ],
            [
                6
            ],
            [
                3
            ],
            [
                4
            ],
            [
                5,
                6
            ],
            [
                6,
                0,
                0,
                0,
                1,
                0,
                0
            ],
            [
                6
            ],
            [
                5,
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                5,
                6,
                1
            ],
            [
                6,
                3
            ],
            [
                6,
                3
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                1,
                0,
                1
            ],
            [
                6
            ],
            [
                5,
                3
            ],
            [
                6
            ],
            [
                6
            ],
            [
                5,
                6
            ],
            [
                6,
                3
            ],
            [
                6,
                5
            ],
            [
                6
            ],
            [
                6
            ],
            [
                3,
                6
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6
            ],
            [
                6,
                1,
                0
            ],
            [
                6,
                1,
                0
            ],
            [
                3
            ],
            [
                6
            ],
            [
                3,
                5
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                1,
                0
            ],
            [
                6,
                6
            ],
            [
                6,
                5,
                6
            ],
            [
                3
            ],
            [
                6
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            4,
            5,
            6
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 3,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "common": 33,
            "shape_tuple": 1,
            "input_var": 110,
            "tf_int64": 1,
            "tf_int32": 16,
            "axis": 0,
            "provided": 118,
            "tf_float32": 0,
            "shape": 0,
            "tf_bool": 0
        }
    }
]