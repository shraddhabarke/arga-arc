[
    {
        "name": "google_01",
        "description": "Convert index tensor into pairs for SparseTensor indexing",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)",
        "source": "From an internal Google chat room, 09/07/2018",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 3, 3],]",
            "outputs": "[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n",
            "return tf.transpose(tf.stack([in1, tf.range(tf.size(in1))]))",
            "def transform(in1):\n    indices = tf.expand_dims(in1, axis=1)\n    indices = tf.concat([indices, tf.range(tf.shape(in1)[0], dtype=tf.int64)], axis=1)\n    return indices\n",
            "return tf.concat([tf.expand_dims(in1, -1), tf.range(tf.size(in1), dtype=tf.int32)], axis=1)",
            "return tf.stack([in1, tf.range(tf.size(in1))], axis=1)",
            "def transform(in1):\n    indices = tf.expand_dims(tf.range(tf.size(in1), dtype=tf.int64), axis=1)\n    values = tf.cast(tf.expand_dims(in1, axis=1), tf.int64)\n    return tf.concat([indices, values], axis=1)\n",
            "return tf.transpose(tf.stack([tf.tile(tf.range(tf.shape(in1)[0]), [tf.math.count_nonzero(in1)]), tf.boolean_mask(tf.range(tf.reduce_max(in1)+1), tf.tile(tf.expand_dims(in1, 1), [1, tf.shape(in1)[0]]))]))\n",
            "return tf.transpose(tf.stack([tf.repeat(tf.range(tf.size(in1)), tf.ones_like(in1)), in1]))",
            "return tf.transpose(tf.stack([in1, tf.range(tf.shape(in1)[0])]))",
            "def transform(in1):\n    pairs = tf.stack([in1, tf.range(tf.size(in1))], axis=1)\n    return pairs\n"
        ],
        "tf_operators": {
            "tf.size": 7,
            "tf.range": 10,
            "tf.stack": 7,
            "tf.transpose": 4,
            "tf.concat": 3,
            "tf.shape": 3,
            "tf.int64": 2,
            "tf.expand_dims": 4,
            "tf.int32": 1,
            "tf.cast": 1,
            "tf.boolean_mask": 1,
            "tf.reduce_max": 1,
            "tf.tile": 1,
            "tf.math.count_nonzero": 1,
            "tf.repeat": 1,
            "tf.ones_like": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1
            ],
            [],
            [
                1,
                0,
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                0,
                1,
                1,
                1,
                0
            ],
            [],
            [
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 5,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 17,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 3,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003968253968253968,
                "tf.add(x, y)": 0.003968253968253968,
                "tf.add_n(inputs)": 0.003968253968253968,
                "tf.argmax(input, axis)": 0.003968253968253968,
                "tf.argmin(input, axis)": 0.003968253968253968,
                "tf.argsort(values, axis, stable=True)": 0.003968253968253968,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.003968253968253968,
                "tf.boolean_mask(tensor, mask)": 0.007936507936507936,
                "tf.broadcast_to(input, shape)": 0.003968253968253968,
                "tf.cast(x, dtype)": 0.007936507936507936,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003968253968253968,
                "tf.concat(values, axis)": 0.015873015873015872,
                "tf.constant(value)": 0.003968253968253968,
                "tf.constant(value, dtype)": 0.003968253968253968,
                "tf.divide(x, y)": 0.003968253968253968,
                "tf.equal(x, y)": 0.003968253968253968,
                "tf.exp(x)": 0.003968253968253968,
                "tf.expand_dims(input, axis)": 0.023809523809523808,
                "tf.eye(num_rows)": 0.003968253968253968,
                "tf.eye(num_rows, num_columns)": 0.003968253968253968,
                "tf.eye(num_rows, dtype)": 0.003968253968253968,
                "tf.fill(dims, value)": 0.003968253968253968,
                "tf.gather(params, indices)": 0.003968253968253968,
                "tf.gather(params, indices, axis, batch_dims)": 0.003968253968253968,
                "tf.gather_nd(params, indices)": 0.003968253968253968,
                "tf.gather_nd(params, indices, batch_dims)": 0.003968253968253968,
                "tf.greater(x, y)": 0.003968253968253968,
                "tf.greater_equal(x, y)": 0.003968253968253968,
                "tf.math.bincount(arr)": 0.003968253968253968,
                "tf.math.ceil(x)": 0.003968253968253968,
                "tf.math.count_nonzero(input)": 0.007936507936507936,
                "tf.math.count_nonzero(input, axis)": 0.003968253968253968,
                "tf.math.cumsum(x, axis)": 0.003968253968253968,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003968253968253968,
                "tf.math.divide_no_nan(x, y)": 0.003968253968253968,
                "tf.math.floor(x)": 0.003968253968253968,
                "tf.math.log(x)": 0.003968253968253968,
                "tf.math.logical_and(x, y)": 0.003968253968253968,
                "tf.math.logical_not(x)": 0.003968253968253968,
                "tf.math.logical_or(x, y)": 0.003968253968253968,
                "tf.math.logical_xor(x, y)": 0.003968253968253968,
                "tf.math.negative(x)": 0.003968253968253968,
                "tf.math.reciprocal(x)": 0.003968253968253968,
                "tf.math.reciprocal_no_nan(x)": 0.003968253968253968,
                "tf.math.segment_max(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_mean(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_min(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_prod(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_sum(data, segment_ids)": 0.003968253968253968,
                "tf.math.squared_difference(x, y)": 0.003968253968253968,
                "tf.math.top_k(input, k)": 0.003968253968253968,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.matmul(a, b)": 0.003968253968253968,
                "tf.maximum(x, y)": 0.003968253968253968,
                "tf.minimum(x, y)": 0.003968253968253968,
                "tf.multiply(x, y)": 0.003968253968253968,
                "tf.not_equal(x, y)": 0.003968253968253968,
                "tf.one_hot(indices, depth)": 0.003968253968253968,
                "tf.ones(shape)": 0.003968253968253968,
                "tf.ones_like(input)": 0.007936507936507936,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.003968253968253968,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.003968253968253968,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.003968253968253968,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.003968253968253968,
                "tf.range(start)": 0.03571428571428571,
                "tf.range(start, limit, delta)": 0.015873015873015872,
                "tf.reduce_any(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_all(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_max(input_tensor)": 0.007936507936507936,
                "tf.reduce_max(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_mean(input_tensor)": 0.003968253968253968,
                "tf.reduce_mean(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_min(input_tensor)": 0.003968253968253968,
                "tf.reduce_min(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_prod(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_sum(input_tensor)": 0.003968253968253968,
                "tf.reduce_sum(input_tensor, axis)": 0.003968253968253968,
                "tf.repeat(input, repeats)": 0.007936507936507936,
                "tf.repeat(input, repeats, axis)": 0.003968253968253968,
                "tf.reshape(tensor, shape)": 0.003968253968253968,
                "tf.reverse(tensor, axis)": 0.003968253968253968,
                "tf.roll(input, shift, axis)": 0.003968253968253968,
                "tf.round(x)": 0.003968253968253968,
                "tf.scatter_nd(indices, updates, shape)": 0.003968253968253968,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.003968253968253968,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.003968253968253968,
                "tf.sequence_mask(lengths)": 0.003968253968253968,
                "tf.sequence_mask(lengths, maxlen)": 0.003968253968253968,
                "tf.shape(input)": 0.01984126984126984,
                "tf.sign(x)": 0.003968253968253968,
                "tf.sort(values, axis)": 0.003968253968253968,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.003968253968253968,
                "tf.sqrt(x)": 0.003968253968253968,
                "tf.square(x)": 0.003968253968253968,
                "tf.squeeze(input)": 0.003968253968253968,
                "tf.squeeze(input, axis)": 0.003968253968253968,
                "tf.stack(values, axis)": 0.031746031746031744,
                "tf.subtract(x, y)": 0.003968253968253968,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003968253968253968,
                "tf.tensordot(a, b, axes)": 0.003968253968253968,
                "tf.tile(input, multiples)": 0.011904761904761904,
                "tf.transpose(a)": 0.01984126984126984,
                "tf.transpose(a, perm)": 0.003968253968253968,
                "tf.unique_with_counts(x)": 0.003968253968253968,
                "tf.unstack(value, axis)": 0.003968253968253968,
                "tf.where(condition)": 0.003968253968253968,
                "tf.where(condition, x, y)": 0.003968253968253968,
                "tf.zeros(shape)": 0.003968253968253968,
                "tf.zeros_like(input)": 0.003968253968253968,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003968253968253968,
                "tf.sparse.add(a, b)": 0.003968253968253968,
                "tf.sparse.concat(axis, sp_inputs)": 0.003968253968253968,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003968253968253968,
                "tf.sparse.from_dense(tensor)": 0.003968253968253968,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003968253968253968,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003968253968253968,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003968253968253968,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003968253968253968,
                "tf.sparse.reset_shape(sp_input)": 0.003968253968253968,
                "tf.sparse.reshape(sp_input, shape)": 0.003968253968253968,
                "tf.sparse.retain(sp_input, to_retain)": 0.003968253968253968,
                "tf.sparse.slice(sp_input, start, size)": 0.003968253968253968,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003968253968253968,
                "tf.sparse.to_dense(sp_input)": 0.003968253968253968,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003968253968253968,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003968253968253968,
                "tf.sparse.transpose(sp_input)": 0.003968253968253968,
                "tf.sparse.transpose(sp_input, perm)": 0.003968253968253968,
                "IndexingAxis1Operation": 0.003968253968253968,
                "IndexingOperation": 0.01984126984126984,
                "PairCreationOperation": 0.003968253968253968,
                "SingletonTupleCreationOperation": 0.003968253968253968,
                "SlicingAxis0BothOperation": 0.003968253968253968,
                "SlicingAxis0LeftOperation": 0.003968253968253968,
                "SlicingAxis0RightOperation": 0.003968253968253968,
                "SlicingAxis1BothOperation": 0.003968253968253968,
                "SlicingAxis1LeftOperation": 0.003968253968253968,
                "SlicingAxis1RightOperation": 0.003968253968253968,
                "TripleCreationOperation": 0.003968253968253968,
                "PROVIDED_CONSTANT_WEIGHT": 0.003968253968253968,
                "COMMON_CONSTANT_WEIGHT": 0.07142857142857142,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003968253968253968,
                "INPUT_VARIABLE_WEIGHT": 0.12301587301587301,
                "AXIS_CONSTANT_WEIGHT": 0.003968253968253968,
                "SHAPE_CONSTANT_WEIGHT": 0.003968253968253968,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003968253968253968,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.007936507936507936,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003968253968253968,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003968253968253968,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.015873015873015872
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 6,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 6
            }
        }
    },
    {
        "name": "google_03",
        "description": "Slice the first dimension of a SparseTensor",
        "target_program": "tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))",
        "source": "Real task encountered by Googler, 11/01/2018",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1], [1, 1, 1], [1, 1, 2]], values=[1., 1., 1., 1.], dense_shape=[2, 2, 800])",
            "outputs": "tf.SparseTensor(indices=[[0, 0, 0], [0, 1, 1]], values=[1., 1.], dense_shape=[1, 2, 800])"
        },
        "completions": [
            "output_indices = tf.sparse.slice(in1.indices, [0, 0, 0], [2, -1, -1])\noutput_values = tf.sparse.slice(in1.values, [0], [2])\noutput_dense_shape = tf.sparse.slice(in1.dense_shape, [0], [1])\n\nreturn tf.SparseTensor(indices=output_indices, values=output_values, dense_shape=output_dense_shape)\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [2, -1, -1])",
            "def transform(in1):\n    return tf.sparse.slice(in1, tf.constant([0, 0, 0], dtype=tf.int64), tf.constant([1, 2, 800], dtype=tf.int64))",
            "output = tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\nreturn output\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])\n",
            "return tf.sparse.slice(in1, [0, 0, 0], [1, 2, 800])"
        ],
        "tf_operators": {
            "tf.sparse.slice": 10,
            "tf.SparseTensor": 1,
            "tf.int64": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                0,
                0,
                2,
                -1,
                -1,
                0,
                2,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                2,
                -1,
                -1
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ],
            [
                0,
                0,
                0,
                1,
                2,
                800
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            800,
            -1
        ],
        "constant_counts": [
            {
                "common": 8,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 2,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 9,
            "shape": 8,
            "tf_bool": 0,
            "provided": 0,
            "common": 45,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 11,
            "tf_int64": 2,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00411522633744856,
                "tf.add(x, y)": 0.00411522633744856,
                "tf.add_n(inputs)": 0.00411522633744856,
                "tf.argmax(input, axis)": 0.00411522633744856,
                "tf.argmin(input, axis)": 0.00411522633744856,
                "tf.argsort(values, axis, stable=True)": 0.00411522633744856,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.00411522633744856,
                "tf.boolean_mask(tensor, mask)": 0.00411522633744856,
                "tf.broadcast_to(input, shape)": 0.00411522633744856,
                "tf.cast(x, dtype)": 0.00411522633744856,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00411522633744856,
                "tf.concat(values, axis)": 0.00411522633744856,
                "tf.constant(value)": 0.00411522633744856,
                "tf.constant(value, dtype)": 0.00411522633744856,
                "tf.divide(x, y)": 0.00411522633744856,
                "tf.equal(x, y)": 0.00411522633744856,
                "tf.exp(x)": 0.00411522633744856,
                "tf.expand_dims(input, axis)": 0.00411522633744856,
                "tf.eye(num_rows)": 0.00411522633744856,
                "tf.eye(num_rows, num_columns)": 0.00411522633744856,
                "tf.eye(num_rows, dtype)": 0.00411522633744856,
                "tf.fill(dims, value)": 0.00411522633744856,
                "tf.gather(params, indices)": 0.00411522633744856,
                "tf.gather(params, indices, axis, batch_dims)": 0.00411522633744856,
                "tf.gather_nd(params, indices)": 0.00411522633744856,
                "tf.gather_nd(params, indices, batch_dims)": 0.00411522633744856,
                "tf.greater(x, y)": 0.00411522633744856,
                "tf.greater_equal(x, y)": 0.00411522633744856,
                "tf.math.bincount(arr)": 0.00411522633744856,
                "tf.math.ceil(x)": 0.00411522633744856,
                "tf.math.count_nonzero(input)": 0.00411522633744856,
                "tf.math.count_nonzero(input, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00411522633744856,
                "tf.math.divide_no_nan(x, y)": 0.00411522633744856,
                "tf.math.floor(x)": 0.00411522633744856,
                "tf.math.log(x)": 0.00411522633744856,
                "tf.math.logical_and(x, y)": 0.00411522633744856,
                "tf.math.logical_not(x)": 0.00411522633744856,
                "tf.math.logical_or(x, y)": 0.00411522633744856,
                "tf.math.logical_xor(x, y)": 0.00411522633744856,
                "tf.math.negative(x)": 0.00411522633744856,
                "tf.math.reciprocal(x)": 0.00411522633744856,
                "tf.math.reciprocal_no_nan(x)": 0.00411522633744856,
                "tf.math.segment_max(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_mean(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_min(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_prod(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_sum(data, segment_ids)": 0.00411522633744856,
                "tf.math.squared_difference(x, y)": 0.00411522633744856,
                "tf.math.top_k(input, k)": 0.00411522633744856,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.matmul(a, b)": 0.00411522633744856,
                "tf.maximum(x, y)": 0.00411522633744856,
                "tf.minimum(x, y)": 0.00411522633744856,
                "tf.multiply(x, y)": 0.00411522633744856,
                "tf.not_equal(x, y)": 0.00411522633744856,
                "tf.one_hot(indices, depth)": 0.00411522633744856,
                "tf.ones(shape)": 0.00411522633744856,
                "tf.ones_like(input)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.00411522633744856,
                "tf.range(start)": 0.00411522633744856,
                "tf.range(start, limit, delta)": 0.00411522633744856,
                "tf.reduce_any(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_all(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_max(input_tensor)": 0.00411522633744856,
                "tf.reduce_max(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_min(input_tensor)": 0.00411522633744856,
                "tf.reduce_min(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_prod(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor, axis)": 0.00411522633744856,
                "tf.repeat(input, repeats)": 0.00411522633744856,
                "tf.repeat(input, repeats, axis)": 0.00411522633744856,
                "tf.reshape(tensor, shape)": 0.00411522633744856,
                "tf.reverse(tensor, axis)": 0.00411522633744856,
                "tf.roll(input, shift, axis)": 0.00411522633744856,
                "tf.round(x)": 0.00411522633744856,
                "tf.scatter_nd(indices, updates, shape)": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.00411522633744856,
                "tf.sequence_mask(lengths)": 0.00411522633744856,
                "tf.sequence_mask(lengths, maxlen)": 0.00411522633744856,
                "tf.shape(input)": 0.00411522633744856,
                "tf.sign(x)": 0.00411522633744856,
                "tf.sort(values, axis)": 0.00411522633744856,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.00411522633744856,
                "tf.sqrt(x)": 0.00411522633744856,
                "tf.square(x)": 0.00411522633744856,
                "tf.squeeze(input)": 0.00411522633744856,
                "tf.squeeze(input, axis)": 0.00411522633744856,
                "tf.stack(values, axis)": 0.00411522633744856,
                "tf.subtract(x, y)": 0.00411522633744856,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00411522633744856,
                "tf.tensordot(a, b, axes)": 0.00411522633744856,
                "tf.tile(input, multiples)": 0.00411522633744856,
                "tf.transpose(a)": 0.00411522633744856,
                "tf.transpose(a, perm)": 0.00411522633744856,
                "tf.unique_with_counts(x)": 0.00411522633744856,
                "tf.unstack(value, axis)": 0.00411522633744856,
                "tf.where(condition)": 0.00411522633744856,
                "tf.where(condition, x, y)": 0.00411522633744856,
                "tf.zeros(shape)": 0.00411522633744856,
                "tf.zeros_like(input)": 0.00411522633744856,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00823045267489712,
                "tf.sparse.add(a, b)": 0.00411522633744856,
                "tf.sparse.concat(axis, sp_inputs)": 0.00411522633744856,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00411522633744856,
                "tf.sparse.from_dense(tensor)": 0.00411522633744856,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reset_shape(sp_input)": 0.00411522633744856,
                "tf.sparse.reshape(sp_input, shape)": 0.00411522633744856,
                "tf.sparse.retain(sp_input, to_retain)": 0.00411522633744856,
                "tf.sparse.slice(sp_input, start, size)": 0.053497942386831275,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00411522633744856,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input, perm)": 0.00411522633744856,
                "IndexingAxis1Operation": 0.00411522633744856,
                "IndexingOperation": 0.00411522633744856,
                "PairCreationOperation": 0.00411522633744856,
                "SingletonTupleCreationOperation": 0.00411522633744856,
                "SlicingAxis0BothOperation": 0.00411522633744856,
                "SlicingAxis0LeftOperation": 0.00411522633744856,
                "SlicingAxis0RightOperation": 0.00411522633744856,
                "SlicingAxis1BothOperation": 0.00411522633744856,
                "SlicingAxis1LeftOperation": 0.00411522633744856,
                "SlicingAxis1RightOperation": 0.00411522633744856,
                "TripleCreationOperation": 0.00411522633744856,
                "PROVIDED_CONSTANT_WEIGHT": 0.00411522633744856,
                "COMMON_CONSTANT_WEIGHT": 0.18930041152263374,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00411522633744856,
                "INPUT_VARIABLE_WEIGHT": 0.0411522633744856,
                "AXIS_CONSTANT_WEIGHT": 0.04938271604938271,
                "SHAPE_CONSTANT_WEIGHT": 0.037037037037037035,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.012345679012345678
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 4,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 5,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 5,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 6
            }
        }
    },
    {
        "name": "google_04",
        "description": "Reshape a flat array into a rank 3 tensor",
        "target_program": "tf.reshape(in1, shape=(4, 3, 2))",
        "source": "Real task encountered by Googler, 3/21/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432],]",
            "outputs": "[[[111, 112], [121, 122], [131, 132]],    [[211, 212], [221, 222], [231, 232]],    [[311, 312], [321, 322], [331, 332]],    [[411, 412], [421, 422], [431, 432]]]"
        },
        "completions": [
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))",
            "def transform(in1):\n    return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))",
            "return tf.reshape(in1, (4, 3, 2))\n",
            "return tf.reshape(in1, (4, 3, 2))"
        ],
        "tf_operators": {
            "tf.reshape": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ],
            [
                4,
                3,
                2
            ]
        ],
        "all_constants": [
            2,
            3,
            4
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 1
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 10,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.005128205128205128,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005128205128205128,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.005128205128205128,
                "tf.constant(value)": 0.005128205128205128,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.005128205128205128,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.005128205128205128,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.005128205128205128,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.005128205128205128,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.05641025641025641,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.005128205128205128,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.005128205128205128,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005128205128205128,
                "tf.tensordot(a, b, axes)": 0.005128205128205128,
                "tf.tile(input, multiples)": 0.005128205128205128,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.005128205128205128,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.005128205128205128,
                "PairCreationOperation": 0.005128205128205128,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.05641025641025641,
                "PROVIDED_CONSTANT_WEIGHT": 0.005128205128205128,
                "COMMON_CONSTANT_WEIGHT": 0.005128205128205128,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.05641025641025641,
                "AXIS_CONSTANT_WEIGHT": 0.005128205128205128,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.05641025641025641,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 4,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 4,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_05",
        "description": "Repeat each input entry 6 times",
        "target_program": "tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))",
        "source": "Real task encountered by Googler, 3/22/2019",
        "constants": "[6]",
        "examples": {
            "inputs": "[[[1, 2, 3, 4], [5, 6, 7, 8]],]",
            "outputs": "[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4],     [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]],    [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8],     [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]]"
        },
        "completions": [
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 6])\n",
            "return tf.repeat(in1, 6)",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(in1, 6, axis=0)",
            "return tf.repeat(in1, 6)",
            "out1 = tf.tile(tf.expand_dims(in1, axis=-1), [1, 1, 6])\n",
            "return tf.repeat(in1, repeats=6, axis=1)\n",
            "return tf.repeat(in1, repeats=6, axis=1)",
            "return tf.repeat(tf.expand_dims(in1, axis=2), repeats=6, axis=2)",
            "return tf.repeat(in1, 6, axis=1)"
        ],
        "tf_operators": {
            "tf.tile": 2,
            "tf.expand_dims": 3,
            "tf.repeat": 8
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                1,
                1,
                6
            ],
            [
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                0
            ],
            [
                6
            ],
            [
                -1,
                1,
                1,
                6
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                2,
                6,
                2
            ],
            [
                6,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            6,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 10,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 3,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.005128205128205128,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005128205128205128,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.005128205128205128,
                "tf.constant(value)": 0.005128205128205128,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.005128205128205128,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.020512820512820513,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.005128205128205128,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.015384615384615385,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.005128205128205128,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.005128205128205128,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.005128205128205128,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005128205128205128,
                "tf.tensordot(a, b, axes)": 0.005128205128205128,
                "tf.tile(input, multiples)": 0.015384615384615385,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.005128205128205128,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.005128205128205128,
                "PairCreationOperation": 0.005128205128205128,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.005128205128205128,
                "PROVIDED_CONSTANT_WEIGHT": 0.05641025641025641,
                "COMMON_CONSTANT_WEIGHT": 0.05641025641025641,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.05641025641025641,
                "AXIS_CONSTANT_WEIGHT": 0.020512820512820513,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 6,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_06",
        "description": "Take the max from each group of elements",
        "target_program": "tf.math.segment_max(in2, in1)",
        "source": "Real task encountered by Googler, 3/28/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 1, 2, 3, 3, 3, 3],[1, 3, 4, 5, 10, 8, 9, 4],]",
            "outputs": "[1, 4, 5, 10]"
        },
        "completions": [
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.gather_nd(in2, tf.expand_dims(tf.argmax(in1, axis=0), axis=1))\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "def transform(in1, in2):\n    max_values = tf.math.segment_max(in2, segment_ids=in1)\n    return max_values\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1) + 1)"
        ],
        "tf_operators": {
            "tf.math.unsorted_segment_max": 3,
            "tf.reduce_max": 3,
            "tf.math.segment_max": 6,
            "tf.expand_dims": 1,
            "tf.gather_nd": 1,
            "tf.argmax": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [],
            [],
            [
                0,
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 23,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 5,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005050505050505051,
                "tf.add(x, y)": 0.005050505050505051,
                "tf.add_n(inputs)": 0.005050505050505051,
                "tf.argmax(input, axis)": 0.010101010101010102,
                "tf.argmin(input, axis)": 0.005050505050505051,
                "tf.argsort(values, axis, stable=True)": 0.005050505050505051,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005050505050505051,
                "tf.boolean_mask(tensor, mask)": 0.005050505050505051,
                "tf.broadcast_to(input, shape)": 0.005050505050505051,
                "tf.cast(x, dtype)": 0.005050505050505051,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005050505050505051,
                "tf.concat(values, axis)": 0.005050505050505051,
                "tf.constant(value)": 0.005050505050505051,
                "tf.constant(value, dtype)": 0.005050505050505051,
                "tf.divide(x, y)": 0.005050505050505051,
                "tf.equal(x, y)": 0.005050505050505051,
                "tf.exp(x)": 0.005050505050505051,
                "tf.expand_dims(input, axis)": 0.010101010101010102,
                "tf.eye(num_rows)": 0.005050505050505051,
                "tf.eye(num_rows, num_columns)": 0.005050505050505051,
                "tf.eye(num_rows, dtype)": 0.005050505050505051,
                "tf.fill(dims, value)": 0.005050505050505051,
                "tf.gather(params, indices)": 0.005050505050505051,
                "tf.gather(params, indices, axis, batch_dims)": 0.005050505050505051,
                "tf.gather_nd(params, indices)": 0.010101010101010102,
                "tf.gather_nd(params, indices, batch_dims)": 0.005050505050505051,
                "tf.greater(x, y)": 0.005050505050505051,
                "tf.greater_equal(x, y)": 0.005050505050505051,
                "tf.math.bincount(arr)": 0.005050505050505051,
                "tf.math.ceil(x)": 0.005050505050505051,
                "tf.math.count_nonzero(input)": 0.005050505050505051,
                "tf.math.count_nonzero(input, axis)": 0.005050505050505051,
                "tf.math.cumsum(x, axis)": 0.005050505050505051,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005050505050505051,
                "tf.math.divide_no_nan(x, y)": 0.005050505050505051,
                "tf.math.floor(x)": 0.005050505050505051,
                "tf.math.log(x)": 0.005050505050505051,
                "tf.math.logical_and(x, y)": 0.005050505050505051,
                "tf.math.logical_not(x)": 0.005050505050505051,
                "tf.math.logical_or(x, y)": 0.005050505050505051,
                "tf.math.logical_xor(x, y)": 0.005050505050505051,
                "tf.math.negative(x)": 0.005050505050505051,
                "tf.math.reciprocal(x)": 0.005050505050505051,
                "tf.math.reciprocal_no_nan(x)": 0.005050505050505051,
                "tf.math.segment_max(data, segment_ids)": 0.03535353535353535,
                "tf.math.segment_mean(data, segment_ids)": 0.005050505050505051,
                "tf.math.segment_min(data, segment_ids)": 0.005050505050505051,
                "tf.math.segment_prod(data, segment_ids)": 0.005050505050505051,
                "tf.math.segment_sum(data, segment_ids)": 0.005050505050505051,
                "tf.math.squared_difference(x, y)": 0.005050505050505051,
                "tf.math.top_k(input, k)": 0.005050505050505051,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.020202020202020204,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.matmul(a, b)": 0.005050505050505051,
                "tf.maximum(x, y)": 0.005050505050505051,
                "tf.minimum(x, y)": 0.005050505050505051,
                "tf.multiply(x, y)": 0.005050505050505051,
                "tf.not_equal(x, y)": 0.005050505050505051,
                "tf.one_hot(indices, depth)": 0.005050505050505051,
                "tf.ones(shape)": 0.005050505050505051,
                "tf.ones_like(input)": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005050505050505051,
                "tf.range(start)": 0.005050505050505051,
                "tf.range(start, limit, delta)": 0.005050505050505051,
                "tf.reduce_any(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_all(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_max(input_tensor)": 0.020202020202020204,
                "tf.reduce_max(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_mean(input_tensor)": 0.005050505050505051,
                "tf.reduce_mean(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_min(input_tensor)": 0.005050505050505051,
                "tf.reduce_min(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_prod(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_sum(input_tensor)": 0.005050505050505051,
                "tf.reduce_sum(input_tensor, axis)": 0.005050505050505051,
                "tf.repeat(input, repeats)": 0.005050505050505051,
                "tf.repeat(input, repeats, axis)": 0.005050505050505051,
                "tf.reshape(tensor, shape)": 0.005050505050505051,
                "tf.reverse(tensor, axis)": 0.005050505050505051,
                "tf.roll(input, shift, axis)": 0.005050505050505051,
                "tf.round(x)": 0.005050505050505051,
                "tf.scatter_nd(indices, updates, shape)": 0.005050505050505051,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005050505050505051,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005050505050505051,
                "tf.sequence_mask(lengths)": 0.005050505050505051,
                "tf.sequence_mask(lengths, maxlen)": 0.005050505050505051,
                "tf.shape(input)": 0.005050505050505051,
                "tf.sign(x)": 0.005050505050505051,
                "tf.sort(values, axis)": 0.005050505050505051,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005050505050505051,
                "tf.sqrt(x)": 0.005050505050505051,
                "tf.square(x)": 0.005050505050505051,
                "tf.squeeze(input)": 0.005050505050505051,
                "tf.squeeze(input, axis)": 0.005050505050505051,
                "tf.stack(values, axis)": 0.005050505050505051,
                "tf.subtract(x, y)": 0.005050505050505051,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005050505050505051,
                "tf.tensordot(a, b, axes)": 0.005050505050505051,
                "tf.tile(input, multiples)": 0.005050505050505051,
                "tf.transpose(a)": 0.005050505050505051,
                "tf.transpose(a, perm)": 0.005050505050505051,
                "tf.unique_with_counts(x)": 0.005050505050505051,
                "tf.unstack(value, axis)": 0.005050505050505051,
                "tf.where(condition)": 0.005050505050505051,
                "tf.where(condition, x, y)": 0.005050505050505051,
                "tf.zeros(shape)": 0.005050505050505051,
                "tf.zeros_like(input)": 0.005050505050505051,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005050505050505051,
                "tf.sparse.add(a, b)": 0.005050505050505051,
                "tf.sparse.concat(axis, sp_inputs)": 0.005050505050505051,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005050505050505051,
                "tf.sparse.from_dense(tensor)": 0.005050505050505051,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005050505050505051,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005050505050505051,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005050505050505051,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005050505050505051,
                "tf.sparse.reset_shape(sp_input)": 0.005050505050505051,
                "tf.sparse.reshape(sp_input, shape)": 0.005050505050505051,
                "tf.sparse.retain(sp_input, to_retain)": 0.005050505050505051,
                "tf.sparse.slice(sp_input, start, size)": 0.005050505050505051,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005050505050505051,
                "tf.sparse.to_dense(sp_input)": 0.005050505050505051,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005050505050505051,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005050505050505051,
                "tf.sparse.transpose(sp_input)": 0.005050505050505051,
                "tf.sparse.transpose(sp_input, perm)": 0.005050505050505051,
                "IndexingAxis1Operation": 0.005050505050505051,
                "IndexingOperation": 0.005050505050505051,
                "PairCreationOperation": 0.005050505050505051,
                "SingletonTupleCreationOperation": 0.005050505050505051,
                "SlicingAxis0BothOperation": 0.005050505050505051,
                "SlicingAxis0LeftOperation": 0.005050505050505051,
                "SlicingAxis0RightOperation": 0.005050505050505051,
                "SlicingAxis1BothOperation": 0.005050505050505051,
                "SlicingAxis1LeftOperation": 0.005050505050505051,
                "SlicingAxis1RightOperation": 0.005050505050505051,
                "TripleCreationOperation": 0.005050505050505051,
                "PROVIDED_CONSTANT_WEIGHT": 0.005050505050505051,
                "COMMON_CONSTANT_WEIGHT": 0.030303030303030304,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005050505050505051,
                "INPUT_VARIABLE_WEIGHT": 0.12121212121212122,
                "AXIS_CONSTANT_WEIGHT": 0.005050505050505051,
                "SHAPE_CONSTANT_WEIGHT": 0.005050505050505051,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005050505050505051
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 5,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_07",
        "description": "Take the argmax of each group of elements",
        "target_program": "tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)",
        "source": "Real task encountered by Googler, 3/29/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5],[4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0],]",
            "outputs": "[2, 3, 1, 0, 1, 0]"
        },
        "completions": [
            "max_indices = tf.math.segment_max(in2, in1)\nreturn max_indices\n",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.math.segment_max(in2, in1)",
            "return tf.argmax(tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1), axis=0)",
            "return tf.argmax(tf.unstack(in2), axis=1)\n",
            "def transform(in1, in2):\n    grouped_max = tf.math.segment_max(in2, segment_ids=in1)\n    result = tf.argmax(grouped_max, axis=1)\n    return result\n",
            "return tf.math.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n",
            "return tf.argmax(tf.math.segment_max(in2, in1), axis=1)\n",
            "return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)"
        ],
        "tf_operators": {
            "tf.math.segment_max": 6,
            "tf.math.unsorted_segment_max": 2,
            "tf.argmax": 4,
            "tf.reduce_max": 3,
            "tf.unstack": 1,
            "tf.unsorted_segment_max": 1
        },
        "coverage_percentage": 16.666666666666664,
        "total_covered": 1,
        "total_in_target": 6,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 22,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 7,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005,
                "tf.add(x, y)": 0.005,
                "tf.add_n(inputs)": 0.005,
                "tf.argmax(input, axis)": 0.025,
                "tf.argmin(input, axis)": 0.005,
                "tf.argsort(values, axis, stable=True)": 0.005,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005,
                "tf.boolean_mask(tensor, mask)": 0.005,
                "tf.broadcast_to(input, shape)": 0.005,
                "tf.cast(x, dtype)": 0.005,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005,
                "tf.concat(values, axis)": 0.005,
                "tf.constant(value)": 0.005,
                "tf.constant(value, dtype)": 0.005,
                "tf.divide(x, y)": 0.005,
                "tf.equal(x, y)": 0.005,
                "tf.exp(x)": 0.005,
                "tf.expand_dims(input, axis)": 0.005,
                "tf.eye(num_rows)": 0.005,
                "tf.eye(num_rows, num_columns)": 0.005,
                "tf.eye(num_rows, dtype)": 0.005,
                "tf.fill(dims, value)": 0.005,
                "tf.gather(params, indices)": 0.005,
                "tf.gather(params, indices, axis, batch_dims)": 0.005,
                "tf.gather_nd(params, indices)": 0.005,
                "tf.gather_nd(params, indices, batch_dims)": 0.005,
                "tf.greater(x, y)": 0.005,
                "tf.greater_equal(x, y)": 0.005,
                "tf.math.bincount(arr)": 0.005,
                "tf.math.ceil(x)": 0.005,
                "tf.math.count_nonzero(input)": 0.005,
                "tf.math.count_nonzero(input, axis)": 0.005,
                "tf.math.cumsum(x, axis)": 0.005,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005,
                "tf.math.divide_no_nan(x, y)": 0.005,
                "tf.math.floor(x)": 0.005,
                "tf.math.log(x)": 0.005,
                "tf.math.logical_and(x, y)": 0.005,
                "tf.math.logical_not(x)": 0.005,
                "tf.math.logical_or(x, y)": 0.005,
                "tf.math.logical_xor(x, y)": 0.005,
                "tf.math.negative(x)": 0.005,
                "tf.math.reciprocal(x)": 0.005,
                "tf.math.reciprocal_no_nan(x)": 0.005,
                "tf.math.segment_max(data, segment_ids)": 0.035,
                "tf.math.segment_mean(data, segment_ids)": 0.005,
                "tf.math.segment_min(data, segment_ids)": 0.005,
                "tf.math.segment_prod(data, segment_ids)": 0.005,
                "tf.math.segment_sum(data, segment_ids)": 0.005,
                "tf.math.squared_difference(x, y)": 0.005,
                "tf.math.top_k(input, k)": 0.005,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.015,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005,
                "tf.matmul(a, b)": 0.005,
                "tf.maximum(x, y)": 0.005,
                "tf.minimum(x, y)": 0.005,
                "tf.multiply(x, y)": 0.005,
                "tf.not_equal(x, y)": 0.005,
                "tf.one_hot(indices, depth)": 0.005,
                "tf.ones(shape)": 0.005,
                "tf.ones_like(input)": 0.005,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005,
                "tf.range(start)": 0.005,
                "tf.range(start, limit, delta)": 0.005,
                "tf.reduce_any(input_tensor, axis)": 0.005,
                "tf.reduce_all(input_tensor, axis)": 0.005,
                "tf.reduce_max(input_tensor)": 0.02,
                "tf.reduce_max(input_tensor, axis)": 0.005,
                "tf.reduce_mean(input_tensor)": 0.005,
                "tf.reduce_mean(input_tensor, axis)": 0.005,
                "tf.reduce_min(input_tensor)": 0.005,
                "tf.reduce_min(input_tensor, axis)": 0.005,
                "tf.reduce_prod(input_tensor, axis)": 0.005,
                "tf.reduce_sum(input_tensor)": 0.005,
                "tf.reduce_sum(input_tensor, axis)": 0.005,
                "tf.repeat(input, repeats)": 0.005,
                "tf.repeat(input, repeats, axis)": 0.005,
                "tf.reshape(tensor, shape)": 0.005,
                "tf.reverse(tensor, axis)": 0.005,
                "tf.roll(input, shift, axis)": 0.005,
                "tf.round(x)": 0.005,
                "tf.scatter_nd(indices, updates, shape)": 0.005,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005,
                "tf.sequence_mask(lengths)": 0.005,
                "tf.sequence_mask(lengths, maxlen)": 0.005,
                "tf.shape(input)": 0.005,
                "tf.sign(x)": 0.005,
                "tf.sort(values, axis)": 0.005,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005,
                "tf.sqrt(x)": 0.005,
                "tf.square(x)": 0.005,
                "tf.squeeze(input)": 0.005,
                "tf.squeeze(input, axis)": 0.005,
                "tf.stack(values, axis)": 0.005,
                "tf.subtract(x, y)": 0.005,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005,
                "tf.tensordot(a, b, axes)": 0.005,
                "tf.tile(input, multiples)": 0.005,
                "tf.transpose(a)": 0.005,
                "tf.transpose(a, perm)": 0.005,
                "tf.unique_with_counts(x)": 0.005,
                "tf.unstack(value, axis)": 0.01,
                "tf.where(condition)": 0.005,
                "tf.where(condition, x, y)": 0.005,
                "tf.zeros(shape)": 0.005,
                "tf.zeros_like(input)": 0.005,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005,
                "tf.sparse.add(a, b)": 0.005,
                "tf.sparse.concat(axis, sp_inputs)": 0.005,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005,
                "tf.sparse.from_dense(tensor)": 0.005,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005,
                "tf.sparse.reset_shape(sp_input)": 0.005,
                "tf.sparse.reshape(sp_input, shape)": 0.005,
                "tf.sparse.retain(sp_input, to_retain)": 0.005,
                "tf.sparse.slice(sp_input, start, size)": 0.005,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005,
                "tf.sparse.to_dense(sp_input)": 0.005,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005,
                "tf.sparse.transpose(sp_input)": 0.005,
                "tf.sparse.transpose(sp_input, perm)": 0.005,
                "IndexingAxis1Operation": 0.005,
                "IndexingOperation": 0.005,
                "PairCreationOperation": 0.005,
                "SingletonTupleCreationOperation": 0.005,
                "SlicingAxis0BothOperation": 0.005,
                "SlicingAxis0LeftOperation": 0.005,
                "SlicingAxis0RightOperation": 0.005,
                "SlicingAxis1BothOperation": 0.005,
                "SlicingAxis1LeftOperation": 0.005,
                "SlicingAxis1RightOperation": 0.005,
                "TripleCreationOperation": 0.005,
                "PROVIDED_CONSTANT_WEIGHT": 0.005,
                "COMMON_CONSTANT_WEIGHT": 0.04,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005,
                "INPUT_VARIABLE_WEIGHT": 0.115,
                "AXIS_CONSTANT_WEIGHT": 0.005,
                "SHAPE_CONSTANT_WEIGHT": 0.005,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 5,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 5,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 6,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_08",
        "description": "create a mask for sequences of the given lengths",
        "target_program": "tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)",
        "source": "Real task encountered by Googler, 4/11/2019",
        "constants": "[5]",
        "examples": {
            "inputs": "[[3, 4, 2, 1],]",
            "outputs": "[[1, 1, 1, 0, 0],    [1, 1, 1, 1, 0],    [1, 1, 0, 0, 0],    [1, 0, 0, 0, 0]]"
        },
        "completions": [
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1)\n",
            "def transform(in1):\n    return tf.sequence_mask(in1)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n",
            "return tf.sequence_mask(in1, maxlen=5)\n"
        ],
        "tf_operators": {
            "tf.sequence_mask": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                5
            ],
            [
                5
            ]
        ],
        "all_constants": [
            5
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005714285714285714,
                "tf.add(x, y)": 0.005714285714285714,
                "tf.add_n(inputs)": 0.005714285714285714,
                "tf.argmax(input, axis)": 0.005714285714285714,
                "tf.argmin(input, axis)": 0.005714285714285714,
                "tf.argsort(values, axis, stable=True)": 0.005714285714285714,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005714285714285714,
                "tf.boolean_mask(tensor, mask)": 0.005714285714285714,
                "tf.broadcast_to(input, shape)": 0.005714285714285714,
                "tf.cast(x, dtype)": 0.005714285714285714,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005714285714285714,
                "tf.concat(values, axis)": 0.005714285714285714,
                "tf.constant(value)": 0.005714285714285714,
                "tf.constant(value, dtype)": 0.005714285714285714,
                "tf.divide(x, y)": 0.005714285714285714,
                "tf.equal(x, y)": 0.005714285714285714,
                "tf.exp(x)": 0.005714285714285714,
                "tf.expand_dims(input, axis)": 0.005714285714285714,
                "tf.eye(num_rows)": 0.005714285714285714,
                "tf.eye(num_rows, num_columns)": 0.005714285714285714,
                "tf.eye(num_rows, dtype)": 0.005714285714285714,
                "tf.fill(dims, value)": 0.005714285714285714,
                "tf.gather(params, indices)": 0.005714285714285714,
                "tf.gather(params, indices, axis, batch_dims)": 0.005714285714285714,
                "tf.gather_nd(params, indices)": 0.005714285714285714,
                "tf.gather_nd(params, indices, batch_dims)": 0.005714285714285714,
                "tf.greater(x, y)": 0.005714285714285714,
                "tf.greater_equal(x, y)": 0.005714285714285714,
                "tf.math.bincount(arr)": 0.005714285714285714,
                "tf.math.ceil(x)": 0.005714285714285714,
                "tf.math.count_nonzero(input)": 0.005714285714285714,
                "tf.math.count_nonzero(input, axis)": 0.005714285714285714,
                "tf.math.cumsum(x, axis)": 0.005714285714285714,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005714285714285714,
                "tf.math.divide_no_nan(x, y)": 0.005714285714285714,
                "tf.math.floor(x)": 0.005714285714285714,
                "tf.math.log(x)": 0.005714285714285714,
                "tf.math.logical_and(x, y)": 0.005714285714285714,
                "tf.math.logical_not(x)": 0.005714285714285714,
                "tf.math.logical_or(x, y)": 0.005714285714285714,
                "tf.math.logical_xor(x, y)": 0.005714285714285714,
                "tf.math.negative(x)": 0.005714285714285714,
                "tf.math.reciprocal(x)": 0.005714285714285714,
                "tf.math.reciprocal_no_nan(x)": 0.005714285714285714,
                "tf.math.segment_max(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_mean(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_min(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_prod(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_sum(data, segment_ids)": 0.005714285714285714,
                "tf.math.squared_difference(x, y)": 0.005714285714285714,
                "tf.math.top_k(input, k)": 0.005714285714285714,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.matmul(a, b)": 0.005714285714285714,
                "tf.maximum(x, y)": 0.005714285714285714,
                "tf.minimum(x, y)": 0.005714285714285714,
                "tf.multiply(x, y)": 0.005714285714285714,
                "tf.not_equal(x, y)": 0.005714285714285714,
                "tf.one_hot(indices, depth)": 0.005714285714285714,
                "tf.ones(shape)": 0.005714285714285714,
                "tf.ones_like(input)": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005714285714285714,
                "tf.range(start)": 0.005714285714285714,
                "tf.range(start, limit, delta)": 0.005714285714285714,
                "tf.reduce_any(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_all(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_max(input_tensor)": 0.005714285714285714,
                "tf.reduce_max(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_mean(input_tensor)": 0.005714285714285714,
                "tf.reduce_mean(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_min(input_tensor)": 0.005714285714285714,
                "tf.reduce_min(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_prod(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_sum(input_tensor)": 0.005714285714285714,
                "tf.reduce_sum(input_tensor, axis)": 0.005714285714285714,
                "tf.repeat(input, repeats)": 0.005714285714285714,
                "tf.repeat(input, repeats, axis)": 0.005714285714285714,
                "tf.reshape(tensor, shape)": 0.005714285714285714,
                "tf.reverse(tensor, axis)": 0.005714285714285714,
                "tf.roll(input, shift, axis)": 0.005714285714285714,
                "tf.round(x)": 0.005714285714285714,
                "tf.scatter_nd(indices, updates, shape)": 0.005714285714285714,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005714285714285714,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005714285714285714,
                "tf.sequence_mask(lengths)": 0.05142857142857143,
                "tf.sequence_mask(lengths, maxlen)": 0.005714285714285714,
                "tf.shape(input)": 0.005714285714285714,
                "tf.sign(x)": 0.005714285714285714,
                "tf.sort(values, axis)": 0.005714285714285714,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005714285714285714,
                "tf.sqrt(x)": 0.005714285714285714,
                "tf.square(x)": 0.005714285714285714,
                "tf.squeeze(input)": 0.005714285714285714,
                "tf.squeeze(input, axis)": 0.005714285714285714,
                "tf.stack(values, axis)": 0.005714285714285714,
                "tf.subtract(x, y)": 0.005714285714285714,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005714285714285714,
                "tf.tensordot(a, b, axes)": 0.005714285714285714,
                "tf.tile(input, multiples)": 0.005714285714285714,
                "tf.transpose(a)": 0.005714285714285714,
                "tf.transpose(a, perm)": 0.005714285714285714,
                "tf.unique_with_counts(x)": 0.005714285714285714,
                "tf.unstack(value, axis)": 0.005714285714285714,
                "tf.where(condition)": 0.005714285714285714,
                "tf.where(condition, x, y)": 0.005714285714285714,
                "tf.zeros(shape)": 0.005714285714285714,
                "tf.zeros_like(input)": 0.005714285714285714,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005714285714285714,
                "tf.sparse.add(a, b)": 0.005714285714285714,
                "tf.sparse.concat(axis, sp_inputs)": 0.005714285714285714,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005714285714285714,
                "tf.sparse.from_dense(tensor)": 0.005714285714285714,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005714285714285714,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005714285714285714,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005714285714285714,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005714285714285714,
                "tf.sparse.reset_shape(sp_input)": 0.005714285714285714,
                "tf.sparse.reshape(sp_input, shape)": 0.005714285714285714,
                "tf.sparse.retain(sp_input, to_retain)": 0.005714285714285714,
                "tf.sparse.slice(sp_input, start, size)": 0.005714285714285714,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005714285714285714,
                "tf.sparse.to_dense(sp_input)": 0.005714285714285714,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005714285714285714,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005714285714285714,
                "tf.sparse.transpose(sp_input)": 0.005714285714285714,
                "tf.sparse.transpose(sp_input, perm)": 0.005714285714285714,
                "IndexingAxis1Operation": 0.005714285714285714,
                "IndexingOperation": 0.005714285714285714,
                "PairCreationOperation": 0.005714285714285714,
                "SingletonTupleCreationOperation": 0.005714285714285714,
                "SlicingAxis0BothOperation": 0.005714285714285714,
                "SlicingAxis0LeftOperation": 0.005714285714285714,
                "SlicingAxis0RightOperation": 0.005714285714285714,
                "SlicingAxis1BothOperation": 0.005714285714285714,
                "SlicingAxis1LeftOperation": 0.005714285714285714,
                "SlicingAxis1RightOperation": 0.005714285714285714,
                "TripleCreationOperation": 0.005714285714285714,
                "PROVIDED_CONSTANT_WEIGHT": 0.017142857142857144,
                "COMMON_CONSTANT_WEIGHT": 0.005714285714285714,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005714285714285714,
                "INPUT_VARIABLE_WEIGHT": 0.06285714285714286,
                "AXIS_CONSTANT_WEIGHT": 0.005714285714285714,
                "SHAPE_CONSTANT_WEIGHT": 0.005714285714285714,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005714285714285714
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 4,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)": 7,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 7,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 7,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "google_09",
        "description": "sort the segments",
        "target_program": "tf.gather(in2, tf.argsort(in1, stable=True))",
        "source": "Real task encountered by Googler, 8/9/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 1, 1, 0, 0, 2],[10, 20, 30, 14, 15, 26],]",
            "outputs": "[14, 15, 10, 20, 30, 26]"
        },
        "completions": [
            "sorted_indices = tf.argsort(in1)\nreturn tf.gather(in2, sorted_indices)\n",
            "return tf.math.segment_min(in2, in1)\n",
            "def transform(in1, in2):\n    values, indices = tf.sort(in2, axis=0)\n    return tf.gather(values, indices)\n",
            "sorted_indices = tf.argsort(in1)\nout = tf.gather(in2, sorted_indices)\nreturn out\n",
            "return tf.unsorted_segment_max(in2, in1, tf.reduce_max(in1)+1)\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "return tf.math.unsorted_segment_sum(in2, in1, tf.reduce_max(in1) + 1)",
            "segment_ids, sorted_indices = tf.math.top_k(in1, k=tf.reduce_max(in1) + 1)\nsorted_values = tf.gather(in2, sorted_indices)\nreturn sorted_values\n",
            "return tf.gather(in2, tf.argsort(in1))\n",
            "def transform(in1, in2):\n    sorted_indices = tf.argsort(in1)\n    return tf.gather(in2, sorted_indices)\n"
        ],
        "tf_operators": {
            "tf.gather": 7,
            "tf.argsort": 5,
            "tf.math.segment_min": 1,
            "tf.sort": 1,
            "tf.reduce_max": 3,
            "tf.unsorted_segment_max": 1,
            "tf.math.unsorted_segment_sum": 1,
            "tf.math.top_k": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                0
            ],
            [],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 23,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 4,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005050505050505051,
                "tf.add(x, y)": 0.005050505050505051,
                "tf.add_n(inputs)": 0.005050505050505051,
                "tf.argmax(input, axis)": 0.005050505050505051,
                "tf.argmin(input, axis)": 0.005050505050505051,
                "tf.argsort(values, axis, stable=True)": 0.005050505050505051,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005050505050505051,
                "tf.boolean_mask(tensor, mask)": 0.005050505050505051,
                "tf.broadcast_to(input, shape)": 0.005050505050505051,
                "tf.cast(x, dtype)": 0.005050505050505051,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005050505050505051,
                "tf.concat(values, axis)": 0.005050505050505051,
                "tf.constant(value)": 0.005050505050505051,
                "tf.constant(value, dtype)": 0.005050505050505051,
                "tf.divide(x, y)": 0.005050505050505051,
                "tf.equal(x, y)": 0.005050505050505051,
                "tf.exp(x)": 0.005050505050505051,
                "tf.expand_dims(input, axis)": 0.005050505050505051,
                "tf.eye(num_rows)": 0.005050505050505051,
                "tf.eye(num_rows, num_columns)": 0.005050505050505051,
                "tf.eye(num_rows, dtype)": 0.005050505050505051,
                "tf.fill(dims, value)": 0.005050505050505051,
                "tf.gather(params, indices)": 0.04040404040404041,
                "tf.gather(params, indices, axis, batch_dims)": 0.005050505050505051,
                "tf.gather_nd(params, indices)": 0.005050505050505051,
                "tf.gather_nd(params, indices, batch_dims)": 0.005050505050505051,
                "tf.greater(x, y)": 0.005050505050505051,
                "tf.greater_equal(x, y)": 0.005050505050505051,
                "tf.math.bincount(arr)": 0.005050505050505051,
                "tf.math.ceil(x)": 0.005050505050505051,
                "tf.math.count_nonzero(input)": 0.005050505050505051,
                "tf.math.count_nonzero(input, axis)": 0.005050505050505051,
                "tf.math.cumsum(x, axis)": 0.005050505050505051,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005050505050505051,
                "tf.math.divide_no_nan(x, y)": 0.005050505050505051,
                "tf.math.floor(x)": 0.005050505050505051,
                "tf.math.log(x)": 0.005050505050505051,
                "tf.math.logical_and(x, y)": 0.005050505050505051,
                "tf.math.logical_not(x)": 0.005050505050505051,
                "tf.math.logical_or(x, y)": 0.005050505050505051,
                "tf.math.logical_xor(x, y)": 0.005050505050505051,
                "tf.math.negative(x)": 0.005050505050505051,
                "tf.math.reciprocal(x)": 0.005050505050505051,
                "tf.math.reciprocal_no_nan(x)": 0.005050505050505051,
                "tf.math.segment_max(data, segment_ids)": 0.005050505050505051,
                "tf.math.segment_mean(data, segment_ids)": 0.005050505050505051,
                "tf.math.segment_min(data, segment_ids)": 0.010101010101010102,
                "tf.math.segment_prod(data, segment_ids)": 0.005050505050505051,
                "tf.math.segment_sum(data, segment_ids)": 0.005050505050505051,
                "tf.math.squared_difference(x, y)": 0.005050505050505051,
                "tf.math.top_k(input, k)": 0.010101010101010102,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005050505050505051,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.010101010101010102,
                "tf.matmul(a, b)": 0.005050505050505051,
                "tf.maximum(x, y)": 0.005050505050505051,
                "tf.minimum(x, y)": 0.005050505050505051,
                "tf.multiply(x, y)": 0.005050505050505051,
                "tf.not_equal(x, y)": 0.005050505050505051,
                "tf.one_hot(indices, depth)": 0.005050505050505051,
                "tf.ones(shape)": 0.005050505050505051,
                "tf.ones_like(input)": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005050505050505051,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005050505050505051,
                "tf.range(start)": 0.005050505050505051,
                "tf.range(start, limit, delta)": 0.005050505050505051,
                "tf.reduce_any(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_all(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_max(input_tensor)": 0.020202020202020204,
                "tf.reduce_max(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_mean(input_tensor)": 0.005050505050505051,
                "tf.reduce_mean(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_min(input_tensor)": 0.005050505050505051,
                "tf.reduce_min(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_prod(input_tensor, axis)": 0.005050505050505051,
                "tf.reduce_sum(input_tensor)": 0.005050505050505051,
                "tf.reduce_sum(input_tensor, axis)": 0.005050505050505051,
                "tf.repeat(input, repeats)": 0.005050505050505051,
                "tf.repeat(input, repeats, axis)": 0.005050505050505051,
                "tf.reshape(tensor, shape)": 0.005050505050505051,
                "tf.reverse(tensor, axis)": 0.005050505050505051,
                "tf.roll(input, shift, axis)": 0.005050505050505051,
                "tf.round(x)": 0.005050505050505051,
                "tf.scatter_nd(indices, updates, shape)": 0.005050505050505051,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005050505050505051,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005050505050505051,
                "tf.sequence_mask(lengths)": 0.005050505050505051,
                "tf.sequence_mask(lengths, maxlen)": 0.005050505050505051,
                "tf.shape(input)": 0.005050505050505051,
                "tf.sign(x)": 0.005050505050505051,
                "tf.sort(values, axis)": 0.005050505050505051,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.010101010101010102,
                "tf.sqrt(x)": 0.005050505050505051,
                "tf.square(x)": 0.005050505050505051,
                "tf.squeeze(input)": 0.005050505050505051,
                "tf.squeeze(input, axis)": 0.005050505050505051,
                "tf.stack(values, axis)": 0.005050505050505051,
                "tf.subtract(x, y)": 0.005050505050505051,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005050505050505051,
                "tf.tensordot(a, b, axes)": 0.005050505050505051,
                "tf.tile(input, multiples)": 0.005050505050505051,
                "tf.transpose(a)": 0.005050505050505051,
                "tf.transpose(a, perm)": 0.005050505050505051,
                "tf.unique_with_counts(x)": 0.005050505050505051,
                "tf.unstack(value, axis)": 0.005050505050505051,
                "tf.where(condition)": 0.005050505050505051,
                "tf.where(condition, x, y)": 0.005050505050505051,
                "tf.zeros(shape)": 0.005050505050505051,
                "tf.zeros_like(input)": 0.005050505050505051,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005050505050505051,
                "tf.sparse.add(a, b)": 0.005050505050505051,
                "tf.sparse.concat(axis, sp_inputs)": 0.005050505050505051,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005050505050505051,
                "tf.sparse.from_dense(tensor)": 0.005050505050505051,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005050505050505051,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005050505050505051,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005050505050505051,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005050505050505051,
                "tf.sparse.reset_shape(sp_input)": 0.005050505050505051,
                "tf.sparse.reshape(sp_input, shape)": 0.005050505050505051,
                "tf.sparse.retain(sp_input, to_retain)": 0.005050505050505051,
                "tf.sparse.slice(sp_input, start, size)": 0.005050505050505051,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005050505050505051,
                "tf.sparse.to_dense(sp_input)": 0.005050505050505051,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005050505050505051,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005050505050505051,
                "tf.sparse.transpose(sp_input)": 0.005050505050505051,
                "tf.sparse.transpose(sp_input, perm)": 0.005050505050505051,
                "IndexingAxis1Operation": 0.005050505050505051,
                "IndexingOperation": 0.005050505050505051,
                "PairCreationOperation": 0.015151515151515152,
                "SingletonTupleCreationOperation": 0.005050505050505051,
                "SlicingAxis0BothOperation": 0.005050505050505051,
                "SlicingAxis0LeftOperation": 0.005050505050505051,
                "SlicingAxis0RightOperation": 0.005050505050505051,
                "SlicingAxis1BothOperation": 0.005050505050505051,
                "SlicingAxis1LeftOperation": 0.005050505050505051,
                "SlicingAxis1RightOperation": 0.005050505050505051,
                "TripleCreationOperation": 0.005050505050505051,
                "PROVIDED_CONSTANT_WEIGHT": 0.005050505050505051,
                "COMMON_CONSTANT_WEIGHT": 0.025252525252525252,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005050505050505051,
                "INPUT_VARIABLE_WEIGHT": 0.12121212121212122,
                "AXIS_CONSTANT_WEIGHT": 0.005050505050505051,
                "SHAPE_CONSTANT_WEIGHT": 0.005050505050505051,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005050505050505051,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005050505050505051
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 5,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_11",
        "description": "count the number of elements greater than 0 in each row",
        "target_program": "tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]],]",
            "outputs": "[4, 2, 3, 5]"
        },
        "completions": [
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n",
            "return tf.math.count_nonzero(tf.greater(in1, 0), axis=1)\n",
            "return tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)\n"
        ],
        "tf_operators": {
            "tf.cast": 5,
            "tf.reduce_sum": 5,
            "tf.greater": 10,
            "tf.int32": 5,
            "tf.math.count_nonzero": 5
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 20,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 5
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004878048780487805,
                "tf.add(x, y)": 0.004878048780487805,
                "tf.add_n(inputs)": 0.004878048780487805,
                "tf.argmax(input, axis)": 0.004878048780487805,
                "tf.argmin(input, axis)": 0.004878048780487805,
                "tf.argsort(values, axis, stable=True)": 0.004878048780487805,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004878048780487805,
                "tf.boolean_mask(tensor, mask)": 0.004878048780487805,
                "tf.broadcast_to(input, shape)": 0.004878048780487805,
                "tf.cast(x, dtype)": 0.02926829268292683,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004878048780487805,
                "tf.concat(values, axis)": 0.004878048780487805,
                "tf.constant(value)": 0.004878048780487805,
                "tf.constant(value, dtype)": 0.004878048780487805,
                "tf.divide(x, y)": 0.004878048780487805,
                "tf.equal(x, y)": 0.004878048780487805,
                "tf.exp(x)": 0.004878048780487805,
                "tf.expand_dims(input, axis)": 0.004878048780487805,
                "tf.eye(num_rows)": 0.004878048780487805,
                "tf.eye(num_rows, num_columns)": 0.004878048780487805,
                "tf.eye(num_rows, dtype)": 0.004878048780487805,
                "tf.fill(dims, value)": 0.004878048780487805,
                "tf.gather(params, indices)": 0.004878048780487805,
                "tf.gather(params, indices, axis, batch_dims)": 0.004878048780487805,
                "tf.gather_nd(params, indices)": 0.004878048780487805,
                "tf.gather_nd(params, indices, batch_dims)": 0.004878048780487805,
                "tf.greater(x, y)": 0.05365853658536585,
                "tf.greater_equal(x, y)": 0.004878048780487805,
                "tf.math.bincount(arr)": 0.004878048780487805,
                "tf.math.ceil(x)": 0.004878048780487805,
                "tf.math.count_nonzero(input)": 0.004878048780487805,
                "tf.math.count_nonzero(input, axis)": 0.004878048780487805,
                "tf.math.cumsum(x, axis)": 0.004878048780487805,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004878048780487805,
                "tf.math.divide_no_nan(x, y)": 0.004878048780487805,
                "tf.math.floor(x)": 0.004878048780487805,
                "tf.math.log(x)": 0.004878048780487805,
                "tf.math.logical_and(x, y)": 0.004878048780487805,
                "tf.math.logical_not(x)": 0.004878048780487805,
                "tf.math.logical_or(x, y)": 0.004878048780487805,
                "tf.math.logical_xor(x, y)": 0.004878048780487805,
                "tf.math.negative(x)": 0.004878048780487805,
                "tf.math.reciprocal(x)": 0.004878048780487805,
                "tf.math.reciprocal_no_nan(x)": 0.004878048780487805,
                "tf.math.segment_max(data, segment_ids)": 0.004878048780487805,
                "tf.math.segment_mean(data, segment_ids)": 0.004878048780487805,
                "tf.math.segment_min(data, segment_ids)": 0.004878048780487805,
                "tf.math.segment_prod(data, segment_ids)": 0.004878048780487805,
                "tf.math.segment_sum(data, segment_ids)": 0.004878048780487805,
                "tf.math.squared_difference(x, y)": 0.004878048780487805,
                "tf.math.top_k(input, k)": 0.004878048780487805,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004878048780487805,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004878048780487805,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004878048780487805,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004878048780487805,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004878048780487805,
                "tf.matmul(a, b)": 0.004878048780487805,
                "tf.maximum(x, y)": 0.004878048780487805,
                "tf.minimum(x, y)": 0.004878048780487805,
                "tf.multiply(x, y)": 0.004878048780487805,
                "tf.not_equal(x, y)": 0.004878048780487805,
                "tf.one_hot(indices, depth)": 0.004878048780487805,
                "tf.ones(shape)": 0.004878048780487805,
                "tf.ones_like(input)": 0.004878048780487805,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004878048780487805,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004878048780487805,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004878048780487805,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004878048780487805,
                "tf.range(start)": 0.004878048780487805,
                "tf.range(start, limit, delta)": 0.004878048780487805,
                "tf.reduce_any(input_tensor, axis)": 0.004878048780487805,
                "tf.reduce_all(input_tensor, axis)": 0.004878048780487805,
                "tf.reduce_max(input_tensor)": 0.004878048780487805,
                "tf.reduce_max(input_tensor, axis)": 0.004878048780487805,
                "tf.reduce_mean(input_tensor)": 0.004878048780487805,
                "tf.reduce_mean(input_tensor, axis)": 0.004878048780487805,
                "tf.reduce_min(input_tensor)": 0.004878048780487805,
                "tf.reduce_min(input_tensor, axis)": 0.004878048780487805,
                "tf.reduce_prod(input_tensor, axis)": 0.004878048780487805,
                "tf.reduce_sum(input_tensor)": 0.004878048780487805,
                "tf.reduce_sum(input_tensor, axis)": 0.004878048780487805,
                "tf.repeat(input, repeats)": 0.004878048780487805,
                "tf.repeat(input, repeats, axis)": 0.004878048780487805,
                "tf.reshape(tensor, shape)": 0.004878048780487805,
                "tf.reverse(tensor, axis)": 0.004878048780487805,
                "tf.roll(input, shift, axis)": 0.004878048780487805,
                "tf.round(x)": 0.004878048780487805,
                "tf.scatter_nd(indices, updates, shape)": 0.004878048780487805,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004878048780487805,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004878048780487805,
                "tf.sequence_mask(lengths)": 0.004878048780487805,
                "tf.sequence_mask(lengths, maxlen)": 0.004878048780487805,
                "tf.shape(input)": 0.004878048780487805,
                "tf.sign(x)": 0.004878048780487805,
                "tf.sort(values, axis)": 0.004878048780487805,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004878048780487805,
                "tf.sqrt(x)": 0.004878048780487805,
                "tf.square(x)": 0.004878048780487805,
                "tf.squeeze(input)": 0.004878048780487805,
                "tf.squeeze(input, axis)": 0.004878048780487805,
                "tf.stack(values, axis)": 0.004878048780487805,
                "tf.subtract(x, y)": 0.004878048780487805,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004878048780487805,
                "tf.tensordot(a, b, axes)": 0.004878048780487805,
                "tf.tile(input, multiples)": 0.004878048780487805,
                "tf.transpose(a)": 0.004878048780487805,
                "tf.transpose(a, perm)": 0.004878048780487805,
                "tf.unique_with_counts(x)": 0.004878048780487805,
                "tf.unstack(value, axis)": 0.004878048780487805,
                "tf.where(condition)": 0.004878048780487805,
                "tf.where(condition, x, y)": 0.004878048780487805,
                "tf.zeros(shape)": 0.004878048780487805,
                "tf.zeros_like(input)": 0.004878048780487805,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004878048780487805,
                "tf.sparse.add(a, b)": 0.004878048780487805,
                "tf.sparse.concat(axis, sp_inputs)": 0.004878048780487805,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004878048780487805,
                "tf.sparse.from_dense(tensor)": 0.004878048780487805,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004878048780487805,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004878048780487805,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004878048780487805,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004878048780487805,
                "tf.sparse.reset_shape(sp_input)": 0.004878048780487805,
                "tf.sparse.reshape(sp_input, shape)": 0.004878048780487805,
                "tf.sparse.retain(sp_input, to_retain)": 0.004878048780487805,
                "tf.sparse.slice(sp_input, start, size)": 0.004878048780487805,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004878048780487805,
                "tf.sparse.to_dense(sp_input)": 0.004878048780487805,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004878048780487805,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004878048780487805,
                "tf.sparse.transpose(sp_input)": 0.004878048780487805,
                "tf.sparse.transpose(sp_input, perm)": 0.004878048780487805,
                "IndexingAxis1Operation": 0.004878048780487805,
                "IndexingOperation": 0.004878048780487805,
                "PairCreationOperation": 0.004878048780487805,
                "SingletonTupleCreationOperation": 0.004878048780487805,
                "SlicingAxis0BothOperation": 0.004878048780487805,
                "SlicingAxis0LeftOperation": 0.004878048780487805,
                "SlicingAxis0RightOperation": 0.004878048780487805,
                "SlicingAxis1BothOperation": 0.004878048780487805,
                "SlicingAxis1LeftOperation": 0.004878048780487805,
                "SlicingAxis1RightOperation": 0.004878048780487805,
                "TripleCreationOperation": 0.004878048780487805,
                "PROVIDED_CONSTANT_WEIGHT": 0.004878048780487805,
                "COMMON_CONSTANT_WEIGHT": 0.1024390243902439,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004878048780487805,
                "INPUT_VARIABLE_WEIGHT": 0.05365853658536585,
                "AXIS_CONSTANT_WEIGHT": 0.004878048780487805,
                "SHAPE_CONSTANT_WEIGHT": 0.004878048780487805,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004878048780487805,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.02926829268292683,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004878048780487805,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004878048780487805,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004878048780487805
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 4,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_12",
        "description": "identify elements between 0 and 1",
        "target_program": "tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)",
        "source": "Real task encountered by Googler, 8/26/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]],]",
            "outputs": "[[1, 1, 0, 1, 0],    [0, 1, 0, 0, 1],    [1, 1, 1, 0, 1],    [0, 0, 1, 0, 1]]"
        },
        "completions": [
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.where(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), 1, 0)",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "result = tf.cast(tf.logical_and(in1 >= 0, in1 <= 1), tf.int32)\nreturn result\n",
            "return tf.cast(tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1)), tf.int32)\n",
            "output = tf.math.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\nreturn tf.cast(output, tf.int32)\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))\n",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))",
            "return tf.logical_and(tf.greater_equal(in1, 0), tf.less_equal(in1, 1))"
        ],
        "tf_operators": {
            "tf.greater_equal": 9,
            "tf.less_equal": 9,
            "tf.logical_and": 9,
            "tf.where": 1,
            "tf.int32": 3,
            "tf.cast": 3,
            "tf.math.logical_and": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 3,
        "total_in_target": 3,
        "parsed_constants": [
            [
                0,
                1
            ],
            [
                0,
                1,
                1,
                0
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 22,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 3
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004672897196261682,
                "tf.add(x, y)": 0.004672897196261682,
                "tf.add_n(inputs)": 0.004672897196261682,
                "tf.argmax(input, axis)": 0.004672897196261682,
                "tf.argmin(input, axis)": 0.004672897196261682,
                "tf.argsort(values, axis, stable=True)": 0.004672897196261682,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004672897196261682,
                "tf.boolean_mask(tensor, mask)": 0.004672897196261682,
                "tf.broadcast_to(input, shape)": 0.004672897196261682,
                "tf.cast(x, dtype)": 0.018691588785046728,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004672897196261682,
                "tf.concat(values, axis)": 0.004672897196261682,
                "tf.constant(value)": 0.004672897196261682,
                "tf.constant(value, dtype)": 0.004672897196261682,
                "tf.divide(x, y)": 0.004672897196261682,
                "tf.equal(x, y)": 0.004672897196261682,
                "tf.exp(x)": 0.004672897196261682,
                "tf.expand_dims(input, axis)": 0.004672897196261682,
                "tf.eye(num_rows)": 0.004672897196261682,
                "tf.eye(num_rows, num_columns)": 0.004672897196261682,
                "tf.eye(num_rows, dtype)": 0.004672897196261682,
                "tf.fill(dims, value)": 0.004672897196261682,
                "tf.gather(params, indices)": 0.004672897196261682,
                "tf.gather(params, indices, axis, batch_dims)": 0.004672897196261682,
                "tf.gather_nd(params, indices)": 0.004672897196261682,
                "tf.gather_nd(params, indices, batch_dims)": 0.004672897196261682,
                "tf.greater(x, y)": 0.004672897196261682,
                "tf.greater_equal(x, y)": 0.04672897196261682,
                "tf.math.bincount(arr)": 0.004672897196261682,
                "tf.math.ceil(x)": 0.004672897196261682,
                "tf.math.count_nonzero(input)": 0.004672897196261682,
                "tf.math.count_nonzero(input, axis)": 0.004672897196261682,
                "tf.math.cumsum(x, axis)": 0.004672897196261682,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004672897196261682,
                "tf.math.divide_no_nan(x, y)": 0.004672897196261682,
                "tf.math.floor(x)": 0.004672897196261682,
                "tf.math.log(x)": 0.004672897196261682,
                "tf.math.logical_and(x, y)": 0.009345794392523364,
                "tf.math.logical_not(x)": 0.004672897196261682,
                "tf.math.logical_or(x, y)": 0.004672897196261682,
                "tf.math.logical_xor(x, y)": 0.004672897196261682,
                "tf.math.negative(x)": 0.004672897196261682,
                "tf.math.reciprocal(x)": 0.004672897196261682,
                "tf.math.reciprocal_no_nan(x)": 0.004672897196261682,
                "tf.math.segment_max(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_mean(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_min(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_prod(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_sum(data, segment_ids)": 0.004672897196261682,
                "tf.math.squared_difference(x, y)": 0.004672897196261682,
                "tf.math.top_k(input, k)": 0.004672897196261682,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.matmul(a, b)": 0.004672897196261682,
                "tf.maximum(x, y)": 0.004672897196261682,
                "tf.minimum(x, y)": 0.004672897196261682,
                "tf.multiply(x, y)": 0.004672897196261682,
                "tf.not_equal(x, y)": 0.004672897196261682,
                "tf.one_hot(indices, depth)": 0.004672897196261682,
                "tf.ones(shape)": 0.004672897196261682,
                "tf.ones_like(input)": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004672897196261682,
                "tf.range(start)": 0.004672897196261682,
                "tf.range(start, limit, delta)": 0.004672897196261682,
                "tf.reduce_any(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_all(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_max(input_tensor)": 0.004672897196261682,
                "tf.reduce_max(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_mean(input_tensor)": 0.004672897196261682,
                "tf.reduce_mean(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_min(input_tensor)": 0.004672897196261682,
                "tf.reduce_min(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_prod(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_sum(input_tensor)": 0.004672897196261682,
                "tf.reduce_sum(input_tensor, axis)": 0.004672897196261682,
                "tf.repeat(input, repeats)": 0.004672897196261682,
                "tf.repeat(input, repeats, axis)": 0.004672897196261682,
                "tf.reshape(tensor, shape)": 0.004672897196261682,
                "tf.reverse(tensor, axis)": 0.004672897196261682,
                "tf.roll(input, shift, axis)": 0.004672897196261682,
                "tf.round(x)": 0.004672897196261682,
                "tf.scatter_nd(indices, updates, shape)": 0.004672897196261682,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004672897196261682,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004672897196261682,
                "tf.sequence_mask(lengths)": 0.004672897196261682,
                "tf.sequence_mask(lengths, maxlen)": 0.004672897196261682,
                "tf.shape(input)": 0.004672897196261682,
                "tf.sign(x)": 0.004672897196261682,
                "tf.sort(values, axis)": 0.004672897196261682,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004672897196261682,
                "tf.sqrt(x)": 0.004672897196261682,
                "tf.square(x)": 0.004672897196261682,
                "tf.squeeze(input)": 0.004672897196261682,
                "tf.squeeze(input, axis)": 0.004672897196261682,
                "tf.stack(values, axis)": 0.004672897196261682,
                "tf.subtract(x, y)": 0.004672897196261682,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004672897196261682,
                "tf.tensordot(a, b, axes)": 0.004672897196261682,
                "tf.tile(input, multiples)": 0.004672897196261682,
                "tf.transpose(a)": 0.004672897196261682,
                "tf.transpose(a, perm)": 0.004672897196261682,
                "tf.unique_with_counts(x)": 0.004672897196261682,
                "tf.unstack(value, axis)": 0.004672897196261682,
                "tf.where(condition)": 0.004672897196261682,
                "tf.where(condition, x, y)": 0.009345794392523364,
                "tf.zeros(shape)": 0.004672897196261682,
                "tf.zeros_like(input)": 0.004672897196261682,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004672897196261682,
                "tf.sparse.add(a, b)": 0.004672897196261682,
                "tf.sparse.concat(axis, sp_inputs)": 0.004672897196261682,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004672897196261682,
                "tf.sparse.from_dense(tensor)": 0.004672897196261682,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004672897196261682,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004672897196261682,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004672897196261682,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004672897196261682,
                "tf.sparse.reset_shape(sp_input)": 0.004672897196261682,
                "tf.sparse.reshape(sp_input, shape)": 0.004672897196261682,
                "tf.sparse.retain(sp_input, to_retain)": 0.004672897196261682,
                "tf.sparse.slice(sp_input, start, size)": 0.004672897196261682,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004672897196261682,
                "tf.sparse.to_dense(sp_input)": 0.004672897196261682,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004672897196261682,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004672897196261682,
                "tf.sparse.transpose(sp_input)": 0.004672897196261682,
                "tf.sparse.transpose(sp_input, perm)": 0.004672897196261682,
                "IndexingAxis1Operation": 0.004672897196261682,
                "IndexingOperation": 0.004672897196261682,
                "PairCreationOperation": 0.004672897196261682,
                "SingletonTupleCreationOperation": 0.004672897196261682,
                "SlicingAxis0BothOperation": 0.004672897196261682,
                "SlicingAxis0LeftOperation": 0.004672897196261682,
                "SlicingAxis0RightOperation": 0.004672897196261682,
                "SlicingAxis1BothOperation": 0.004672897196261682,
                "SlicingAxis1LeftOperation": 0.004672897196261682,
                "SlicingAxis1RightOperation": 0.004672897196261682,
                "TripleCreationOperation": 0.004672897196261682,
                "PROVIDED_CONSTANT_WEIGHT": 0.004672897196261682,
                "COMMON_CONSTANT_WEIGHT": 0.10747663551401869,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004672897196261682,
                "INPUT_VARIABLE_WEIGHT": 0.09813084112149532,
                "AXIS_CONSTANT_WEIGHT": 0.004672897196261682,
                "SHAPE_CONSTANT_WEIGHT": 0.004672897196261682,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004672897196261682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.018691588785046728,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004672897196261682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004672897196261682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004672897196261682
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 4,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_13",
        "description": "Concatenate batches of sequences",
        "target_program": "tf.concat([in1, in2], axis=1)",
        "source": "Real task encountered by Googler, 9/13/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 2], [10, 20]],[[3, 4, 5], [30, 40, 50]],]",
            "outputs": "[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]]"
        },
        "completions": [
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=-1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n",
            "return tf.concat([in1, in2], axis=1)\n"
        ],
        "tf_operators": {
            "tf.concat": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.005128205128205128,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005128205128205128,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.05641025641025641,
                "tf.constant(value)": 0.005128205128205128,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.005128205128205128,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.005128205128205128,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.005128205128205128,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.005128205128205128,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.005128205128205128,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.005128205128205128,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.005128205128205128,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005128205128205128,
                "tf.tensordot(a, b, axes)": 0.005128205128205128,
                "tf.tile(input, multiples)": 0.005128205128205128,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.005128205128205128,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.005128205128205128,
                "PairCreationOperation": 0.005128205128205128,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.005128205128205128,
                "PROVIDED_CONSTANT_WEIGHT": 0.005128205128205128,
                "COMMON_CONSTANT_WEIGHT": 0.05641025641025641,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.1076923076923077,
                "AXIS_CONSTANT_WEIGHT": 0.005128205128205128,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 4,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_14",
        "description": "circular buffer",
        "target_program": "tf.roll(in1, 1, 1)",
        "source": "From internal Colab, 10/17/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]],]",
            "outputs": "[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]]"
        },
        "completions": [
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=-1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "def transform(in1):\n    return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n",
            "return tf.roll(in1, shift=1, axis=1)\n"
        ],
        "tf_operators": {
            "tf.roll": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                -1,
                1
            ],
            [
                -1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 20,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.005128205128205128,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005128205128205128,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.005128205128205128,
                "tf.constant(value)": 0.005128205128205128,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.005128205128205128,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.005128205128205128,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.005128205128205128,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.005128205128205128,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.005128205128205128,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.05641025641025641,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.005128205128205128,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005128205128205128,
                "tf.tensordot(a, b, axes)": 0.005128205128205128,
                "tf.tile(input, multiples)": 0.005128205128205128,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.005128205128205128,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.005128205128205128,
                "PairCreationOperation": 0.005128205128205128,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.005128205128205128,
                "PROVIDED_CONSTANT_WEIGHT": 0.005128205128205128,
                "COMMON_CONSTANT_WEIGHT": 0.1076923076923077,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.05641025641025641,
                "AXIS_CONSTANT_WEIGHT": 0.005128205128205128,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 4,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_15",
        "description": "pad a zero column",
        "target_program": "tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')",
        "source": "Real task encountered by Googler, 10/23/2019",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1, 3, 5, 7], [2, 4, 6, 8]],]",
            "outputs": "[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]]"
        },
        "completions": [
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')\n",
            "return tf.pad(in1, [[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')",
            "def transform(in1):\n    return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n",
            "return tf.pad(in1, paddings=[[0, 0], [0, 1]], mode='CONSTANT')\n"
        ],
        "tf_operators": {
            "tf.pad": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 40,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004651162790697674,
                "tf.add(x, y)": 0.004651162790697674,
                "tf.add_n(inputs)": 0.004651162790697674,
                "tf.argmax(input, axis)": 0.004651162790697674,
                "tf.argmin(input, axis)": 0.004651162790697674,
                "tf.argsort(values, axis, stable=True)": 0.004651162790697674,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004651162790697674,
                "tf.boolean_mask(tensor, mask)": 0.004651162790697674,
                "tf.broadcast_to(input, shape)": 0.004651162790697674,
                "tf.cast(x, dtype)": 0.004651162790697674,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004651162790697674,
                "tf.concat(values, axis)": 0.004651162790697674,
                "tf.constant(value)": 0.004651162790697674,
                "tf.constant(value, dtype)": 0.004651162790697674,
                "tf.divide(x, y)": 0.004651162790697674,
                "tf.equal(x, y)": 0.004651162790697674,
                "tf.exp(x)": 0.004651162790697674,
                "tf.expand_dims(input, axis)": 0.004651162790697674,
                "tf.eye(num_rows)": 0.004651162790697674,
                "tf.eye(num_rows, num_columns)": 0.004651162790697674,
                "tf.eye(num_rows, dtype)": 0.004651162790697674,
                "tf.fill(dims, value)": 0.004651162790697674,
                "tf.gather(params, indices)": 0.004651162790697674,
                "tf.gather(params, indices, axis, batch_dims)": 0.004651162790697674,
                "tf.gather_nd(params, indices)": 0.004651162790697674,
                "tf.gather_nd(params, indices, batch_dims)": 0.004651162790697674,
                "tf.greater(x, y)": 0.004651162790697674,
                "tf.greater_equal(x, y)": 0.004651162790697674,
                "tf.math.bincount(arr)": 0.004651162790697674,
                "tf.math.ceil(x)": 0.004651162790697674,
                "tf.math.count_nonzero(input)": 0.004651162790697674,
                "tf.math.count_nonzero(input, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004651162790697674,
                "tf.math.divide_no_nan(x, y)": 0.004651162790697674,
                "tf.math.floor(x)": 0.004651162790697674,
                "tf.math.log(x)": 0.004651162790697674,
                "tf.math.logical_and(x, y)": 0.004651162790697674,
                "tf.math.logical_not(x)": 0.004651162790697674,
                "tf.math.logical_or(x, y)": 0.004651162790697674,
                "tf.math.logical_xor(x, y)": 0.004651162790697674,
                "tf.math.negative(x)": 0.004651162790697674,
                "tf.math.reciprocal(x)": 0.004651162790697674,
                "tf.math.reciprocal_no_nan(x)": 0.004651162790697674,
                "tf.math.segment_max(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_mean(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_min(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_prod(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_sum(data, segment_ids)": 0.004651162790697674,
                "tf.math.squared_difference(x, y)": 0.004651162790697674,
                "tf.math.top_k(input, k)": 0.004651162790697674,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.matmul(a, b)": 0.004651162790697674,
                "tf.maximum(x, y)": 0.004651162790697674,
                "tf.minimum(x, y)": 0.004651162790697674,
                "tf.multiply(x, y)": 0.004651162790697674,
                "tf.not_equal(x, y)": 0.004651162790697674,
                "tf.one_hot(indices, depth)": 0.004651162790697674,
                "tf.ones(shape)": 0.004651162790697674,
                "tf.ones_like(input)": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.04186046511627907,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.013953488372093023,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004651162790697674,
                "tf.range(start)": 0.004651162790697674,
                "tf.range(start, limit, delta)": 0.004651162790697674,
                "tf.reduce_any(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_all(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_max(input_tensor)": 0.004651162790697674,
                "tf.reduce_max(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_min(input_tensor)": 0.004651162790697674,
                "tf.reduce_min(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_prod(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor, axis)": 0.004651162790697674,
                "tf.repeat(input, repeats)": 0.004651162790697674,
                "tf.repeat(input, repeats, axis)": 0.004651162790697674,
                "tf.reshape(tensor, shape)": 0.004651162790697674,
                "tf.reverse(tensor, axis)": 0.004651162790697674,
                "tf.roll(input, shift, axis)": 0.004651162790697674,
                "tf.round(x)": 0.004651162790697674,
                "tf.scatter_nd(indices, updates, shape)": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004651162790697674,
                "tf.sequence_mask(lengths)": 0.004651162790697674,
                "tf.sequence_mask(lengths, maxlen)": 0.004651162790697674,
                "tf.shape(input)": 0.004651162790697674,
                "tf.sign(x)": 0.004651162790697674,
                "tf.sort(values, axis)": 0.004651162790697674,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004651162790697674,
                "tf.sqrt(x)": 0.004651162790697674,
                "tf.square(x)": 0.004651162790697674,
                "tf.squeeze(input)": 0.004651162790697674,
                "tf.squeeze(input, axis)": 0.004651162790697674,
                "tf.stack(values, axis)": 0.004651162790697674,
                "tf.subtract(x, y)": 0.004651162790697674,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004651162790697674,
                "tf.tensordot(a, b, axes)": 0.004651162790697674,
                "tf.tile(input, multiples)": 0.004651162790697674,
                "tf.transpose(a)": 0.004651162790697674,
                "tf.transpose(a, perm)": 0.004651162790697674,
                "tf.unique_with_counts(x)": 0.004651162790697674,
                "tf.unstack(value, axis)": 0.004651162790697674,
                "tf.where(condition)": 0.004651162790697674,
                "tf.where(condition, x, y)": 0.004651162790697674,
                "tf.zeros(shape)": 0.004651162790697674,
                "tf.zeros_like(input)": 0.004651162790697674,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004651162790697674,
                "tf.sparse.add(a, b)": 0.004651162790697674,
                "tf.sparse.concat(axis, sp_inputs)": 0.004651162790697674,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004651162790697674,
                "tf.sparse.from_dense(tensor)": 0.004651162790697674,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reset_shape(sp_input)": 0.004651162790697674,
                "tf.sparse.reshape(sp_input, shape)": 0.004651162790697674,
                "tf.sparse.retain(sp_input, to_retain)": 0.004651162790697674,
                "tf.sparse.slice(sp_input, start, size)": 0.004651162790697674,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004651162790697674,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input, perm)": 0.004651162790697674,
                "IndexingAxis1Operation": 0.004651162790697674,
                "IndexingOperation": 0.004651162790697674,
                "PairCreationOperation": 0.004651162790697674,
                "SingletonTupleCreationOperation": 0.004651162790697674,
                "SlicingAxis0BothOperation": 0.004651162790697674,
                "SlicingAxis0LeftOperation": 0.004651162790697674,
                "SlicingAxis0RightOperation": 0.004651162790697674,
                "SlicingAxis1BothOperation": 0.004651162790697674,
                "SlicingAxis1LeftOperation": 0.004651162790697674,
                "SlicingAxis1RightOperation": 0.004651162790697674,
                "TripleCreationOperation": 0.004651162790697674,
                "PROVIDED_CONSTANT_WEIGHT": 0.004651162790697674,
                "COMMON_CONSTANT_WEIGHT": 0.19069767441860466,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004651162790697674,
                "INPUT_VARIABLE_WEIGHT": 0.05116279069767442,
                "AXIS_CONSTANT_WEIGHT": 0.004651162790697674,
                "SHAPE_CONSTANT_WEIGHT": 0.004651162790697674,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004651162790697674
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 5,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 6,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 2,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_16",
        "description": "replicate elements a given number of times",
        "target_program": "tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 2, 0, 3],[2, 1, 2, 3],]",
            "outputs": "[1, 1, 2, 0, 0, 3, 3, 3]"
        },
        "completions": [
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)",
            "return tf.repeat(in1, in2)\n",
            "repeated = tf.repeat(in1, in2)\nreturn repeated\n",
            "return tf.repeat(in1, in2)\n",
            "return tf.repeat(in1, in2)"
        ],
        "tf_operators": {
            "tf.repeat": 10
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005405405405405406,
                "tf.add(x, y)": 0.005405405405405406,
                "tf.add_n(inputs)": 0.005405405405405406,
                "tf.argmax(input, axis)": 0.005405405405405406,
                "tf.argmin(input, axis)": 0.005405405405405406,
                "tf.argsort(values, axis, stable=True)": 0.005405405405405406,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005405405405405406,
                "tf.boolean_mask(tensor, mask)": 0.005405405405405406,
                "tf.broadcast_to(input, shape)": 0.005405405405405406,
                "tf.cast(x, dtype)": 0.005405405405405406,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005405405405405406,
                "tf.concat(values, axis)": 0.005405405405405406,
                "tf.constant(value)": 0.005405405405405406,
                "tf.constant(value, dtype)": 0.005405405405405406,
                "tf.divide(x, y)": 0.005405405405405406,
                "tf.equal(x, y)": 0.005405405405405406,
                "tf.exp(x)": 0.005405405405405406,
                "tf.expand_dims(input, axis)": 0.005405405405405406,
                "tf.eye(num_rows)": 0.005405405405405406,
                "tf.eye(num_rows, num_columns)": 0.005405405405405406,
                "tf.eye(num_rows, dtype)": 0.005405405405405406,
                "tf.fill(dims, value)": 0.005405405405405406,
                "tf.gather(params, indices)": 0.005405405405405406,
                "tf.gather(params, indices, axis, batch_dims)": 0.005405405405405406,
                "tf.gather_nd(params, indices)": 0.005405405405405406,
                "tf.gather_nd(params, indices, batch_dims)": 0.005405405405405406,
                "tf.greater(x, y)": 0.005405405405405406,
                "tf.greater_equal(x, y)": 0.005405405405405406,
                "tf.math.bincount(arr)": 0.005405405405405406,
                "tf.math.ceil(x)": 0.005405405405405406,
                "tf.math.count_nonzero(input)": 0.005405405405405406,
                "tf.math.count_nonzero(input, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005405405405405406,
                "tf.math.divide_no_nan(x, y)": 0.005405405405405406,
                "tf.math.floor(x)": 0.005405405405405406,
                "tf.math.log(x)": 0.005405405405405406,
                "tf.math.logical_and(x, y)": 0.005405405405405406,
                "tf.math.logical_not(x)": 0.005405405405405406,
                "tf.math.logical_or(x, y)": 0.005405405405405406,
                "tf.math.logical_xor(x, y)": 0.005405405405405406,
                "tf.math.negative(x)": 0.005405405405405406,
                "tf.math.reciprocal(x)": 0.005405405405405406,
                "tf.math.reciprocal_no_nan(x)": 0.005405405405405406,
                "tf.math.segment_max(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_mean(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_min(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_prod(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_sum(data, segment_ids)": 0.005405405405405406,
                "tf.math.squared_difference(x, y)": 0.005405405405405406,
                "tf.math.top_k(input, k)": 0.005405405405405406,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.matmul(a, b)": 0.005405405405405406,
                "tf.maximum(x, y)": 0.005405405405405406,
                "tf.minimum(x, y)": 0.005405405405405406,
                "tf.multiply(x, y)": 0.005405405405405406,
                "tf.not_equal(x, y)": 0.005405405405405406,
                "tf.one_hot(indices, depth)": 0.005405405405405406,
                "tf.ones(shape)": 0.005405405405405406,
                "tf.ones_like(input)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005405405405405406,
                "tf.range(start)": 0.005405405405405406,
                "tf.range(start, limit, delta)": 0.005405405405405406,
                "tf.reduce_any(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_all(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_max(input_tensor)": 0.005405405405405406,
                "tf.reduce_max(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_min(input_tensor)": 0.005405405405405406,
                "tf.reduce_min(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_prod(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor, axis)": 0.005405405405405406,
                "tf.repeat(input, repeats)": 0.05945945945945946,
                "tf.repeat(input, repeats, axis)": 0.005405405405405406,
                "tf.reshape(tensor, shape)": 0.005405405405405406,
                "tf.reverse(tensor, axis)": 0.005405405405405406,
                "tf.roll(input, shift, axis)": 0.005405405405405406,
                "tf.round(x)": 0.005405405405405406,
                "tf.scatter_nd(indices, updates, shape)": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005405405405405406,
                "tf.sequence_mask(lengths)": 0.005405405405405406,
                "tf.sequence_mask(lengths, maxlen)": 0.005405405405405406,
                "tf.shape(input)": 0.005405405405405406,
                "tf.sign(x)": 0.005405405405405406,
                "tf.sort(values, axis)": 0.005405405405405406,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005405405405405406,
                "tf.sqrt(x)": 0.005405405405405406,
                "tf.square(x)": 0.005405405405405406,
                "tf.squeeze(input)": 0.005405405405405406,
                "tf.squeeze(input, axis)": 0.005405405405405406,
                "tf.stack(values, axis)": 0.005405405405405406,
                "tf.subtract(x, y)": 0.005405405405405406,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005405405405405406,
                "tf.tensordot(a, b, axes)": 0.005405405405405406,
                "tf.tile(input, multiples)": 0.005405405405405406,
                "tf.transpose(a)": 0.005405405405405406,
                "tf.transpose(a, perm)": 0.005405405405405406,
                "tf.unique_with_counts(x)": 0.005405405405405406,
                "tf.unstack(value, axis)": 0.005405405405405406,
                "tf.where(condition)": 0.005405405405405406,
                "tf.where(condition, x, y)": 0.005405405405405406,
                "tf.zeros(shape)": 0.005405405405405406,
                "tf.zeros_like(input)": 0.005405405405405406,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005405405405405406,
                "tf.sparse.add(a, b)": 0.005405405405405406,
                "tf.sparse.concat(axis, sp_inputs)": 0.005405405405405406,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005405405405405406,
                "tf.sparse.from_dense(tensor)": 0.005405405405405406,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reset_shape(sp_input)": 0.005405405405405406,
                "tf.sparse.reshape(sp_input, shape)": 0.005405405405405406,
                "tf.sparse.retain(sp_input, to_retain)": 0.005405405405405406,
                "tf.sparse.slice(sp_input, start, size)": 0.005405405405405406,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005405405405405406,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input, perm)": 0.005405405405405406,
                "IndexingAxis1Operation": 0.005405405405405406,
                "IndexingOperation": 0.005405405405405406,
                "PairCreationOperation": 0.005405405405405406,
                "SingletonTupleCreationOperation": 0.005405405405405406,
                "SlicingAxis0BothOperation": 0.005405405405405406,
                "SlicingAxis0LeftOperation": 0.005405405405405406,
                "SlicingAxis0RightOperation": 0.005405405405405406,
                "SlicingAxis1BothOperation": 0.005405405405405406,
                "SlicingAxis1LeftOperation": 0.005405405405405406,
                "SlicingAxis1RightOperation": 0.005405405405405406,
                "TripleCreationOperation": 0.005405405405405406,
                "PROVIDED_CONSTANT_WEIGHT": 0.005405405405405406,
                "COMMON_CONSTANT_WEIGHT": 0.005405405405405406,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005405405405405406,
                "INPUT_VARIABLE_WEIGHT": 0.11351351351351352,
                "AXIS_CONSTANT_WEIGHT": 0.005405405405405406,
                "SHAPE_CONSTANT_WEIGHT": 0.005405405405405406,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005405405405405406
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 4,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_17",
        "description": "use bool tensor as condition",
        "target_program": "tf.where(in1, in2, tf.multiply(in2, -10))",
        "source": "From an internal Google forum",
        "constants": "[-10]",
        "examples": {
            "inputs": "[[True, False, False, True, False],[1, 2, 3, 4, 5],]",
            "outputs": "[1, -20, -30, 4, -50]"
        },
        "completions": [
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(tf.expand_dims(in1, axis=-1), in2, -10 * in2)",
            "return tf.where(in1, in2, -in2)",
            "return tf.where(in1, in2, -1*in2)",
            "def transform(in1, in2):\n    result = tf.where(in1, in2, -10*in2)\n    return result\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10 * in2)\n",
            "def transform(in1, in2):\n    return tf.where(in1, in2, -10*in2)\n",
            "return tf.where(in1, in2, -10*in2)",
            "return tf.where(in1, in2, tf.math.negative(in2))"
        ],
        "tf_operators": {
            "tf.where": 10,
            "tf.expand_dims": 1,
            "tf.math.negative": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [
                -1,
                -10
            ],
            [],
            [
                -1
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            [
                -10
            ],
            []
        ],
        "all_constants": [
            -1,
            -10
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "shape": 0,
            "tf_bool": 0,
            "provided": 5,
            "common": 2,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004901960784313725,
                "tf.add(x, y)": 0.004901960784313725,
                "tf.add_n(inputs)": 0.004901960784313725,
                "tf.argmax(input, axis)": 0.004901960784313725,
                "tf.argmin(input, axis)": 0.004901960784313725,
                "tf.argsort(values, axis, stable=True)": 0.004901960784313725,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004901960784313725,
                "tf.boolean_mask(tensor, mask)": 0.004901960784313725,
                "tf.broadcast_to(input, shape)": 0.004901960784313725,
                "tf.cast(x, dtype)": 0.004901960784313725,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004901960784313725,
                "tf.concat(values, axis)": 0.004901960784313725,
                "tf.constant(value)": 0.004901960784313725,
                "tf.constant(value, dtype)": 0.004901960784313725,
                "tf.divide(x, y)": 0.004901960784313725,
                "tf.equal(x, y)": 0.004901960784313725,
                "tf.exp(x)": 0.004901960784313725,
                "tf.expand_dims(input, axis)": 0.00980392156862745,
                "tf.eye(num_rows)": 0.004901960784313725,
                "tf.eye(num_rows, num_columns)": 0.004901960784313725,
                "tf.eye(num_rows, dtype)": 0.004901960784313725,
                "tf.fill(dims, value)": 0.004901960784313725,
                "tf.gather(params, indices)": 0.004901960784313725,
                "tf.gather(params, indices, axis, batch_dims)": 0.004901960784313725,
                "tf.gather_nd(params, indices)": 0.004901960784313725,
                "tf.gather_nd(params, indices, batch_dims)": 0.004901960784313725,
                "tf.greater(x, y)": 0.004901960784313725,
                "tf.greater_equal(x, y)": 0.004901960784313725,
                "tf.math.bincount(arr)": 0.004901960784313725,
                "tf.math.ceil(x)": 0.004901960784313725,
                "tf.math.count_nonzero(input)": 0.004901960784313725,
                "tf.math.count_nonzero(input, axis)": 0.004901960784313725,
                "tf.math.cumsum(x, axis)": 0.004901960784313725,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004901960784313725,
                "tf.math.divide_no_nan(x, y)": 0.004901960784313725,
                "tf.math.floor(x)": 0.004901960784313725,
                "tf.math.log(x)": 0.004901960784313725,
                "tf.math.logical_and(x, y)": 0.004901960784313725,
                "tf.math.logical_not(x)": 0.004901960784313725,
                "tf.math.logical_or(x, y)": 0.004901960784313725,
                "tf.math.logical_xor(x, y)": 0.004901960784313725,
                "tf.math.negative(x)": 0.00980392156862745,
                "tf.math.reciprocal(x)": 0.004901960784313725,
                "tf.math.reciprocal_no_nan(x)": 0.004901960784313725,
                "tf.math.segment_max(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_mean(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_min(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_prod(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_sum(data, segment_ids)": 0.004901960784313725,
                "tf.math.squared_difference(x, y)": 0.004901960784313725,
                "tf.math.top_k(input, k)": 0.004901960784313725,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.matmul(a, b)": 0.004901960784313725,
                "tf.maximum(x, y)": 0.004901960784313725,
                "tf.minimum(x, y)": 0.004901960784313725,
                "tf.multiply(x, y)": 0.004901960784313725,
                "tf.not_equal(x, y)": 0.004901960784313725,
                "tf.one_hot(indices, depth)": 0.004901960784313725,
                "tf.ones(shape)": 0.004901960784313725,
                "tf.ones_like(input)": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004901960784313725,
                "tf.range(start)": 0.004901960784313725,
                "tf.range(start, limit, delta)": 0.004901960784313725,
                "tf.reduce_any(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_all(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_max(input_tensor)": 0.004901960784313725,
                "tf.reduce_max(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_mean(input_tensor)": 0.004901960784313725,
                "tf.reduce_mean(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_min(input_tensor)": 0.004901960784313725,
                "tf.reduce_min(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_prod(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_sum(input_tensor)": 0.004901960784313725,
                "tf.reduce_sum(input_tensor, axis)": 0.004901960784313725,
                "tf.repeat(input, repeats)": 0.004901960784313725,
                "tf.repeat(input, repeats, axis)": 0.004901960784313725,
                "tf.reshape(tensor, shape)": 0.004901960784313725,
                "tf.reverse(tensor, axis)": 0.004901960784313725,
                "tf.roll(input, shift, axis)": 0.004901960784313725,
                "tf.round(x)": 0.004901960784313725,
                "tf.scatter_nd(indices, updates, shape)": 0.004901960784313725,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004901960784313725,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004901960784313725,
                "tf.sequence_mask(lengths)": 0.004901960784313725,
                "tf.sequence_mask(lengths, maxlen)": 0.004901960784313725,
                "tf.shape(input)": 0.004901960784313725,
                "tf.sign(x)": 0.004901960784313725,
                "tf.sort(values, axis)": 0.004901960784313725,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004901960784313725,
                "tf.sqrt(x)": 0.004901960784313725,
                "tf.square(x)": 0.004901960784313725,
                "tf.squeeze(input)": 0.004901960784313725,
                "tf.squeeze(input, axis)": 0.004901960784313725,
                "tf.stack(values, axis)": 0.004901960784313725,
                "tf.subtract(x, y)": 0.004901960784313725,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004901960784313725,
                "tf.tensordot(a, b, axes)": 0.004901960784313725,
                "tf.tile(input, multiples)": 0.004901960784313725,
                "tf.transpose(a)": 0.004901960784313725,
                "tf.transpose(a, perm)": 0.004901960784313725,
                "tf.unique_with_counts(x)": 0.004901960784313725,
                "tf.unstack(value, axis)": 0.004901960784313725,
                "tf.where(condition)": 0.004901960784313725,
                "tf.where(condition, x, y)": 0.05392156862745098,
                "tf.zeros(shape)": 0.004901960784313725,
                "tf.zeros_like(input)": 0.004901960784313725,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004901960784313725,
                "tf.sparse.add(a, b)": 0.004901960784313725,
                "tf.sparse.concat(axis, sp_inputs)": 0.004901960784313725,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004901960784313725,
                "tf.sparse.from_dense(tensor)": 0.004901960784313725,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004901960784313725,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004901960784313725,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004901960784313725,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004901960784313725,
                "tf.sparse.reset_shape(sp_input)": 0.004901960784313725,
                "tf.sparse.reshape(sp_input, shape)": 0.004901960784313725,
                "tf.sparse.retain(sp_input, to_retain)": 0.004901960784313725,
                "tf.sparse.slice(sp_input, start, size)": 0.004901960784313725,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004901960784313725,
                "tf.sparse.to_dense(sp_input)": 0.004901960784313725,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004901960784313725,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004901960784313725,
                "tf.sparse.transpose(sp_input)": 0.004901960784313725,
                "tf.sparse.transpose(sp_input, perm)": 0.004901960784313725,
                "IndexingAxis1Operation": 0.004901960784313725,
                "IndexingOperation": 0.004901960784313725,
                "PairCreationOperation": 0.004901960784313725,
                "SingletonTupleCreationOperation": 0.004901960784313725,
                "SlicingAxis0BothOperation": 0.004901960784313725,
                "SlicingAxis0LeftOperation": 0.004901960784313725,
                "SlicingAxis0RightOperation": 0.004901960784313725,
                "SlicingAxis1BothOperation": 0.004901960784313725,
                "SlicingAxis1LeftOperation": 0.004901960784313725,
                "SlicingAxis1RightOperation": 0.004901960784313725,
                "TripleCreationOperation": 0.004901960784313725,
                "PROVIDED_CONSTANT_WEIGHT": 0.029411764705882353,
                "COMMON_CONSTANT_WEIGHT": 0.014705882352941176,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004901960784313725,
                "INPUT_VARIABLE_WEIGHT": 0.15196078431372548,
                "AXIS_CONSTANT_WEIGHT": 0.004901960784313725,
                "SHAPE_CONSTANT_WEIGHT": 0.004901960784313725,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004901960784313725
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 5,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_18",
        "description": "(\\'sum of elements in the first tensor but partitioned by the second tensor\\')",
        "target_program": "tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 7, -12, 10, 20],[1, 2, 3, 1, 2],]",
            "outputs": "[15, 27, -12, 15, 27]"
        },
        "completions": [
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.segment_sum(in1, in2)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "result = tf.math.segment_sum(in1, in2)\nreturn result\n",
            "def transform(in1, in2):\n    return tf.math.segment_sum(in1, in2)\n",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2) + 1)",
            "return tf.math.unsorted_segment_sum(in1, in2, tf.reduce_max(in2)+1)",
            "return tf.math.segment_sum(in1, in2)"
        ],
        "tf_operators": {
            "tf.reduce_max": 6,
            "tf.math.unsorted_segment_sum": 6,
            "tf.math.segment_sum": 4
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 26,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 6,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0049261083743842365,
                "tf.add(x, y)": 0.0049261083743842365,
                "tf.add_n(inputs)": 0.0049261083743842365,
                "tf.argmax(input, axis)": 0.0049261083743842365,
                "tf.argmin(input, axis)": 0.0049261083743842365,
                "tf.argsort(values, axis, stable=True)": 0.0049261083743842365,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0049261083743842365,
                "tf.boolean_mask(tensor, mask)": 0.0049261083743842365,
                "tf.broadcast_to(input, shape)": 0.0049261083743842365,
                "tf.cast(x, dtype)": 0.0049261083743842365,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0049261083743842365,
                "tf.concat(values, axis)": 0.0049261083743842365,
                "tf.constant(value)": 0.0049261083743842365,
                "tf.constant(value, dtype)": 0.0049261083743842365,
                "tf.divide(x, y)": 0.0049261083743842365,
                "tf.equal(x, y)": 0.0049261083743842365,
                "tf.exp(x)": 0.0049261083743842365,
                "tf.expand_dims(input, axis)": 0.0049261083743842365,
                "tf.eye(num_rows)": 0.0049261083743842365,
                "tf.eye(num_rows, num_columns)": 0.0049261083743842365,
                "tf.eye(num_rows, dtype)": 0.0049261083743842365,
                "tf.fill(dims, value)": 0.0049261083743842365,
                "tf.gather(params, indices)": 0.0049261083743842365,
                "tf.gather(params, indices, axis, batch_dims)": 0.0049261083743842365,
                "tf.gather_nd(params, indices)": 0.0049261083743842365,
                "tf.gather_nd(params, indices, batch_dims)": 0.0049261083743842365,
                "tf.greater(x, y)": 0.0049261083743842365,
                "tf.greater_equal(x, y)": 0.0049261083743842365,
                "tf.math.bincount(arr)": 0.0049261083743842365,
                "tf.math.ceil(x)": 0.0049261083743842365,
                "tf.math.count_nonzero(input)": 0.0049261083743842365,
                "tf.math.count_nonzero(input, axis)": 0.0049261083743842365,
                "tf.math.cumsum(x, axis)": 0.0049261083743842365,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0049261083743842365,
                "tf.math.divide_no_nan(x, y)": 0.0049261083743842365,
                "tf.math.floor(x)": 0.0049261083743842365,
                "tf.math.log(x)": 0.0049261083743842365,
                "tf.math.logical_and(x, y)": 0.0049261083743842365,
                "tf.math.logical_not(x)": 0.0049261083743842365,
                "tf.math.logical_or(x, y)": 0.0049261083743842365,
                "tf.math.logical_xor(x, y)": 0.0049261083743842365,
                "tf.math.negative(x)": 0.0049261083743842365,
                "tf.math.reciprocal(x)": 0.0049261083743842365,
                "tf.math.reciprocal_no_nan(x)": 0.0049261083743842365,
                "tf.math.segment_max(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_mean(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_min(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_prod(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_sum(data, segment_ids)": 0.024630541871921183,
                "tf.math.squared_difference(x, y)": 0.0049261083743842365,
                "tf.math.top_k(input, k)": 0.0049261083743842365,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.034482758620689655,
                "tf.matmul(a, b)": 0.0049261083743842365,
                "tf.maximum(x, y)": 0.0049261083743842365,
                "tf.minimum(x, y)": 0.0049261083743842365,
                "tf.multiply(x, y)": 0.0049261083743842365,
                "tf.not_equal(x, y)": 0.0049261083743842365,
                "tf.one_hot(indices, depth)": 0.0049261083743842365,
                "tf.ones(shape)": 0.0049261083743842365,
                "tf.ones_like(input)": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0049261083743842365,
                "tf.range(start)": 0.0049261083743842365,
                "tf.range(start, limit, delta)": 0.0049261083743842365,
                "tf.reduce_any(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_all(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_max(input_tensor)": 0.034482758620689655,
                "tf.reduce_max(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_mean(input_tensor)": 0.0049261083743842365,
                "tf.reduce_mean(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_min(input_tensor)": 0.0049261083743842365,
                "tf.reduce_min(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_prod(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_sum(input_tensor)": 0.0049261083743842365,
                "tf.reduce_sum(input_tensor, axis)": 0.0049261083743842365,
                "tf.repeat(input, repeats)": 0.0049261083743842365,
                "tf.repeat(input, repeats, axis)": 0.0049261083743842365,
                "tf.reshape(tensor, shape)": 0.0049261083743842365,
                "tf.reverse(tensor, axis)": 0.0049261083743842365,
                "tf.roll(input, shift, axis)": 0.0049261083743842365,
                "tf.round(x)": 0.0049261083743842365,
                "tf.scatter_nd(indices, updates, shape)": 0.0049261083743842365,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0049261083743842365,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0049261083743842365,
                "tf.sequence_mask(lengths)": 0.0049261083743842365,
                "tf.sequence_mask(lengths, maxlen)": 0.0049261083743842365,
                "tf.shape(input)": 0.0049261083743842365,
                "tf.sign(x)": 0.0049261083743842365,
                "tf.sort(values, axis)": 0.0049261083743842365,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0049261083743842365,
                "tf.sqrt(x)": 0.0049261083743842365,
                "tf.square(x)": 0.0049261083743842365,
                "tf.squeeze(input)": 0.0049261083743842365,
                "tf.squeeze(input, axis)": 0.0049261083743842365,
                "tf.stack(values, axis)": 0.0049261083743842365,
                "tf.subtract(x, y)": 0.0049261083743842365,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0049261083743842365,
                "tf.tensordot(a, b, axes)": 0.0049261083743842365,
                "tf.tile(input, multiples)": 0.0049261083743842365,
                "tf.transpose(a)": 0.0049261083743842365,
                "tf.transpose(a, perm)": 0.0049261083743842365,
                "tf.unique_with_counts(x)": 0.0049261083743842365,
                "tf.unstack(value, axis)": 0.0049261083743842365,
                "tf.where(condition)": 0.0049261083743842365,
                "tf.where(condition, x, y)": 0.0049261083743842365,
                "tf.zeros(shape)": 0.0049261083743842365,
                "tf.zeros_like(input)": 0.0049261083743842365,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0049261083743842365,
                "tf.sparse.add(a, b)": 0.0049261083743842365,
                "tf.sparse.concat(axis, sp_inputs)": 0.0049261083743842365,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0049261083743842365,
                "tf.sparse.from_dense(tensor)": 0.0049261083743842365,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0049261083743842365,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0049261083743842365,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0049261083743842365,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0049261083743842365,
                "tf.sparse.reset_shape(sp_input)": 0.0049261083743842365,
                "tf.sparse.reshape(sp_input, shape)": 0.0049261083743842365,
                "tf.sparse.retain(sp_input, to_retain)": 0.0049261083743842365,
                "tf.sparse.slice(sp_input, start, size)": 0.0049261083743842365,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0049261083743842365,
                "tf.sparse.to_dense(sp_input)": 0.0049261083743842365,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0049261083743842365,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0049261083743842365,
                "tf.sparse.transpose(sp_input)": 0.0049261083743842365,
                "tf.sparse.transpose(sp_input, perm)": 0.0049261083743842365,
                "IndexingAxis1Operation": 0.0049261083743842365,
                "IndexingOperation": 0.0049261083743842365,
                "PairCreationOperation": 0.0049261083743842365,
                "SingletonTupleCreationOperation": 0.0049261083743842365,
                "SlicingAxis0BothOperation": 0.0049261083743842365,
                "SlicingAxis0LeftOperation": 0.0049261083743842365,
                "SlicingAxis0RightOperation": 0.0049261083743842365,
                "SlicingAxis1BothOperation": 0.0049261083743842365,
                "SlicingAxis1LeftOperation": 0.0049261083743842365,
                "SlicingAxis1RightOperation": 0.0049261083743842365,
                "TripleCreationOperation": 0.0049261083743842365,
                "PROVIDED_CONSTANT_WEIGHT": 0.0049261083743842365,
                "COMMON_CONSTANT_WEIGHT": 0.034482758620689655,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0049261083743842365,
                "INPUT_VARIABLE_WEIGHT": 0.1330049261083744,
                "AXIS_CONSTANT_WEIGHT": 0.0049261083743842365,
                "SHAPE_CONSTANT_WEIGHT": 0.0049261083743842365,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0049261083743842365
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 5,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 5,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 5,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_19",
        "description": "scatter a 2-D tensor with indices",
        "target_program": "tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[[11, 12, 13], [30, 20, 10], [77, 88, 99]],[[2, 0, 1], [1, 0, 2], [0, 2, 1]],]",
            "outputs": "[[12, 13, 11],    [20, 30, 10],    [77, 99, 88]]"
        },
        "completions": [
            "return tf.scatter_nd(indices=tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=-1), updates=in1, shape=tf.shape(in1))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n",
            "result = tf.scatter_nd(tf.expand_dims(in2, axis=-1), in1, tf.shape(in1))\n",
            "return tf.gather_nd(in1, tf.transpose(tf.stack([tf.range(tf.shape(in1)[0]), in2])))",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather_nd(in1, in2)",
            "output = tf.scatter_nd(indices=in2, updates=in1, shape=(3, 3))\nreturn output\n",
            "return tf.scatter_nd(in2, in1, tf.shape(in1))",
            "return tf.gather_nd(in1, tf.transpose(in2))\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(in1.shape[0]), in2], axis=1))\n"
        ],
        "tf_operators": {
            "tf.stack": 5,
            "tf.range": 5,
            "tf.shape": 6,
            "tf.scatter_nd": 4,
            "tf.gather_nd": 6,
            "tf.expand_dims": 1,
            "tf.transpose": 2
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 2,
        "parsed_constants": [
            [
                0,
                -1
            ],
            [
                0,
                1
            ],
            [
                -1
            ],
            [
                0
            ],
            [
                0,
                1
            ],
            [],
            [
                3,
                3
            ],
            [],
            [],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 27,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 1,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004366812227074236,
                "tf.add(x, y)": 0.004366812227074236,
                "tf.add_n(inputs)": 0.004366812227074236,
                "tf.argmax(input, axis)": 0.004366812227074236,
                "tf.argmin(input, axis)": 0.004366812227074236,
                "tf.argsort(values, axis, stable=True)": 0.004366812227074236,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004366812227074236,
                "tf.boolean_mask(tensor, mask)": 0.004366812227074236,
                "tf.broadcast_to(input, shape)": 0.004366812227074236,
                "tf.cast(x, dtype)": 0.004366812227074236,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004366812227074236,
                "tf.concat(values, axis)": 0.004366812227074236,
                "tf.constant(value)": 0.004366812227074236,
                "tf.constant(value, dtype)": 0.004366812227074236,
                "tf.divide(x, y)": 0.004366812227074236,
                "tf.equal(x, y)": 0.004366812227074236,
                "tf.exp(x)": 0.004366812227074236,
                "tf.expand_dims(input, axis)": 0.008733624454148471,
                "tf.eye(num_rows)": 0.004366812227074236,
                "tf.eye(num_rows, num_columns)": 0.004366812227074236,
                "tf.eye(num_rows, dtype)": 0.004366812227074236,
                "tf.fill(dims, value)": 0.004366812227074236,
                "tf.gather(params, indices)": 0.004366812227074236,
                "tf.gather(params, indices, axis, batch_dims)": 0.004366812227074236,
                "tf.gather_nd(params, indices)": 0.03056768558951965,
                "tf.gather_nd(params, indices, batch_dims)": 0.004366812227074236,
                "tf.greater(x, y)": 0.004366812227074236,
                "tf.greater_equal(x, y)": 0.004366812227074236,
                "tf.math.bincount(arr)": 0.004366812227074236,
                "tf.math.ceil(x)": 0.004366812227074236,
                "tf.math.count_nonzero(input)": 0.004366812227074236,
                "tf.math.count_nonzero(input, axis)": 0.004366812227074236,
                "tf.math.cumsum(x, axis)": 0.004366812227074236,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004366812227074236,
                "tf.math.divide_no_nan(x, y)": 0.004366812227074236,
                "tf.math.floor(x)": 0.004366812227074236,
                "tf.math.log(x)": 0.004366812227074236,
                "tf.math.logical_and(x, y)": 0.004366812227074236,
                "tf.math.logical_not(x)": 0.004366812227074236,
                "tf.math.logical_or(x, y)": 0.004366812227074236,
                "tf.math.logical_xor(x, y)": 0.004366812227074236,
                "tf.math.negative(x)": 0.004366812227074236,
                "tf.math.reciprocal(x)": 0.004366812227074236,
                "tf.math.reciprocal_no_nan(x)": 0.004366812227074236,
                "tf.math.segment_max(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_mean(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_min(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_prod(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_sum(data, segment_ids)": 0.004366812227074236,
                "tf.math.squared_difference(x, y)": 0.004366812227074236,
                "tf.math.top_k(input, k)": 0.004366812227074236,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.matmul(a, b)": 0.004366812227074236,
                "tf.maximum(x, y)": 0.004366812227074236,
                "tf.minimum(x, y)": 0.004366812227074236,
                "tf.multiply(x, y)": 0.004366812227074236,
                "tf.not_equal(x, y)": 0.004366812227074236,
                "tf.one_hot(indices, depth)": 0.004366812227074236,
                "tf.ones(shape)": 0.004366812227074236,
                "tf.ones_like(input)": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004366812227074236,
                "tf.range(start)": 0.026200873362445413,
                "tf.range(start, limit, delta)": 0.004366812227074236,
                "tf.reduce_any(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_all(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_max(input_tensor)": 0.004366812227074236,
                "tf.reduce_max(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_mean(input_tensor)": 0.004366812227074236,
                "tf.reduce_mean(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_min(input_tensor)": 0.004366812227074236,
                "tf.reduce_min(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_prod(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_sum(input_tensor)": 0.004366812227074236,
                "tf.reduce_sum(input_tensor, axis)": 0.004366812227074236,
                "tf.repeat(input, repeats)": 0.004366812227074236,
                "tf.repeat(input, repeats, axis)": 0.004366812227074236,
                "tf.reshape(tensor, shape)": 0.004366812227074236,
                "tf.reverse(tensor, axis)": 0.004366812227074236,
                "tf.roll(input, shift, axis)": 0.004366812227074236,
                "tf.round(x)": 0.004366812227074236,
                "tf.scatter_nd(indices, updates, shape)": 0.021834061135371178,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004366812227074236,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004366812227074236,
                "tf.sequence_mask(lengths)": 0.004366812227074236,
                "tf.sequence_mask(lengths, maxlen)": 0.004366812227074236,
                "tf.shape(input)": 0.034934497816593885,
                "tf.sign(x)": 0.004366812227074236,
                "tf.sort(values, axis)": 0.004366812227074236,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004366812227074236,
                "tf.sqrt(x)": 0.004366812227074236,
                "tf.square(x)": 0.004366812227074236,
                "tf.squeeze(input)": 0.004366812227074236,
                "tf.squeeze(input, axis)": 0.004366812227074236,
                "tf.stack(values, axis)": 0.026200873362445413,
                "tf.subtract(x, y)": 0.004366812227074236,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004366812227074236,
                "tf.tensordot(a, b, axes)": 0.004366812227074236,
                "tf.tile(input, multiples)": 0.004366812227074236,
                "tf.transpose(a)": 0.013100436681222707,
                "tf.transpose(a, perm)": 0.004366812227074236,
                "tf.unique_with_counts(x)": 0.004366812227074236,
                "tf.unstack(value, axis)": 0.004366812227074236,
                "tf.where(condition)": 0.004366812227074236,
                "tf.where(condition, x, y)": 0.004366812227074236,
                "tf.zeros(shape)": 0.004366812227074236,
                "tf.zeros_like(input)": 0.004366812227074236,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004366812227074236,
                "tf.sparse.add(a, b)": 0.004366812227074236,
                "tf.sparse.concat(axis, sp_inputs)": 0.004366812227074236,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004366812227074236,
                "tf.sparse.from_dense(tensor)": 0.004366812227074236,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004366812227074236,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004366812227074236,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004366812227074236,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004366812227074236,
                "tf.sparse.reset_shape(sp_input)": 0.004366812227074236,
                "tf.sparse.reshape(sp_input, shape)": 0.004366812227074236,
                "tf.sparse.retain(sp_input, to_retain)": 0.004366812227074236,
                "tf.sparse.slice(sp_input, start, size)": 0.004366812227074236,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004366812227074236,
                "tf.sparse.to_dense(sp_input)": 0.004366812227074236,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004366812227074236,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004366812227074236,
                "tf.sparse.transpose(sp_input)": 0.004366812227074236,
                "tf.sparse.transpose(sp_input, perm)": 0.004366812227074236,
                "IndexingAxis1Operation": 0.004366812227074236,
                "IndexingOperation": 0.026200873362445413,
                "PairCreationOperation": 0.008733624454148471,
                "SingletonTupleCreationOperation": 0.004366812227074236,
                "SlicingAxis0BothOperation": 0.004366812227074236,
                "SlicingAxis0LeftOperation": 0.004366812227074236,
                "SlicingAxis0RightOperation": 0.004366812227074236,
                "SlicingAxis1BothOperation": 0.004366812227074236,
                "SlicingAxis1LeftOperation": 0.004366812227074236,
                "SlicingAxis1RightOperation": 0.004366812227074236,
                "TripleCreationOperation": 0.004366812227074236,
                "PROVIDED_CONSTANT_WEIGHT": 0.004366812227074236,
                "COMMON_CONSTANT_WEIGHT": 0.048034934497816595,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004366812227074236,
                "INPUT_VARIABLE_WEIGHT": 0.1222707423580786,
                "AXIS_CONSTANT_WEIGHT": 0.004366812227074236,
                "SHAPE_CONSTANT_WEIGHT": 0.004366812227074236,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.008733624454148471,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004366812227074236
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 5,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 6,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_20",
        "description": "sort a tensor and return sorted index in original order",
        "target_program": "tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)",
        "source": "From an internal Google forum",
        "constants": "[]",
        "examples": {
            "inputs": "[[10, 7, 4, 3, 2, 8],]",
            "outputs": "[5, 3, 2, 1, 0, 4]"
        },
        "completions": [
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, stable=True)",
            "return tf.argsort(in1)",
            "sorted_indices = tf.argsort(in1)\n",
            "def transform(in1):\n    sorted_indices = tf.argsort(in1)\n    return sorted_indices\n",
            "return tf.argsort(in1)",
            "return tf.argsort(in1, axis=0)\n"
        ],
        "tf_operators": {
            "tf.argsort": 10
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                0
            ]
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 3,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005847953216374269,
                "tf.add(x, y)": 0.005847953216374269,
                "tf.add_n(inputs)": 0.005847953216374269,
                "tf.argmax(input, axis)": 0.005847953216374269,
                "tf.argmin(input, axis)": 0.005847953216374269,
                "tf.argsort(values, axis, stable=True)": 0.023391812865497075,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005847953216374269,
                "tf.boolean_mask(tensor, mask)": 0.005847953216374269,
                "tf.broadcast_to(input, shape)": 0.005847953216374269,
                "tf.cast(x, dtype)": 0.005847953216374269,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005847953216374269,
                "tf.concat(values, axis)": 0.005847953216374269,
                "tf.constant(value)": 0.005847953216374269,
                "tf.constant(value, dtype)": 0.005847953216374269,
                "tf.divide(x, y)": 0.005847953216374269,
                "tf.equal(x, y)": 0.005847953216374269,
                "tf.exp(x)": 0.005847953216374269,
                "tf.expand_dims(input, axis)": 0.005847953216374269,
                "tf.eye(num_rows)": 0.005847953216374269,
                "tf.eye(num_rows, num_columns)": 0.005847953216374269,
                "tf.eye(num_rows, dtype)": 0.005847953216374269,
                "tf.fill(dims, value)": 0.005847953216374269,
                "tf.gather(params, indices)": 0.005847953216374269,
                "tf.gather(params, indices, axis, batch_dims)": 0.005847953216374269,
                "tf.gather_nd(params, indices)": 0.005847953216374269,
                "tf.gather_nd(params, indices, batch_dims)": 0.005847953216374269,
                "tf.greater(x, y)": 0.005847953216374269,
                "tf.greater_equal(x, y)": 0.005847953216374269,
                "tf.math.bincount(arr)": 0.005847953216374269,
                "tf.math.ceil(x)": 0.005847953216374269,
                "tf.math.count_nonzero(input)": 0.005847953216374269,
                "tf.math.count_nonzero(input, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis)": 0.005847953216374269,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005847953216374269,
                "tf.math.divide_no_nan(x, y)": 0.005847953216374269,
                "tf.math.floor(x)": 0.005847953216374269,
                "tf.math.log(x)": 0.005847953216374269,
                "tf.math.logical_and(x, y)": 0.005847953216374269,
                "tf.math.logical_not(x)": 0.005847953216374269,
                "tf.math.logical_or(x, y)": 0.005847953216374269,
                "tf.math.logical_xor(x, y)": 0.005847953216374269,
                "tf.math.negative(x)": 0.005847953216374269,
                "tf.math.reciprocal(x)": 0.005847953216374269,
                "tf.math.reciprocal_no_nan(x)": 0.005847953216374269,
                "tf.math.segment_max(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_mean(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_min(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_prod(data, segment_ids)": 0.005847953216374269,
                "tf.math.segment_sum(data, segment_ids)": 0.005847953216374269,
                "tf.math.squared_difference(x, y)": 0.005847953216374269,
                "tf.math.top_k(input, k)": 0.005847953216374269,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005847953216374269,
                "tf.matmul(a, b)": 0.005847953216374269,
                "tf.maximum(x, y)": 0.005847953216374269,
                "tf.minimum(x, y)": 0.005847953216374269,
                "tf.multiply(x, y)": 0.005847953216374269,
                "tf.not_equal(x, y)": 0.005847953216374269,
                "tf.one_hot(indices, depth)": 0.005847953216374269,
                "tf.ones(shape)": 0.005847953216374269,
                "tf.ones_like(input)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005847953216374269,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005847953216374269,
                "tf.range(start)": 0.005847953216374269,
                "tf.range(start, limit, delta)": 0.005847953216374269,
                "tf.reduce_any(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_all(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_max(input_tensor)": 0.005847953216374269,
                "tf.reduce_max(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor)": 0.005847953216374269,
                "tf.reduce_mean(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_min(input_tensor)": 0.005847953216374269,
                "tf.reduce_min(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_prod(input_tensor, axis)": 0.005847953216374269,
                "tf.reduce_sum(input_tensor)": 0.005847953216374269,
                "tf.reduce_sum(input_tensor, axis)": 0.005847953216374269,
                "tf.repeat(input, repeats)": 0.005847953216374269,
                "tf.repeat(input, repeats, axis)": 0.005847953216374269,
                "tf.reshape(tensor, shape)": 0.005847953216374269,
                "tf.reverse(tensor, axis)": 0.005847953216374269,
                "tf.roll(input, shift, axis)": 0.005847953216374269,
                "tf.round(x)": 0.005847953216374269,
                "tf.scatter_nd(indices, updates, shape)": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005847953216374269,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005847953216374269,
                "tf.sequence_mask(lengths)": 0.005847953216374269,
                "tf.sequence_mask(lengths, maxlen)": 0.005847953216374269,
                "tf.shape(input)": 0.005847953216374269,
                "tf.sign(x)": 0.005847953216374269,
                "tf.sort(values, axis)": 0.005847953216374269,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005847953216374269,
                "tf.sqrt(x)": 0.005847953216374269,
                "tf.square(x)": 0.005847953216374269,
                "tf.squeeze(input)": 0.005847953216374269,
                "tf.squeeze(input, axis)": 0.005847953216374269,
                "tf.stack(values, axis)": 0.005847953216374269,
                "tf.subtract(x, y)": 0.005847953216374269,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005847953216374269,
                "tf.tensordot(a, b, axes)": 0.005847953216374269,
                "tf.tile(input, multiples)": 0.005847953216374269,
                "tf.transpose(a)": 0.005847953216374269,
                "tf.transpose(a, perm)": 0.005847953216374269,
                "tf.unique_with_counts(x)": 0.005847953216374269,
                "tf.unstack(value, axis)": 0.005847953216374269,
                "tf.where(condition)": 0.005847953216374269,
                "tf.where(condition, x, y)": 0.005847953216374269,
                "tf.zeros(shape)": 0.005847953216374269,
                "tf.zeros_like(input)": 0.005847953216374269,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005847953216374269,
                "tf.sparse.add(a, b)": 0.005847953216374269,
                "tf.sparse.concat(axis, sp_inputs)": 0.005847953216374269,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005847953216374269,
                "tf.sparse.from_dense(tensor)": 0.005847953216374269,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005847953216374269,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005847953216374269,
                "tf.sparse.reset_shape(sp_input)": 0.005847953216374269,
                "tf.sparse.reshape(sp_input, shape)": 0.005847953216374269,
                "tf.sparse.retain(sp_input, to_retain)": 0.005847953216374269,
                "tf.sparse.slice(sp_input, start, size)": 0.005847953216374269,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input)": 0.005847953216374269,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005847953216374269,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input)": 0.005847953216374269,
                "tf.sparse.transpose(sp_input, perm)": 0.005847953216374269,
                "IndexingAxis1Operation": 0.005847953216374269,
                "IndexingOperation": 0.005847953216374269,
                "PairCreationOperation": 0.005847953216374269,
                "SingletonTupleCreationOperation": 0.005847953216374269,
                "SlicingAxis0BothOperation": 0.005847953216374269,
                "SlicingAxis0LeftOperation": 0.005847953216374269,
                "SlicingAxis0RightOperation": 0.005847953216374269,
                "SlicingAxis1BothOperation": 0.005847953216374269,
                "SlicingAxis1LeftOperation": 0.005847953216374269,
                "SlicingAxis1RightOperation": 0.005847953216374269,
                "TripleCreationOperation": 0.005847953216374269,
                "PROVIDED_CONSTANT_WEIGHT": 0.005847953216374269,
                "COMMON_CONSTANT_WEIGHT": 0.023391812865497075,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005847953216374269,
                "INPUT_VARIABLE_WEIGHT": 0.06432748538011696,
                "AXIS_CONSTANT_WEIGHT": 0.005847953216374269,
                "SHAPE_CONSTANT_WEIGHT": 0.005847953216374269,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005847953216374269,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005847953216374269,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005847953216374269,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005847953216374269,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005847953216374269
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)": 7,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 7,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "google_21",
        "description": "update a tensor at the given indices",
        "target_program": "tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "{'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]],}",
            "outputs": "[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]]"
        },
        "completions": [
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)",
            "def transform(tensor, indices, updates):\n    return tf.tensor_scatter_nd_update(tensor, indices, updates)\n",
            "return tf.tensor_scatter_nd_update(tensor, indices, updates)\n"
        ],
        "tf_operators": {
            "tf.tensor_scatter_nd_update": 10
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.005128205128205128,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005128205128205128,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.005128205128205128,
                "tf.constant(value)": 0.005128205128205128,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.005128205128205128,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.005128205128205128,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.005128205128205128,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.005128205128205128,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.005128205128205128,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.005128205128205128,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.005128205128205128,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.05641025641025641,
                "tf.tensordot(a, b, axes)": 0.005128205128205128,
                "tf.tile(input, multiples)": 0.005128205128205128,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.005128205128205128,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.005128205128205128,
                "PairCreationOperation": 0.005128205128205128,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.005128205128205128,
                "PROVIDED_CONSTANT_WEIGHT": 0.005128205128205128,
                "COMMON_CONSTANT_WEIGHT": 0.005128205128205128,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.15897435897435896,
                "AXIS_CONSTANT_WEIGHT": 0.005128205128205128,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 4,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "google_22",
        "description": "pair with row index",
        "target_program": "tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)",
        "source": "Real task encountered by Googler, 12/15/2020",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 2], [1, 3], [2, 4]],]",
            "outputs": "[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]]"
        },
        "completions": [
            "return tf.tile(in1, [2, 1])\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), 2)\n",
            "indices = tf.range(0, tf.shape(in1)[0])\nreturn tf.repeat(indices, in1[:, 1] - in1[:, 0] + 1) + tf.range(0, in1[:, 1] - in1[:, 0] + 1)\n",
            "return tf.repeat(in1, 2, axis=0) - tf.cast(tf.range(in1.shape[0])[:, None] // 2, in1.dtype)\n                                                                                                                                                                                                                ",
            "row_idx = tf.range(tf.shape(in1)[0])\npair_idx = tf.gather(tf.tile(row_idx, [2]), tf.argsort(in1[:,0]))\nreturn tf.stack([tf.repeat(pair_idx, 2), tf.cast(tf.unstack(in1), tf.int32)], axis=1)\n",
            "def transform(in1):\n    row_indices = tf.repeat(tf.range(tf.shape(in1)[0]), repeats=2)\n    pair_indices = tf.tile(in1, multiples=[2, 1])\n    return tf.stack([row_indices, pair_indices], axis=1)\n",
            "return tf.repeat(in1, 2, axis=0)",
            "return tf.tile(in1, [2, 1]) // tf.shape(in1)[0]\n",
            "indices = tf.reshape(in1, [-1])\nrow_indices = tf.repeat(tf.range(tf.shape(in1)[0]), 2)\nreturn tf.transpose(tf.stack([row_indices, indices]))\n",
            "return tf.repeat(in1, repeats=2)\n"
        ],
        "tf_operators": {
            "tf.tile": 4,
            "tf.range": 6,
            "tf.shape": 6,
            "tf.repeat": 8,
            "tf.cast": 2,
            "tf.gather": 1,
            "tf.unstack": 1,
            "tf.int32": 1,
            "tf.stack": 3,
            "tf.argsort": 1,
            "tf.transpose": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                2,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                0,
                1,
                0,
                1,
                0,
                1,
                0,
                1
            ],
            [
                2,
                0,
                0,
                2
            ],
            [
                0,
                2,
                0,
                2,
                1
            ],
            [
                0,
                2,
                2,
                1,
                1
            ],
            [
                2,
                0
            ],
            [
                2,
                1,
                0
            ],
            [
                -1,
                0,
                2
            ],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 23,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 19,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 12,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003861003861003861,
                "tf.add(x, y)": 0.003861003861003861,
                "tf.add_n(inputs)": 0.003861003861003861,
                "tf.argmax(input, axis)": 0.003861003861003861,
                "tf.argmin(input, axis)": 0.003861003861003861,
                "tf.argsort(values, axis, stable=True)": 0.003861003861003861,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.003861003861003861,
                "tf.boolean_mask(tensor, mask)": 0.003861003861003861,
                "tf.broadcast_to(input, shape)": 0.003861003861003861,
                "tf.cast(x, dtype)": 0.011583011583011582,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003861003861003861,
                "tf.concat(values, axis)": 0.003861003861003861,
                "tf.constant(value)": 0.003861003861003861,
                "tf.constant(value, dtype)": 0.003861003861003861,
                "tf.divide(x, y)": 0.003861003861003861,
                "tf.equal(x, y)": 0.003861003861003861,
                "tf.exp(x)": 0.003861003861003861,
                "tf.expand_dims(input, axis)": 0.003861003861003861,
                "tf.eye(num_rows)": 0.003861003861003861,
                "tf.eye(num_rows, num_columns)": 0.003861003861003861,
                "tf.eye(num_rows, dtype)": 0.003861003861003861,
                "tf.fill(dims, value)": 0.003861003861003861,
                "tf.gather(params, indices)": 0.007722007722007722,
                "tf.gather(params, indices, axis, batch_dims)": 0.003861003861003861,
                "tf.gather_nd(params, indices)": 0.003861003861003861,
                "tf.gather_nd(params, indices, batch_dims)": 0.003861003861003861,
                "tf.greater(x, y)": 0.003861003861003861,
                "tf.greater_equal(x, y)": 0.003861003861003861,
                "tf.math.bincount(arr)": 0.003861003861003861,
                "tf.math.ceil(x)": 0.003861003861003861,
                "tf.math.count_nonzero(input)": 0.003861003861003861,
                "tf.math.count_nonzero(input, axis)": 0.003861003861003861,
                "tf.math.cumsum(x, axis)": 0.003861003861003861,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003861003861003861,
                "tf.math.divide_no_nan(x, y)": 0.003861003861003861,
                "tf.math.floor(x)": 0.003861003861003861,
                "tf.math.log(x)": 0.003861003861003861,
                "tf.math.logical_and(x, y)": 0.003861003861003861,
                "tf.math.logical_not(x)": 0.003861003861003861,
                "tf.math.logical_or(x, y)": 0.003861003861003861,
                "tf.math.logical_xor(x, y)": 0.003861003861003861,
                "tf.math.negative(x)": 0.003861003861003861,
                "tf.math.reciprocal(x)": 0.003861003861003861,
                "tf.math.reciprocal_no_nan(x)": 0.003861003861003861,
                "tf.math.segment_max(data, segment_ids)": 0.003861003861003861,
                "tf.math.segment_mean(data, segment_ids)": 0.003861003861003861,
                "tf.math.segment_min(data, segment_ids)": 0.003861003861003861,
                "tf.math.segment_prod(data, segment_ids)": 0.003861003861003861,
                "tf.math.segment_sum(data, segment_ids)": 0.003861003861003861,
                "tf.math.squared_difference(x, y)": 0.003861003861003861,
                "tf.math.top_k(input, k)": 0.003861003861003861,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003861003861003861,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003861003861003861,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003861003861003861,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003861003861003861,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003861003861003861,
                "tf.matmul(a, b)": 0.003861003861003861,
                "tf.maximum(x, y)": 0.003861003861003861,
                "tf.minimum(x, y)": 0.003861003861003861,
                "tf.multiply(x, y)": 0.003861003861003861,
                "tf.not_equal(x, y)": 0.003861003861003861,
                "tf.one_hot(indices, depth)": 0.003861003861003861,
                "tf.ones(shape)": 0.003861003861003861,
                "tf.ones_like(input)": 0.003861003861003861,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.003861003861003861,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.003861003861003861,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.003861003861003861,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.003861003861003861,
                "tf.range(start)": 0.023166023166023165,
                "tf.range(start, limit, delta)": 0.003861003861003861,
                "tf.reduce_any(input_tensor, axis)": 0.003861003861003861,
                "tf.reduce_all(input_tensor, axis)": 0.003861003861003861,
                "tf.reduce_max(input_tensor)": 0.003861003861003861,
                "tf.reduce_max(input_tensor, axis)": 0.003861003861003861,
                "tf.reduce_mean(input_tensor)": 0.003861003861003861,
                "tf.reduce_mean(input_tensor, axis)": 0.003861003861003861,
                "tf.reduce_min(input_tensor)": 0.003861003861003861,
                "tf.reduce_min(input_tensor, axis)": 0.003861003861003861,
                "tf.reduce_prod(input_tensor, axis)": 0.003861003861003861,
                "tf.reduce_sum(input_tensor)": 0.003861003861003861,
                "tf.reduce_sum(input_tensor, axis)": 0.003861003861003861,
                "tf.repeat(input, repeats)": 0.019305019305019305,
                "tf.repeat(input, repeats, axis)": 0.011583011583011582,
                "tf.reshape(tensor, shape)": 0.007722007722007722,
                "tf.reverse(tensor, axis)": 0.003861003861003861,
                "tf.roll(input, shift, axis)": 0.003861003861003861,
                "tf.round(x)": 0.003861003861003861,
                "tf.scatter_nd(indices, updates, shape)": 0.003861003861003861,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.003861003861003861,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.003861003861003861,
                "tf.sequence_mask(lengths)": 0.003861003861003861,
                "tf.sequence_mask(lengths, maxlen)": 0.003861003861003861,
                "tf.shape(input)": 0.02702702702702703,
                "tf.sign(x)": 0.003861003861003861,
                "tf.sort(values, axis)": 0.003861003861003861,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.003861003861003861,
                "tf.sqrt(x)": 0.003861003861003861,
                "tf.square(x)": 0.003861003861003861,
                "tf.squeeze(input)": 0.003861003861003861,
                "tf.squeeze(input, axis)": 0.003861003861003861,
                "tf.stack(values, axis)": 0.015444015444015444,
                "tf.subtract(x, y)": 0.003861003861003861,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003861003861003861,
                "tf.tensordot(a, b, axes)": 0.003861003861003861,
                "tf.tile(input, multiples)": 0.019305019305019305,
                "tf.transpose(a)": 0.007722007722007722,
                "tf.transpose(a, perm)": 0.003861003861003861,
                "tf.unique_with_counts(x)": 0.003861003861003861,
                "tf.unstack(value, axis)": 0.007722007722007722,
                "tf.where(condition)": 0.003861003861003861,
                "tf.where(condition, x, y)": 0.003861003861003861,
                "tf.zeros(shape)": 0.003861003861003861,
                "tf.zeros_like(input)": 0.003861003861003861,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003861003861003861,
                "tf.sparse.add(a, b)": 0.003861003861003861,
                "tf.sparse.concat(axis, sp_inputs)": 0.003861003861003861,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003861003861003861,
                "tf.sparse.from_dense(tensor)": 0.003861003861003861,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003861003861003861,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003861003861003861,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003861003861003861,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003861003861003861,
                "tf.sparse.reset_shape(sp_input)": 0.003861003861003861,
                "tf.sparse.reshape(sp_input, shape)": 0.003861003861003861,
                "tf.sparse.retain(sp_input, to_retain)": 0.003861003861003861,
                "tf.sparse.slice(sp_input, start, size)": 0.003861003861003861,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003861003861003861,
                "tf.sparse.to_dense(sp_input)": 0.003861003861003861,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003861003861003861,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003861003861003861,
                "tf.sparse.transpose(sp_input)": 0.003861003861003861,
                "tf.sparse.transpose(sp_input, perm)": 0.003861003861003861,
                "IndexingAxis1Operation": 0.02702702702702703,
                "IndexingOperation": 0.03088803088803089,
                "PairCreationOperation": 0.02702702702702703,
                "SingletonTupleCreationOperation": 0.003861003861003861,
                "SlicingAxis0BothOperation": 0.003861003861003861,
                "SlicingAxis0LeftOperation": 0.003861003861003861,
                "SlicingAxis0RightOperation": 0.003861003861003861,
                "SlicingAxis1BothOperation": 0.003861003861003861,
                "SlicingAxis1LeftOperation": 0.003861003861003861,
                "SlicingAxis1RightOperation": 0.003861003861003861,
                "TripleCreationOperation": 0.003861003861003861,
                "PROVIDED_CONSTANT_WEIGHT": 0.003861003861003861,
                "COMMON_CONSTANT_WEIGHT": 0.07722007722007722,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003861003861003861,
                "INPUT_VARIABLE_WEIGHT": 0.09266409266409266,
                "AXIS_CONSTANT_WEIGHT": 0.05019305019305019,
                "SHAPE_CONSTANT_WEIGHT": 0.003861003861003861,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003861003861003861,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.007722007722007722,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003861003861003861,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003861003861003861,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003861003861003861
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 6,
                "tf.repeat(input, repeats, axis)": 6,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 5,
                "IndexingOperation": 5,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_01",
        "description": "reshape by separating and duplicating columns",
        "target_program": "tf.transpose(tf.cast((in1, in1), tf.float32))",
        "source": "https://stackoverflow.com/questions/40441503/tensorflow-tensor-reshape",
        "constants": "[]",
        "examples": {
            "inputs": "[[[5., 2.], [1., 3.], [0., -1.]],]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],    [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.cast(tf.stack([in1, in1], axis=2), tf.float32)",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.reshape(tf.tile(in1, [1, 2]), [3, 2, 2])\n",
            "return tf.stack([in1, in1], axis=2)\n",
            "def transform(in1):\n    return tf.stack([in1[:, 0], in1[:, 0], in1[:, 1], in1[:, 1]], axis=1)\n",
            "return tf.repeat(input=in1, repeats=2, axis=1)",
            "import tensorflow as tf\n\ndef transform(in1):\n    col1 = tf.expand_dims(in1[:, 0], axis=1)\n    col2 = tf.expand_dims(in1[:, 1], axis=1)\n    reshaped = tf.concat([col1, col1, col2, col2], axis=1)\n    return tf.reshape(reshaped, [-1, 2, 2])\n"
        ],
        "tf_operators": {
            "tf.stack": 7,
            "tf.float32": 1,
            "tf.cast": 1,
            "tf.tile": 1,
            "tf.reshape": 2,
            "tf.repeat": 1,
            "tf.expand_dims": 1,
            "tf.concat": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                3,
                2,
                2
            ],
            [
                2
            ],
            [
                0,
                0,
                1,
                1,
                1
            ],
            [
                2,
                1
            ],
            [
                0,
                1,
                1,
                1,
                1,
                -1,
                2,
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 3,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 1,
            "tf_bool": 0,
            "provided": 0,
            "common": 7,
            "shape_tuple": 0,
            "tf_float32": 1,
            "axis": 12,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0045045045045045045,
                "tf.add(x, y)": 0.0045045045045045045,
                "tf.add_n(inputs)": 0.0045045045045045045,
                "tf.argmax(input, axis)": 0.0045045045045045045,
                "tf.argmin(input, axis)": 0.0045045045045045045,
                "tf.argsort(values, axis, stable=True)": 0.0045045045045045045,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0045045045045045045,
                "tf.boolean_mask(tensor, mask)": 0.0045045045045045045,
                "tf.broadcast_to(input, shape)": 0.0045045045045045045,
                "tf.cast(x, dtype)": 0.009009009009009009,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0045045045045045045,
                "tf.concat(values, axis)": 0.009009009009009009,
                "tf.constant(value)": 0.0045045045045045045,
                "tf.constant(value, dtype)": 0.0045045045045045045,
                "tf.divide(x, y)": 0.0045045045045045045,
                "tf.equal(x, y)": 0.0045045045045045045,
                "tf.exp(x)": 0.0045045045045045045,
                "tf.expand_dims(input, axis)": 0.013513513513513514,
                "tf.eye(num_rows)": 0.0045045045045045045,
                "tf.eye(num_rows, num_columns)": 0.0045045045045045045,
                "tf.eye(num_rows, dtype)": 0.0045045045045045045,
                "tf.fill(dims, value)": 0.0045045045045045045,
                "tf.gather(params, indices)": 0.0045045045045045045,
                "tf.gather(params, indices, axis, batch_dims)": 0.0045045045045045045,
                "tf.gather_nd(params, indices)": 0.0045045045045045045,
                "tf.gather_nd(params, indices, batch_dims)": 0.0045045045045045045,
                "tf.greater(x, y)": 0.0045045045045045045,
                "tf.greater_equal(x, y)": 0.0045045045045045045,
                "tf.math.bincount(arr)": 0.0045045045045045045,
                "tf.math.ceil(x)": 0.0045045045045045045,
                "tf.math.count_nonzero(input)": 0.0045045045045045045,
                "tf.math.count_nonzero(input, axis)": 0.0045045045045045045,
                "tf.math.cumsum(x, axis)": 0.0045045045045045045,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0045045045045045045,
                "tf.math.divide_no_nan(x, y)": 0.0045045045045045045,
                "tf.math.floor(x)": 0.0045045045045045045,
                "tf.math.log(x)": 0.0045045045045045045,
                "tf.math.logical_and(x, y)": 0.0045045045045045045,
                "tf.math.logical_not(x)": 0.0045045045045045045,
                "tf.math.logical_or(x, y)": 0.0045045045045045045,
                "tf.math.logical_xor(x, y)": 0.0045045045045045045,
                "tf.math.negative(x)": 0.0045045045045045045,
                "tf.math.reciprocal(x)": 0.0045045045045045045,
                "tf.math.reciprocal_no_nan(x)": 0.0045045045045045045,
                "tf.math.segment_max(data, segment_ids)": 0.0045045045045045045,
                "tf.math.segment_mean(data, segment_ids)": 0.0045045045045045045,
                "tf.math.segment_min(data, segment_ids)": 0.0045045045045045045,
                "tf.math.segment_prod(data, segment_ids)": 0.0045045045045045045,
                "tf.math.segment_sum(data, segment_ids)": 0.0045045045045045045,
                "tf.math.squared_difference(x, y)": 0.0045045045045045045,
                "tf.math.top_k(input, k)": 0.0045045045045045045,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0045045045045045045,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0045045045045045045,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0045045045045045045,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0045045045045045045,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0045045045045045045,
                "tf.matmul(a, b)": 0.0045045045045045045,
                "tf.maximum(x, y)": 0.0045045045045045045,
                "tf.minimum(x, y)": 0.0045045045045045045,
                "tf.multiply(x, y)": 0.0045045045045045045,
                "tf.not_equal(x, y)": 0.0045045045045045045,
                "tf.one_hot(indices, depth)": 0.0045045045045045045,
                "tf.ones(shape)": 0.0045045045045045045,
                "tf.ones_like(input)": 0.0045045045045045045,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0045045045045045045,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0045045045045045045,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0045045045045045045,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0045045045045045045,
                "tf.range(start)": 0.0045045045045045045,
                "tf.range(start, limit, delta)": 0.0045045045045045045,
                "tf.reduce_any(input_tensor, axis)": 0.0045045045045045045,
                "tf.reduce_all(input_tensor, axis)": 0.0045045045045045045,
                "tf.reduce_max(input_tensor)": 0.0045045045045045045,
                "tf.reduce_max(input_tensor, axis)": 0.0045045045045045045,
                "tf.reduce_mean(input_tensor)": 0.0045045045045045045,
                "tf.reduce_mean(input_tensor, axis)": 0.0045045045045045045,
                "tf.reduce_min(input_tensor)": 0.0045045045045045045,
                "tf.reduce_min(input_tensor, axis)": 0.0045045045045045045,
                "tf.reduce_prod(input_tensor, axis)": 0.0045045045045045045,
                "tf.reduce_sum(input_tensor)": 0.0045045045045045045,
                "tf.reduce_sum(input_tensor, axis)": 0.0045045045045045045,
                "tf.repeat(input, repeats)": 0.0045045045045045045,
                "tf.repeat(input, repeats, axis)": 0.0045045045045045045,
                "tf.reshape(tensor, shape)": 0.013513513513513514,
                "tf.reverse(tensor, axis)": 0.0045045045045045045,
                "tf.roll(input, shift, axis)": 0.0045045045045045045,
                "tf.round(x)": 0.0045045045045045045,
                "tf.scatter_nd(indices, updates, shape)": 0.0045045045045045045,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0045045045045045045,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0045045045045045045,
                "tf.sequence_mask(lengths)": 0.0045045045045045045,
                "tf.sequence_mask(lengths, maxlen)": 0.0045045045045045045,
                "tf.shape(input)": 0.0045045045045045045,
                "tf.sign(x)": 0.0045045045045045045,
                "tf.sort(values, axis)": 0.0045045045045045045,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0045045045045045045,
                "tf.sqrt(x)": 0.0045045045045045045,
                "tf.square(x)": 0.0045045045045045045,
                "tf.squeeze(input)": 0.0045045045045045045,
                "tf.squeeze(input, axis)": 0.0045045045045045045,
                "tf.stack(values, axis)": 0.036036036036036036,
                "tf.subtract(x, y)": 0.0045045045045045045,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0045045045045045045,
                "tf.tensordot(a, b, axes)": 0.0045045045045045045,
                "tf.tile(input, multiples)": 0.009009009009009009,
                "tf.transpose(a)": 0.0045045045045045045,
                "tf.transpose(a, perm)": 0.0045045045045045045,
                "tf.unique_with_counts(x)": 0.0045045045045045045,
                "tf.unstack(value, axis)": 0.0045045045045045045,
                "tf.where(condition)": 0.0045045045045045045,
                "tf.where(condition, x, y)": 0.0045045045045045045,
                "tf.zeros(shape)": 0.0045045045045045045,
                "tf.zeros_like(input)": 0.0045045045045045045,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0045045045045045045,
                "tf.sparse.add(a, b)": 0.0045045045045045045,
                "tf.sparse.concat(axis, sp_inputs)": 0.0045045045045045045,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0045045045045045045,
                "tf.sparse.from_dense(tensor)": 0.0045045045045045045,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0045045045045045045,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0045045045045045045,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0045045045045045045,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0045045045045045045,
                "tf.sparse.reset_shape(sp_input)": 0.0045045045045045045,
                "tf.sparse.reshape(sp_input, shape)": 0.0045045045045045045,
                "tf.sparse.retain(sp_input, to_retain)": 0.0045045045045045045,
                "tf.sparse.slice(sp_input, start, size)": 0.0045045045045045045,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0045045045045045045,
                "tf.sparse.to_dense(sp_input)": 0.0045045045045045045,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0045045045045045045,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0045045045045045045,
                "tf.sparse.transpose(sp_input)": 0.0045045045045045045,
                "tf.sparse.transpose(sp_input, perm)": 0.0045045045045045045,
                "IndexingAxis1Operation": 0.03153153153153153,
                "IndexingOperation": 0.0045045045045045045,
                "PairCreationOperation": 0.03153153153153153,
                "SingletonTupleCreationOperation": 0.0045045045045045045,
                "SlicingAxis0BothOperation": 0.0045045045045045045,
                "SlicingAxis0LeftOperation": 0.0045045045045045045,
                "SlicingAxis0RightOperation": 0.0045045045045045045,
                "SlicingAxis1BothOperation": 0.0045045045045045045,
                "SlicingAxis1LeftOperation": 0.0045045045045045045,
                "SlicingAxis1RightOperation": 0.0045045045045045045,
                "TripleCreationOperation": 0.0045045045045045045,
                "PROVIDED_CONSTANT_WEIGHT": 0.0045045045045045045,
                "COMMON_CONSTANT_WEIGHT": 0.036036036036036036,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0045045045045045045,
                "INPUT_VARIABLE_WEIGHT": 0.0945945945945946,
                "AXIS_CONSTANT_WEIGHT": 0.05855855855855856,
                "SHAPE_CONSTANT_WEIGHT": 0.009009009009009009,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0045045045045045045,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0045045045045045045,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.009009009009009009,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0045045045045045045,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0045045045045045045
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 5,
                "IndexingOperation": 8,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_02",
        "description": "clip values that are greater than 1",
        "target_program": "tf.minimum(in1, tf.constant(1))",
        "source": "https://stackoverflow.com/questions/46408839/tensorflow-trim-values-in-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[5, 1, 0, 3, 0, -1, 2, -10, 2],]",
            "outputs": "[[1, 1, 0, 1, 0, -1, 1, -10, 1]]"
        },
        "completions": [
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-1, clip_value_max=1)\n",
            "return tf.minimum(in1, 1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-np.inf, clip_value_max=1)\n",
            "def transform(in1):\n    return tf.clip_by_value(in1, clip_value_min=-1e9, clip_value_max=1)\n",
            "return tf.clip_by_value(in1, 0, 1)\n",
            "return tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n",
            "def transform(in1):\n    clipped_values = tf.clip_by_value(in1, clip_value_min=-float('inf'), clip_value_max=1)\n    return clipped_values\n"
        ],
        "tf_operators": {
            "tf.minimum": 3,
            "tf.clip_by_value": 7
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1000000000.0,
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            -1000000000.0,
            1,
            -1,
            0
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 12,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0053475935828877,
                "tf.add(x, y)": 0.0053475935828877,
                "tf.add_n(inputs)": 0.0053475935828877,
                "tf.argmax(input, axis)": 0.0053475935828877,
                "tf.argmin(input, axis)": 0.0053475935828877,
                "tf.argsort(values, axis, stable=True)": 0.0053475935828877,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0053475935828877,
                "tf.boolean_mask(tensor, mask)": 0.0053475935828877,
                "tf.broadcast_to(input, shape)": 0.0053475935828877,
                "tf.cast(x, dtype)": 0.0053475935828877,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0427807486631016,
                "tf.concat(values, axis)": 0.0053475935828877,
                "tf.constant(value)": 0.0053475935828877,
                "tf.constant(value, dtype)": 0.0053475935828877,
                "tf.divide(x, y)": 0.0053475935828877,
                "tf.equal(x, y)": 0.0053475935828877,
                "tf.exp(x)": 0.0053475935828877,
                "tf.expand_dims(input, axis)": 0.0053475935828877,
                "tf.eye(num_rows)": 0.0053475935828877,
                "tf.eye(num_rows, num_columns)": 0.0053475935828877,
                "tf.eye(num_rows, dtype)": 0.0053475935828877,
                "tf.fill(dims, value)": 0.0053475935828877,
                "tf.gather(params, indices)": 0.0053475935828877,
                "tf.gather(params, indices, axis, batch_dims)": 0.0053475935828877,
                "tf.gather_nd(params, indices)": 0.0053475935828877,
                "tf.gather_nd(params, indices, batch_dims)": 0.0053475935828877,
                "tf.greater(x, y)": 0.0053475935828877,
                "tf.greater_equal(x, y)": 0.0053475935828877,
                "tf.math.bincount(arr)": 0.0053475935828877,
                "tf.math.ceil(x)": 0.0053475935828877,
                "tf.math.count_nonzero(input)": 0.0053475935828877,
                "tf.math.count_nonzero(input, axis)": 0.0053475935828877,
                "tf.math.cumsum(x, axis)": 0.0053475935828877,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0053475935828877,
                "tf.math.divide_no_nan(x, y)": 0.0053475935828877,
                "tf.math.floor(x)": 0.0053475935828877,
                "tf.math.log(x)": 0.0053475935828877,
                "tf.math.logical_and(x, y)": 0.0053475935828877,
                "tf.math.logical_not(x)": 0.0053475935828877,
                "tf.math.logical_or(x, y)": 0.0053475935828877,
                "tf.math.logical_xor(x, y)": 0.0053475935828877,
                "tf.math.negative(x)": 0.0053475935828877,
                "tf.math.reciprocal(x)": 0.0053475935828877,
                "tf.math.reciprocal_no_nan(x)": 0.0053475935828877,
                "tf.math.segment_max(data, segment_ids)": 0.0053475935828877,
                "tf.math.segment_mean(data, segment_ids)": 0.0053475935828877,
                "tf.math.segment_min(data, segment_ids)": 0.0053475935828877,
                "tf.math.segment_prod(data, segment_ids)": 0.0053475935828877,
                "tf.math.segment_sum(data, segment_ids)": 0.0053475935828877,
                "tf.math.squared_difference(x, y)": 0.0053475935828877,
                "tf.math.top_k(input, k)": 0.0053475935828877,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0053475935828877,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0053475935828877,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0053475935828877,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0053475935828877,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0053475935828877,
                "tf.matmul(a, b)": 0.0053475935828877,
                "tf.maximum(x, y)": 0.0053475935828877,
                "tf.minimum(x, y)": 0.0213903743315508,
                "tf.multiply(x, y)": 0.0053475935828877,
                "tf.not_equal(x, y)": 0.0053475935828877,
                "tf.one_hot(indices, depth)": 0.0053475935828877,
                "tf.ones(shape)": 0.0053475935828877,
                "tf.ones_like(input)": 0.0053475935828877,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0053475935828877,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0053475935828877,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0053475935828877,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0053475935828877,
                "tf.range(start)": 0.0053475935828877,
                "tf.range(start, limit, delta)": 0.0053475935828877,
                "tf.reduce_any(input_tensor, axis)": 0.0053475935828877,
                "tf.reduce_all(input_tensor, axis)": 0.0053475935828877,
                "tf.reduce_max(input_tensor)": 0.0053475935828877,
                "tf.reduce_max(input_tensor, axis)": 0.0053475935828877,
                "tf.reduce_mean(input_tensor)": 0.0053475935828877,
                "tf.reduce_mean(input_tensor, axis)": 0.0053475935828877,
                "tf.reduce_min(input_tensor)": 0.0053475935828877,
                "tf.reduce_min(input_tensor, axis)": 0.0053475935828877,
                "tf.reduce_prod(input_tensor, axis)": 0.0053475935828877,
                "tf.reduce_sum(input_tensor)": 0.0053475935828877,
                "tf.reduce_sum(input_tensor, axis)": 0.0053475935828877,
                "tf.repeat(input, repeats)": 0.0053475935828877,
                "tf.repeat(input, repeats, axis)": 0.0053475935828877,
                "tf.reshape(tensor, shape)": 0.0053475935828877,
                "tf.reverse(tensor, axis)": 0.0053475935828877,
                "tf.roll(input, shift, axis)": 0.0053475935828877,
                "tf.round(x)": 0.0053475935828877,
                "tf.scatter_nd(indices, updates, shape)": 0.0053475935828877,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0053475935828877,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0053475935828877,
                "tf.sequence_mask(lengths)": 0.0053475935828877,
                "tf.sequence_mask(lengths, maxlen)": 0.0053475935828877,
                "tf.shape(input)": 0.0053475935828877,
                "tf.sign(x)": 0.0053475935828877,
                "tf.sort(values, axis)": 0.0053475935828877,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0053475935828877,
                "tf.sqrt(x)": 0.0053475935828877,
                "tf.square(x)": 0.0053475935828877,
                "tf.squeeze(input)": 0.0053475935828877,
                "tf.squeeze(input, axis)": 0.0053475935828877,
                "tf.stack(values, axis)": 0.0053475935828877,
                "tf.subtract(x, y)": 0.0053475935828877,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0053475935828877,
                "tf.tensordot(a, b, axes)": 0.0053475935828877,
                "tf.tile(input, multiples)": 0.0053475935828877,
                "tf.transpose(a)": 0.0053475935828877,
                "tf.transpose(a, perm)": 0.0053475935828877,
                "tf.unique_with_counts(x)": 0.0053475935828877,
                "tf.unstack(value, axis)": 0.0053475935828877,
                "tf.where(condition)": 0.0053475935828877,
                "tf.where(condition, x, y)": 0.0053475935828877,
                "tf.zeros(shape)": 0.0053475935828877,
                "tf.zeros_like(input)": 0.0053475935828877,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0053475935828877,
                "tf.sparse.add(a, b)": 0.0053475935828877,
                "tf.sparse.concat(axis, sp_inputs)": 0.0053475935828877,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0053475935828877,
                "tf.sparse.from_dense(tensor)": 0.0053475935828877,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0053475935828877,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0053475935828877,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0053475935828877,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0053475935828877,
                "tf.sparse.reset_shape(sp_input)": 0.0053475935828877,
                "tf.sparse.reshape(sp_input, shape)": 0.0053475935828877,
                "tf.sparse.retain(sp_input, to_retain)": 0.0053475935828877,
                "tf.sparse.slice(sp_input, start, size)": 0.0053475935828877,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0053475935828877,
                "tf.sparse.to_dense(sp_input)": 0.0053475935828877,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0053475935828877,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0053475935828877,
                "tf.sparse.transpose(sp_input)": 0.0053475935828877,
                "tf.sparse.transpose(sp_input, perm)": 0.0053475935828877,
                "IndexingAxis1Operation": 0.0053475935828877,
                "IndexingOperation": 0.0053475935828877,
                "PairCreationOperation": 0.0053475935828877,
                "SingletonTupleCreationOperation": 0.0053475935828877,
                "SlicingAxis0BothOperation": 0.0053475935828877,
                "SlicingAxis0LeftOperation": 0.0053475935828877,
                "SlicingAxis0RightOperation": 0.0053475935828877,
                "SlicingAxis1BothOperation": 0.0053475935828877,
                "SlicingAxis1LeftOperation": 0.0053475935828877,
                "SlicingAxis1RightOperation": 0.0053475935828877,
                "TripleCreationOperation": 0.0053475935828877,
                "PROVIDED_CONSTANT_WEIGHT": 0.0053475935828877,
                "COMMON_CONSTANT_WEIGHT": 0.06951871657754011,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0053475935828877,
                "INPUT_VARIABLE_WEIGHT": 0.058823529411764705,
                "AXIS_CONSTANT_WEIGHT": 0.0053475935828877,
                "SHAPE_CONSTANT_WEIGHT": 0.0053475935828877,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0053475935828877,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0053475935828877,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0053475935828877,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0053475935828877,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0053475935828877
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 5,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 6,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_03",
        "description": "replace certain columns with columns from the other tensor",
        "target_program": "tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1",
        "source": "https://stackoverflow.com/questions/44657388/how-to-replace-certain-values-in-tensorflow-tensor-with-the-values-of-the-other",
        "constants": "[3, 4, 5]",
        "examples": {
            "inputs": "[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]],[[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]],]",
            "outputs": "[[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]]]"
        },
        "completions": [
            "selected_indices = tf.constant([3, 4])\nreplaced_values = tf.gather(in2, selected_indices, axis=1)\nupdated_tensor = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.reshape(replaced_values, [-1]))\nreturn tf.expand_dims(updated_tensor, axis=0)\n",
            "return tf.concat([in1[:, :3], in2[:, 3:], in1[:, -3:]], axis=1)\n",
            "return tf.concat([tf.slice(in1, [0, 0, 0], [2, 3, 3]), tf.slice(in2, [0, 0, 3], [2, 3, 4])], axis=2)\n",
            "return tf.tensor_scatter_nd_update(in1, indices=[[0, 0, 3], [0, 0, 4], [0, 0, 5]], updates=tf.gather(in2, [0, 0, 3, 4, 5], axis=1))",
            "return tf.tensor_scatter_nd_update(in1, [[slice(None), [3, 4]]], tf.gather(in2, [3, 4], axis=1))",
            "output = tf.tensor_scatter_nd_update(in1, [[0, 3], [0, 4], [1, 3], [1, 4]], tf.gather(in2, [3, 4, 3, 4], axis=1))\nreturn output\n",
            "updates = tf.concat([in2[:, :, :-4], in1[:, :, -3:]], axis=2)\nindices = tf.constant([[0], [3]])\nreturn tf.tensor_scatter_nd_update(in1, indices, updates)\n",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), tf.concat([in2[:, :3], in1[:, 3:5], in2[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1), \n                     tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)], axis=0)",
            "return tf.concat([in1[:, :3], in2[:, 3:5], in1[:, 5:]], axis=1)\n"
        ],
        "tf_operators": {
            "tf.gather": 4,
            "tf.tensor_scatter_nd_update": 5,
            "tf.expand_dims": 1,
            "tf.reshape": 1,
            "tf.constant": 2,
            "tf.concat": 6,
            "tf.slice": 1
        },
        "coverage_percentage": 0.0,
        "total_covered": 0,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3,
                4,
                1,
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                -1,
                0
            ],
            [
                3,
                3,
                -3,
                1
            ],
            [
                0,
                0,
                0,
                2,
                3,
                3,
                0,
                0,
                3,
                2,
                3,
                4,
                2
            ],
            [
                0,
                0,
                3,
                0,
                0,
                4,
                0,
                0,
                5,
                0,
                0,
                3,
                4,
                5,
                1
            ],
            [
                3,
                4,
                3,
                4,
                1
            ],
            [
                0,
                3,
                0,
                4,
                1,
                3,
                1,
                4,
                3,
                4,
                3,
                4,
                1
            ],
            [
                -4,
                -3,
                2,
                0,
                3
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1,
                3,
                3,
                5,
                5,
                1,
                0
            ],
            [
                3,
                3,
                5,
                5,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            -4,
            -3,
            -1
        ],
        "constant_counts": [
            {
                "common": 7,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 3,
                "shape": 0,
                "provided": 5,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 9,
                "axis": 0,
                "shape": 0,
                "provided": 6,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 3,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 8,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 4,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 35,
            "shape": 0,
            "tf_bool": 0,
            "provided": 55,
            "common": 36,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 4,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.002890173410404624,
                "tf.add(x, y)": 0.002890173410404624,
                "tf.add_n(inputs)": 0.002890173410404624,
                "tf.argmax(input, axis)": 0.002890173410404624,
                "tf.argmin(input, axis)": 0.002890173410404624,
                "tf.argsort(values, axis, stable=True)": 0.002890173410404624,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.002890173410404624,
                "tf.boolean_mask(tensor, mask)": 0.002890173410404624,
                "tf.broadcast_to(input, shape)": 0.002890173410404624,
                "tf.cast(x, dtype)": 0.002890173410404624,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.002890173410404624,
                "tf.concat(values, axis)": 0.031791907514450865,
                "tf.constant(value)": 0.008670520231213872,
                "tf.constant(value, dtype)": 0.002890173410404624,
                "tf.divide(x, y)": 0.002890173410404624,
                "tf.equal(x, y)": 0.002890173410404624,
                "tf.exp(x)": 0.002890173410404624,
                "tf.expand_dims(input, axis)": 0.005780346820809248,
                "tf.eye(num_rows)": 0.002890173410404624,
                "tf.eye(num_rows, num_columns)": 0.002890173410404624,
                "tf.eye(num_rows, dtype)": 0.002890173410404624,
                "tf.fill(dims, value)": 0.002890173410404624,
                "tf.gather(params, indices)": 0.002890173410404624,
                "tf.gather(params, indices, axis, batch_dims)": 0.014450867052023121,
                "tf.gather_nd(params, indices)": 0.002890173410404624,
                "tf.gather_nd(params, indices, batch_dims)": 0.002890173410404624,
                "tf.greater(x, y)": 0.002890173410404624,
                "tf.greater_equal(x, y)": 0.002890173410404624,
                "tf.math.bincount(arr)": 0.002890173410404624,
                "tf.math.ceil(x)": 0.002890173410404624,
                "tf.math.count_nonzero(input)": 0.002890173410404624,
                "tf.math.count_nonzero(input, axis)": 0.002890173410404624,
                "tf.math.cumsum(x, axis)": 0.002890173410404624,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.002890173410404624,
                "tf.math.divide_no_nan(x, y)": 0.002890173410404624,
                "tf.math.floor(x)": 0.002890173410404624,
                "tf.math.log(x)": 0.002890173410404624,
                "tf.math.logical_and(x, y)": 0.002890173410404624,
                "tf.math.logical_not(x)": 0.002890173410404624,
                "tf.math.logical_or(x, y)": 0.002890173410404624,
                "tf.math.logical_xor(x, y)": 0.002890173410404624,
                "tf.math.negative(x)": 0.002890173410404624,
                "tf.math.reciprocal(x)": 0.002890173410404624,
                "tf.math.reciprocal_no_nan(x)": 0.002890173410404624,
                "tf.math.segment_max(data, segment_ids)": 0.002890173410404624,
                "tf.math.segment_mean(data, segment_ids)": 0.002890173410404624,
                "tf.math.segment_min(data, segment_ids)": 0.002890173410404624,
                "tf.math.segment_prod(data, segment_ids)": 0.002890173410404624,
                "tf.math.segment_sum(data, segment_ids)": 0.002890173410404624,
                "tf.math.squared_difference(x, y)": 0.002890173410404624,
                "tf.math.top_k(input, k)": 0.002890173410404624,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.002890173410404624,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.002890173410404624,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.002890173410404624,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.002890173410404624,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.002890173410404624,
                "tf.matmul(a, b)": 0.002890173410404624,
                "tf.maximum(x, y)": 0.002890173410404624,
                "tf.minimum(x, y)": 0.002890173410404624,
                "tf.multiply(x, y)": 0.002890173410404624,
                "tf.not_equal(x, y)": 0.002890173410404624,
                "tf.one_hot(indices, depth)": 0.002890173410404624,
                "tf.ones(shape)": 0.002890173410404624,
                "tf.ones_like(input)": 0.002890173410404624,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.002890173410404624,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.002890173410404624,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.002890173410404624,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.002890173410404624,
                "tf.range(start)": 0.002890173410404624,
                "tf.range(start, limit, delta)": 0.002890173410404624,
                "tf.reduce_any(input_tensor, axis)": 0.002890173410404624,
                "tf.reduce_all(input_tensor, axis)": 0.002890173410404624,
                "tf.reduce_max(input_tensor)": 0.002890173410404624,
                "tf.reduce_max(input_tensor, axis)": 0.002890173410404624,
                "tf.reduce_mean(input_tensor)": 0.002890173410404624,
                "tf.reduce_mean(input_tensor, axis)": 0.002890173410404624,
                "tf.reduce_min(input_tensor)": 0.002890173410404624,
                "tf.reduce_min(input_tensor, axis)": 0.002890173410404624,
                "tf.reduce_prod(input_tensor, axis)": 0.002890173410404624,
                "tf.reduce_sum(input_tensor)": 0.002890173410404624,
                "tf.reduce_sum(input_tensor, axis)": 0.002890173410404624,
                "tf.repeat(input, repeats)": 0.002890173410404624,
                "tf.repeat(input, repeats, axis)": 0.002890173410404624,
                "tf.reshape(tensor, shape)": 0.005780346820809248,
                "tf.reverse(tensor, axis)": 0.002890173410404624,
                "tf.roll(input, shift, axis)": 0.002890173410404624,
                "tf.round(x)": 0.002890173410404624,
                "tf.scatter_nd(indices, updates, shape)": 0.002890173410404624,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.002890173410404624,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.002890173410404624,
                "tf.sequence_mask(lengths)": 0.002890173410404624,
                "tf.sequence_mask(lengths, maxlen)": 0.002890173410404624,
                "tf.shape(input)": 0.002890173410404624,
                "tf.sign(x)": 0.002890173410404624,
                "tf.sort(values, axis)": 0.002890173410404624,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.002890173410404624,
                "tf.sqrt(x)": 0.002890173410404624,
                "tf.square(x)": 0.002890173410404624,
                "tf.squeeze(input)": 0.002890173410404624,
                "tf.squeeze(input, axis)": 0.002890173410404624,
                "tf.stack(values, axis)": 0.002890173410404624,
                "tf.subtract(x, y)": 0.002890173410404624,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.017341040462427744,
                "tf.tensordot(a, b, axes)": 0.002890173410404624,
                "tf.tile(input, multiples)": 0.002890173410404624,
                "tf.transpose(a)": 0.002890173410404624,
                "tf.transpose(a, perm)": 0.002890173410404624,
                "tf.unique_with_counts(x)": 0.002890173410404624,
                "tf.unstack(value, axis)": 0.002890173410404624,
                "tf.where(condition)": 0.002890173410404624,
                "tf.where(condition, x, y)": 0.002890173410404624,
                "tf.zeros(shape)": 0.002890173410404624,
                "tf.zeros_like(input)": 0.002890173410404624,
                "tf.SparseTensor(indices, values, dense_shape)": 0.002890173410404624,
                "tf.sparse.add(a, b)": 0.002890173410404624,
                "tf.sparse.concat(axis, sp_inputs)": 0.002890173410404624,
                "tf.sparse.expand_dims(sp_input, axis)": 0.002890173410404624,
                "tf.sparse.from_dense(tensor)": 0.002890173410404624,
                "tf.sparse.maximum(sp_a, sp_b)": 0.002890173410404624,
                "tf.sparse.minimum(sp_a, sp_b)": 0.002890173410404624,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.002890173410404624,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.002890173410404624,
                "tf.sparse.reset_shape(sp_input)": 0.002890173410404624,
                "tf.sparse.reshape(sp_input, shape)": 0.002890173410404624,
                "tf.sparse.retain(sp_input, to_retain)": 0.002890173410404624,
                "tf.sparse.slice(sp_input, start, size)": 0.002890173410404624,
                "tf.sparse.split(sp_input, num_split, axis)": 0.002890173410404624,
                "tf.sparse.to_dense(sp_input)": 0.002890173410404624,
                "tf.sparse.to_dense(sp_input, default_value)": 0.002890173410404624,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.002890173410404624,
                "tf.sparse.transpose(sp_input)": 0.002890173410404624,
                "tf.sparse.transpose(sp_input, perm)": 0.002890173410404624,
                "IndexingAxis1Operation": 0.002890173410404624,
                "IndexingOperation": 0.002890173410404624,
                "PairCreationOperation": 0.05491329479768786,
                "SingletonTupleCreationOperation": 0.002890173410404624,
                "SlicingAxis0BothOperation": 0.002890173410404624,
                "SlicingAxis0LeftOperation": 0.002890173410404624,
                "SlicingAxis0RightOperation": 0.002890173410404624,
                "SlicingAxis1BothOperation": 0.017341040462427744,
                "SlicingAxis1LeftOperation": 0.023121387283236993,
                "SlicingAxis1RightOperation": 0.02023121387283237,
                "TripleCreationOperation": 0.008670520231213872,
                "PROVIDED_CONSTANT_WEIGHT": 0.16184971098265896,
                "COMMON_CONSTANT_WEIGHT": 0.1069364161849711,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.002890173410404624,
                "INPUT_VARIABLE_WEIGHT": 0.10404624277456648,
                "AXIS_CONSTANT_WEIGHT": 0.014450867052023121,
                "SHAPE_CONSTANT_WEIGHT": 0.002890173410404624,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.002890173410404624,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.002890173410404624,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.002890173410404624,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.002890173410404624,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.002890173410404624
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 5,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 6,
                "SlicingAxis1LeftOperation": 5,
                "SlicingAxis1RightOperation": 6,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 3,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_04",
        "description": "index into the tensor",
        "target_program": "tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))",
        "source": "https://stackoverflow.com/questions/33736795/tensorflow-numpy-like-tensor-indexing",
        "constants": "[]",
        "examples": {
            "inputs": "[  [[5., 2.], [1., 3.], [0., -1.]]]",
            "outputs": "[[[5., 5.], [1., 1.], [0., 0.]],  [[2., 2.], [3., 3.], [-1., -1.]]]"
        },
        "completions": [
            "return tf.tile(tf.expand_dims(in1, axis=2), [1, 1, 2])\n",
            "indices = tf.stack([tf.range(tf.shape(in1)[0]), tf.repeat(tf.range(tf.shape(in1)[1]), tf.shape(in1)[0])], axis=1)\nreturn tf.gather_nd(in1, indices)\n",
            "return tf.tile(tf.expand_dims(in1, -1), [1, 1, 2])",
            "indices = [[i, i] for i in range(in1.shape[0])]\nreturn tf.gather_nd(in1, indices)\n  ",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)",
            "return tf.stack([in1, in1], axis=2)\n",
            "return tf.repeat(tf.expand_dims(in1, axis=-1), 2, axis=-1)\n",
            "return tf.tile(tf.expand_dims(in1, 2), [1, 1, 2])\n",
            "return tf.stack([in1, in1], axis=2)",
            "return tf.stack([in1, in1], axis=2)"
        ],
        "tf_operators": {
            "tf.tile": 3,
            "tf.expand_dims": 5,
            "tf.repeat": 3,
            "tf.shape": 1,
            "tf.range": 1,
            "tf.stack": 4,
            "tf.gather_nd": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                1,
                1,
                2
            ],
            [
                0,
                1,
                0,
                1
            ],
            [
                -1,
                1,
                1,
                2
            ],
            [
                0
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2
            ],
            [
                -1,
                2,
                -1
            ],
            [
                2,
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 16,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 10,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0044444444444444444,
                "tf.add(x, y)": 0.0044444444444444444,
                "tf.add_n(inputs)": 0.0044444444444444444,
                "tf.argmax(input, axis)": 0.0044444444444444444,
                "tf.argmin(input, axis)": 0.0044444444444444444,
                "tf.argsort(values, axis, stable=True)": 0.0044444444444444444,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0044444444444444444,
                "tf.boolean_mask(tensor, mask)": 0.0044444444444444444,
                "tf.broadcast_to(input, shape)": 0.0044444444444444444,
                "tf.cast(x, dtype)": 0.0044444444444444444,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0044444444444444444,
                "tf.concat(values, axis)": 0.0044444444444444444,
                "tf.constant(value)": 0.0044444444444444444,
                "tf.constant(value, dtype)": 0.0044444444444444444,
                "tf.divide(x, y)": 0.0044444444444444444,
                "tf.equal(x, y)": 0.0044444444444444444,
                "tf.exp(x)": 0.0044444444444444444,
                "tf.expand_dims(input, axis)": 0.02666666666666667,
                "tf.eye(num_rows)": 0.0044444444444444444,
                "tf.eye(num_rows, num_columns)": 0.0044444444444444444,
                "tf.eye(num_rows, dtype)": 0.0044444444444444444,
                "tf.fill(dims, value)": 0.0044444444444444444,
                "tf.gather(params, indices)": 0.0044444444444444444,
                "tf.gather(params, indices, axis, batch_dims)": 0.0044444444444444444,
                "tf.gather_nd(params, indices)": 0.013333333333333334,
                "tf.gather_nd(params, indices, batch_dims)": 0.0044444444444444444,
                "tf.greater(x, y)": 0.0044444444444444444,
                "tf.greater_equal(x, y)": 0.0044444444444444444,
                "tf.math.bincount(arr)": 0.0044444444444444444,
                "tf.math.ceil(x)": 0.0044444444444444444,
                "tf.math.count_nonzero(input)": 0.0044444444444444444,
                "tf.math.count_nonzero(input, axis)": 0.0044444444444444444,
                "tf.math.cumsum(x, axis)": 0.0044444444444444444,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0044444444444444444,
                "tf.math.divide_no_nan(x, y)": 0.0044444444444444444,
                "tf.math.floor(x)": 0.0044444444444444444,
                "tf.math.log(x)": 0.0044444444444444444,
                "tf.math.logical_and(x, y)": 0.0044444444444444444,
                "tf.math.logical_not(x)": 0.0044444444444444444,
                "tf.math.logical_or(x, y)": 0.0044444444444444444,
                "tf.math.logical_xor(x, y)": 0.0044444444444444444,
                "tf.math.negative(x)": 0.0044444444444444444,
                "tf.math.reciprocal(x)": 0.0044444444444444444,
                "tf.math.reciprocal_no_nan(x)": 0.0044444444444444444,
                "tf.math.segment_max(data, segment_ids)": 0.0044444444444444444,
                "tf.math.segment_mean(data, segment_ids)": 0.0044444444444444444,
                "tf.math.segment_min(data, segment_ids)": 0.0044444444444444444,
                "tf.math.segment_prod(data, segment_ids)": 0.0044444444444444444,
                "tf.math.segment_sum(data, segment_ids)": 0.0044444444444444444,
                "tf.math.squared_difference(x, y)": 0.0044444444444444444,
                "tf.math.top_k(input, k)": 0.0044444444444444444,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0044444444444444444,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0044444444444444444,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0044444444444444444,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0044444444444444444,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0044444444444444444,
                "tf.matmul(a, b)": 0.0044444444444444444,
                "tf.maximum(x, y)": 0.0044444444444444444,
                "tf.minimum(x, y)": 0.0044444444444444444,
                "tf.multiply(x, y)": 0.0044444444444444444,
                "tf.not_equal(x, y)": 0.0044444444444444444,
                "tf.one_hot(indices, depth)": 0.0044444444444444444,
                "tf.ones(shape)": 0.0044444444444444444,
                "tf.ones_like(input)": 0.0044444444444444444,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0044444444444444444,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0044444444444444444,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0044444444444444444,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0044444444444444444,
                "tf.range(start)": 0.013333333333333334,
                "tf.range(start, limit, delta)": 0.0044444444444444444,
                "tf.reduce_any(input_tensor, axis)": 0.0044444444444444444,
                "tf.reduce_all(input_tensor, axis)": 0.0044444444444444444,
                "tf.reduce_max(input_tensor)": 0.0044444444444444444,
                "tf.reduce_max(input_tensor, axis)": 0.0044444444444444444,
                "tf.reduce_mean(input_tensor)": 0.0044444444444444444,
                "tf.reduce_mean(input_tensor, axis)": 0.0044444444444444444,
                "tf.reduce_min(input_tensor)": 0.0044444444444444444,
                "tf.reduce_min(input_tensor, axis)": 0.0044444444444444444,
                "tf.reduce_prod(input_tensor, axis)": 0.0044444444444444444,
                "tf.reduce_sum(input_tensor)": 0.0044444444444444444,
                "tf.reduce_sum(input_tensor, axis)": 0.0044444444444444444,
                "tf.repeat(input, repeats)": 0.008888888888888889,
                "tf.repeat(input, repeats, axis)": 0.0044444444444444444,
                "tf.reshape(tensor, shape)": 0.0044444444444444444,
                "tf.reverse(tensor, axis)": 0.0044444444444444444,
                "tf.roll(input, shift, axis)": 0.0044444444444444444,
                "tf.round(x)": 0.0044444444444444444,
                "tf.scatter_nd(indices, updates, shape)": 0.0044444444444444444,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0044444444444444444,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0044444444444444444,
                "tf.sequence_mask(lengths)": 0.0044444444444444444,
                "tf.sequence_mask(lengths, maxlen)": 0.0044444444444444444,
                "tf.shape(input)": 0.017777777777777778,
                "tf.sign(x)": 0.0044444444444444444,
                "tf.sort(values, axis)": 0.0044444444444444444,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0044444444444444444,
                "tf.sqrt(x)": 0.0044444444444444444,
                "tf.square(x)": 0.0044444444444444444,
                "tf.squeeze(input)": 0.0044444444444444444,
                "tf.squeeze(input, axis)": 0.0044444444444444444,
                "tf.stack(values, axis)": 0.022222222222222223,
                "tf.subtract(x, y)": 0.0044444444444444444,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0044444444444444444,
                "tf.tensordot(a, b, axes)": 0.0044444444444444444,
                "tf.tile(input, multiples)": 0.017777777777777778,
                "tf.transpose(a)": 0.0044444444444444444,
                "tf.transpose(a, perm)": 0.0044444444444444444,
                "tf.unique_with_counts(x)": 0.0044444444444444444,
                "tf.unstack(value, axis)": 0.0044444444444444444,
                "tf.where(condition)": 0.0044444444444444444,
                "tf.where(condition, x, y)": 0.0044444444444444444,
                "tf.zeros(shape)": 0.0044444444444444444,
                "tf.zeros_like(input)": 0.0044444444444444444,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0044444444444444444,
                "tf.sparse.add(a, b)": 0.0044444444444444444,
                "tf.sparse.concat(axis, sp_inputs)": 0.0044444444444444444,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0044444444444444444,
                "tf.sparse.from_dense(tensor)": 0.0044444444444444444,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0044444444444444444,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0044444444444444444,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0044444444444444444,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0044444444444444444,
                "tf.sparse.reset_shape(sp_input)": 0.0044444444444444444,
                "tf.sparse.reshape(sp_input, shape)": 0.0044444444444444444,
                "tf.sparse.retain(sp_input, to_retain)": 0.0044444444444444444,
                "tf.sparse.slice(sp_input, start, size)": 0.0044444444444444444,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0044444444444444444,
                "tf.sparse.to_dense(sp_input)": 0.0044444444444444444,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0044444444444444444,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0044444444444444444,
                "tf.sparse.transpose(sp_input)": 0.0044444444444444444,
                "tf.sparse.transpose(sp_input, perm)": 0.0044444444444444444,
                "IndexingAxis1Operation": 0.0044444444444444444,
                "IndexingOperation": 0.022222222222222223,
                "PairCreationOperation": 0.0044444444444444444,
                "SingletonTupleCreationOperation": 0.0044444444444444444,
                "SlicingAxis0BothOperation": 0.0044444444444444444,
                "SlicingAxis0LeftOperation": 0.0044444444444444444,
                "SlicingAxis0RightOperation": 0.0044444444444444444,
                "SlicingAxis1BothOperation": 0.0044444444444444444,
                "SlicingAxis1LeftOperation": 0.0044444444444444444,
                "SlicingAxis1RightOperation": 0.0044444444444444444,
                "TripleCreationOperation": 0.0044444444444444444,
                "PROVIDED_CONSTANT_WEIGHT": 0.0044444444444444444,
                "COMMON_CONSTANT_WEIGHT": 0.07555555555555556,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0044444444444444444,
                "INPUT_VARIABLE_WEIGHT": 0.09333333333333334,
                "AXIS_CONSTANT_WEIGHT": 0.04888888888888889,
                "SHAPE_CONSTANT_WEIGHT": 0.0044444444444444444,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0044444444444444444,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0044444444444444444,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0044444444444444444,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0044444444444444444,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0044444444444444444
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 5,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 6,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_05",
        "description": "tensor multiplication like np.tensordot",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/43067338/tensor-multiplication-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[4, 3, 1], [6, 5, 2]],[[[5, 5]], [[1, 5]], [[6, 0]]],]",
            "outputs": "[[[29, 35]], [[47, 55]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=[[1], [0]])",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=1)\n"
        ],
        "tf_operators": {
            "tf.tensordot": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 12,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005076142131979695,
                "tf.add(x, y)": 0.005076142131979695,
                "tf.add_n(inputs)": 0.005076142131979695,
                "tf.argmax(input, axis)": 0.005076142131979695,
                "tf.argmin(input, axis)": 0.005076142131979695,
                "tf.argsort(values, axis, stable=True)": 0.005076142131979695,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005076142131979695,
                "tf.boolean_mask(tensor, mask)": 0.005076142131979695,
                "tf.broadcast_to(input, shape)": 0.005076142131979695,
                "tf.cast(x, dtype)": 0.005076142131979695,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005076142131979695,
                "tf.concat(values, axis)": 0.005076142131979695,
                "tf.constant(value)": 0.005076142131979695,
                "tf.constant(value, dtype)": 0.005076142131979695,
                "tf.divide(x, y)": 0.005076142131979695,
                "tf.equal(x, y)": 0.005076142131979695,
                "tf.exp(x)": 0.005076142131979695,
                "tf.expand_dims(input, axis)": 0.005076142131979695,
                "tf.eye(num_rows)": 0.005076142131979695,
                "tf.eye(num_rows, num_columns)": 0.005076142131979695,
                "tf.eye(num_rows, dtype)": 0.005076142131979695,
                "tf.fill(dims, value)": 0.005076142131979695,
                "tf.gather(params, indices)": 0.005076142131979695,
                "tf.gather(params, indices, axis, batch_dims)": 0.005076142131979695,
                "tf.gather_nd(params, indices)": 0.005076142131979695,
                "tf.gather_nd(params, indices, batch_dims)": 0.005076142131979695,
                "tf.greater(x, y)": 0.005076142131979695,
                "tf.greater_equal(x, y)": 0.005076142131979695,
                "tf.math.bincount(arr)": 0.005076142131979695,
                "tf.math.ceil(x)": 0.005076142131979695,
                "tf.math.count_nonzero(input)": 0.005076142131979695,
                "tf.math.count_nonzero(input, axis)": 0.005076142131979695,
                "tf.math.cumsum(x, axis)": 0.005076142131979695,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005076142131979695,
                "tf.math.divide_no_nan(x, y)": 0.005076142131979695,
                "tf.math.floor(x)": 0.005076142131979695,
                "tf.math.log(x)": 0.005076142131979695,
                "tf.math.logical_and(x, y)": 0.005076142131979695,
                "tf.math.logical_not(x)": 0.005076142131979695,
                "tf.math.logical_or(x, y)": 0.005076142131979695,
                "tf.math.logical_xor(x, y)": 0.005076142131979695,
                "tf.math.negative(x)": 0.005076142131979695,
                "tf.math.reciprocal(x)": 0.005076142131979695,
                "tf.math.reciprocal_no_nan(x)": 0.005076142131979695,
                "tf.math.segment_max(data, segment_ids)": 0.005076142131979695,
                "tf.math.segment_mean(data, segment_ids)": 0.005076142131979695,
                "tf.math.segment_min(data, segment_ids)": 0.005076142131979695,
                "tf.math.segment_prod(data, segment_ids)": 0.005076142131979695,
                "tf.math.segment_sum(data, segment_ids)": 0.005076142131979695,
                "tf.math.squared_difference(x, y)": 0.005076142131979695,
                "tf.math.top_k(input, k)": 0.005076142131979695,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005076142131979695,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005076142131979695,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005076142131979695,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005076142131979695,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005076142131979695,
                "tf.matmul(a, b)": 0.005076142131979695,
                "tf.maximum(x, y)": 0.005076142131979695,
                "tf.minimum(x, y)": 0.005076142131979695,
                "tf.multiply(x, y)": 0.005076142131979695,
                "tf.not_equal(x, y)": 0.005076142131979695,
                "tf.one_hot(indices, depth)": 0.005076142131979695,
                "tf.ones(shape)": 0.005076142131979695,
                "tf.ones_like(input)": 0.005076142131979695,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005076142131979695,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005076142131979695,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005076142131979695,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005076142131979695,
                "tf.range(start)": 0.005076142131979695,
                "tf.range(start, limit, delta)": 0.005076142131979695,
                "tf.reduce_any(input_tensor, axis)": 0.005076142131979695,
                "tf.reduce_all(input_tensor, axis)": 0.005076142131979695,
                "tf.reduce_max(input_tensor)": 0.005076142131979695,
                "tf.reduce_max(input_tensor, axis)": 0.005076142131979695,
                "tf.reduce_mean(input_tensor)": 0.005076142131979695,
                "tf.reduce_mean(input_tensor, axis)": 0.005076142131979695,
                "tf.reduce_min(input_tensor)": 0.005076142131979695,
                "tf.reduce_min(input_tensor, axis)": 0.005076142131979695,
                "tf.reduce_prod(input_tensor, axis)": 0.005076142131979695,
                "tf.reduce_sum(input_tensor)": 0.005076142131979695,
                "tf.reduce_sum(input_tensor, axis)": 0.005076142131979695,
                "tf.repeat(input, repeats)": 0.005076142131979695,
                "tf.repeat(input, repeats, axis)": 0.005076142131979695,
                "tf.reshape(tensor, shape)": 0.005076142131979695,
                "tf.reverse(tensor, axis)": 0.005076142131979695,
                "tf.roll(input, shift, axis)": 0.005076142131979695,
                "tf.round(x)": 0.005076142131979695,
                "tf.scatter_nd(indices, updates, shape)": 0.005076142131979695,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005076142131979695,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005076142131979695,
                "tf.sequence_mask(lengths)": 0.005076142131979695,
                "tf.sequence_mask(lengths, maxlen)": 0.005076142131979695,
                "tf.shape(input)": 0.005076142131979695,
                "tf.sign(x)": 0.005076142131979695,
                "tf.sort(values, axis)": 0.005076142131979695,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005076142131979695,
                "tf.sqrt(x)": 0.005076142131979695,
                "tf.square(x)": 0.005076142131979695,
                "tf.squeeze(input)": 0.005076142131979695,
                "tf.squeeze(input, axis)": 0.005076142131979695,
                "tf.stack(values, axis)": 0.005076142131979695,
                "tf.subtract(x, y)": 0.005076142131979695,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005076142131979695,
                "tf.tensordot(a, b, axes)": 0.05583756345177665,
                "tf.tile(input, multiples)": 0.005076142131979695,
                "tf.transpose(a)": 0.005076142131979695,
                "tf.transpose(a, perm)": 0.005076142131979695,
                "tf.unique_with_counts(x)": 0.005076142131979695,
                "tf.unstack(value, axis)": 0.005076142131979695,
                "tf.where(condition)": 0.005076142131979695,
                "tf.where(condition, x, y)": 0.005076142131979695,
                "tf.zeros(shape)": 0.005076142131979695,
                "tf.zeros_like(input)": 0.005076142131979695,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005076142131979695,
                "tf.sparse.add(a, b)": 0.005076142131979695,
                "tf.sparse.concat(axis, sp_inputs)": 0.005076142131979695,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005076142131979695,
                "tf.sparse.from_dense(tensor)": 0.005076142131979695,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005076142131979695,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005076142131979695,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005076142131979695,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005076142131979695,
                "tf.sparse.reset_shape(sp_input)": 0.005076142131979695,
                "tf.sparse.reshape(sp_input, shape)": 0.005076142131979695,
                "tf.sparse.retain(sp_input, to_retain)": 0.005076142131979695,
                "tf.sparse.slice(sp_input, start, size)": 0.005076142131979695,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005076142131979695,
                "tf.sparse.to_dense(sp_input)": 0.005076142131979695,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005076142131979695,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005076142131979695,
                "tf.sparse.transpose(sp_input)": 0.005076142131979695,
                "tf.sparse.transpose(sp_input, perm)": 0.005076142131979695,
                "IndexingAxis1Operation": 0.005076142131979695,
                "IndexingOperation": 0.005076142131979695,
                "PairCreationOperation": 0.005076142131979695,
                "SingletonTupleCreationOperation": 0.005076142131979695,
                "SlicingAxis0BothOperation": 0.005076142131979695,
                "SlicingAxis0LeftOperation": 0.005076142131979695,
                "SlicingAxis0RightOperation": 0.005076142131979695,
                "SlicingAxis1BothOperation": 0.005076142131979695,
                "SlicingAxis1LeftOperation": 0.005076142131979695,
                "SlicingAxis1RightOperation": 0.005076142131979695,
                "TripleCreationOperation": 0.005076142131979695,
                "PROVIDED_CONSTANT_WEIGHT": 0.005076142131979695,
                "COMMON_CONSTANT_WEIGHT": 0.06598984771573604,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005076142131979695,
                "INPUT_VARIABLE_WEIGHT": 0.1065989847715736,
                "AXIS_CONSTANT_WEIGHT": 0.005076142131979695,
                "SHAPE_CONSTANT_WEIGHT": 0.005076142131979695,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005076142131979695,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005076142131979695,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005076142131979695,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005076142131979695,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005076142131979695
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_06",
        "description": "binary tensor from vector indicating if elements are equal",
        "target_program": "tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)",
        "source": "https://stackoverflow.com/questions/47816231/create-binary-tensor-from-vector-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 5, 0, 2, 3, 3, 0],]",
            "outputs": "[[1., 0., 0., 0., 1., 1., 0.],    [0., 1., 0., 0., 0., 0., 0.],    [0., 0., 1., 0., 0., 0., 1.],    [0., 0., 0., 1., 0., 0., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [1., 0., 0., 0., 1., 1., 0.],    [0., 0., 1., 0., 0., 0., 1.]]"
        },
        "completions": [
            "return tf.equal(tf.expand_dims(in1, 1), in1)\n",
            "return tf.math.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "equal_matrix = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(equal_matrix, dtype=tf.float32)\n",
            "output = tf.equal(tf.expand_dims(in1, 1), in1)\nreturn tf.cast(output, tf.float32)\n",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n",
            "return tf.equal(tf.expand_dims(in1, 1), in1)",
            "return tf.equal(tf.expand_dims(in1, 1), tf.expand_dims(in1, 0))\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 10,
            "tf.equal": 9,
            "tf.math.equal": 1,
            "tf.float32": 2,
            "tf.cast": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1,
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 16,
            "shape_tuple": 0,
            "tf_float32": 2,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004545454545454545,
                "tf.add(x, y)": 0.004545454545454545,
                "tf.add_n(inputs)": 0.004545454545454545,
                "tf.argmax(input, axis)": 0.004545454545454545,
                "tf.argmin(input, axis)": 0.004545454545454545,
                "tf.argsort(values, axis, stable=True)": 0.004545454545454545,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004545454545454545,
                "tf.boolean_mask(tensor, mask)": 0.004545454545454545,
                "tf.broadcast_to(input, shape)": 0.004545454545454545,
                "tf.cast(x, dtype)": 0.013636363636363636,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004545454545454545,
                "tf.concat(values, axis)": 0.004545454545454545,
                "tf.constant(value)": 0.004545454545454545,
                "tf.constant(value, dtype)": 0.004545454545454545,
                "tf.divide(x, y)": 0.004545454545454545,
                "tf.equal(x, y)": 0.045454545454545456,
                "tf.exp(x)": 0.004545454545454545,
                "tf.expand_dims(input, axis)": 0.07727272727272727,
                "tf.eye(num_rows)": 0.004545454545454545,
                "tf.eye(num_rows, num_columns)": 0.004545454545454545,
                "tf.eye(num_rows, dtype)": 0.004545454545454545,
                "tf.fill(dims, value)": 0.004545454545454545,
                "tf.gather(params, indices)": 0.004545454545454545,
                "tf.gather(params, indices, axis, batch_dims)": 0.004545454545454545,
                "tf.gather_nd(params, indices)": 0.004545454545454545,
                "tf.gather_nd(params, indices, batch_dims)": 0.004545454545454545,
                "tf.greater(x, y)": 0.004545454545454545,
                "tf.greater_equal(x, y)": 0.004545454545454545,
                "tf.math.bincount(arr)": 0.004545454545454545,
                "tf.math.ceil(x)": 0.004545454545454545,
                "tf.math.count_nonzero(input)": 0.004545454545454545,
                "tf.math.count_nonzero(input, axis)": 0.004545454545454545,
                "tf.math.cumsum(x, axis)": 0.004545454545454545,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004545454545454545,
                "tf.math.divide_no_nan(x, y)": 0.004545454545454545,
                "tf.math.floor(x)": 0.004545454545454545,
                "tf.math.log(x)": 0.004545454545454545,
                "tf.math.logical_and(x, y)": 0.004545454545454545,
                "tf.math.logical_not(x)": 0.004545454545454545,
                "tf.math.logical_or(x, y)": 0.004545454545454545,
                "tf.math.logical_xor(x, y)": 0.004545454545454545,
                "tf.math.negative(x)": 0.004545454545454545,
                "tf.math.reciprocal(x)": 0.004545454545454545,
                "tf.math.reciprocal_no_nan(x)": 0.004545454545454545,
                "tf.math.segment_max(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_mean(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_min(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_prod(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_sum(data, segment_ids)": 0.004545454545454545,
                "tf.math.squared_difference(x, y)": 0.004545454545454545,
                "tf.math.top_k(input, k)": 0.004545454545454545,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.matmul(a, b)": 0.004545454545454545,
                "tf.maximum(x, y)": 0.004545454545454545,
                "tf.minimum(x, y)": 0.004545454545454545,
                "tf.multiply(x, y)": 0.004545454545454545,
                "tf.not_equal(x, y)": 0.004545454545454545,
                "tf.one_hot(indices, depth)": 0.004545454545454545,
                "tf.ones(shape)": 0.004545454545454545,
                "tf.ones_like(input)": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004545454545454545,
                "tf.range(start)": 0.004545454545454545,
                "tf.range(start, limit, delta)": 0.004545454545454545,
                "tf.reduce_any(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_all(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_max(input_tensor)": 0.004545454545454545,
                "tf.reduce_max(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_mean(input_tensor)": 0.004545454545454545,
                "tf.reduce_mean(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_min(input_tensor)": 0.004545454545454545,
                "tf.reduce_min(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_prod(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_sum(input_tensor)": 0.004545454545454545,
                "tf.reduce_sum(input_tensor, axis)": 0.004545454545454545,
                "tf.repeat(input, repeats)": 0.004545454545454545,
                "tf.repeat(input, repeats, axis)": 0.004545454545454545,
                "tf.reshape(tensor, shape)": 0.004545454545454545,
                "tf.reverse(tensor, axis)": 0.004545454545454545,
                "tf.roll(input, shift, axis)": 0.004545454545454545,
                "tf.round(x)": 0.004545454545454545,
                "tf.scatter_nd(indices, updates, shape)": 0.004545454545454545,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004545454545454545,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004545454545454545,
                "tf.sequence_mask(lengths)": 0.004545454545454545,
                "tf.sequence_mask(lengths, maxlen)": 0.004545454545454545,
                "tf.shape(input)": 0.004545454545454545,
                "tf.sign(x)": 0.004545454545454545,
                "tf.sort(values, axis)": 0.004545454545454545,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004545454545454545,
                "tf.sqrt(x)": 0.004545454545454545,
                "tf.square(x)": 0.004545454545454545,
                "tf.squeeze(input)": 0.004545454545454545,
                "tf.squeeze(input, axis)": 0.004545454545454545,
                "tf.stack(values, axis)": 0.004545454545454545,
                "tf.subtract(x, y)": 0.004545454545454545,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004545454545454545,
                "tf.tensordot(a, b, axes)": 0.004545454545454545,
                "tf.tile(input, multiples)": 0.004545454545454545,
                "tf.transpose(a)": 0.004545454545454545,
                "tf.transpose(a, perm)": 0.004545454545454545,
                "tf.unique_with_counts(x)": 0.004545454545454545,
                "tf.unstack(value, axis)": 0.004545454545454545,
                "tf.where(condition)": 0.004545454545454545,
                "tf.where(condition, x, y)": 0.004545454545454545,
                "tf.zeros(shape)": 0.004545454545454545,
                "tf.zeros_like(input)": 0.004545454545454545,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004545454545454545,
                "tf.sparse.add(a, b)": 0.004545454545454545,
                "tf.sparse.concat(axis, sp_inputs)": 0.004545454545454545,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004545454545454545,
                "tf.sparse.from_dense(tensor)": 0.004545454545454545,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004545454545454545,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004545454545454545,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004545454545454545,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004545454545454545,
                "tf.sparse.reset_shape(sp_input)": 0.004545454545454545,
                "tf.sparse.reshape(sp_input, shape)": 0.004545454545454545,
                "tf.sparse.retain(sp_input, to_retain)": 0.004545454545454545,
                "tf.sparse.slice(sp_input, start, size)": 0.004545454545454545,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004545454545454545,
                "tf.sparse.to_dense(sp_input)": 0.004545454545454545,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004545454545454545,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004545454545454545,
                "tf.sparse.transpose(sp_input)": 0.004545454545454545,
                "tf.sparse.transpose(sp_input, perm)": 0.004545454545454545,
                "IndexingAxis1Operation": 0.004545454545454545,
                "IndexingOperation": 0.004545454545454545,
                "PairCreationOperation": 0.004545454545454545,
                "SingletonTupleCreationOperation": 0.004545454545454545,
                "SlicingAxis0BothOperation": 0.004545454545454545,
                "SlicingAxis0LeftOperation": 0.004545454545454545,
                "SlicingAxis0RightOperation": 0.004545454545454545,
                "SlicingAxis1BothOperation": 0.004545454545454545,
                "SlicingAxis1LeftOperation": 0.004545454545454545,
                "SlicingAxis1RightOperation": 0.004545454545454545,
                "TripleCreationOperation": 0.004545454545454545,
                "PROVIDED_CONSTANT_WEIGHT": 0.004545454545454545,
                "COMMON_CONSTANT_WEIGHT": 0.07727272727272727,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004545454545454545,
                "INPUT_VARIABLE_WEIGHT": 0.09545454545454546,
                "AXIS_CONSTANT_WEIGHT": 0.004545454545454545,
                "SHAPE_CONSTANT_WEIGHT": 0.004545454545454545,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004545454545454545,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004545454545454545,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.013636363636363636,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004545454545454545,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004545454545454545
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_08",
        "description": "(\\'select the values in the second tensor where the first tensor is greater than 1\\')",
        "target_program": "tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))",
        "source": "https://stackoverflow.com/questions/33769041/tensorflow-indexing-with-boolean-tensor",
        "constants": "[1]",
        "examples": {
            "inputs": "[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10],[12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32],]",
            "outputs": "[6, 8, 9, 4, 32]"
        },
        "completions": [
            "return tf.boolean_mask(in2, tf.greater(tf.cast(in1, tf.int32), 1))\n  ",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, in1 > 1)",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.gather(in2, tf.where(tf.greater(in1, 1)))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))\n",
            "return tf.boolean_mask(in2, tf.greater(in1, 1))"
        ],
        "tf_operators": {
            "tf.boolean_mask": 8,
            "tf.greater": 9,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.where": 2,
            "tf.gather": 2
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004807692307692308,
                "tf.add(x, y)": 0.004807692307692308,
                "tf.add_n(inputs)": 0.004807692307692308,
                "tf.argmax(input, axis)": 0.004807692307692308,
                "tf.argmin(input, axis)": 0.004807692307692308,
                "tf.argsort(values, axis, stable=True)": 0.004807692307692308,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004807692307692308,
                "tf.boolean_mask(tensor, mask)": 0.04326923076923077,
                "tf.broadcast_to(input, shape)": 0.004807692307692308,
                "tf.cast(x, dtype)": 0.009615384615384616,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004807692307692308,
                "tf.concat(values, axis)": 0.004807692307692308,
                "tf.constant(value)": 0.004807692307692308,
                "tf.constant(value, dtype)": 0.004807692307692308,
                "tf.divide(x, y)": 0.004807692307692308,
                "tf.equal(x, y)": 0.004807692307692308,
                "tf.exp(x)": 0.004807692307692308,
                "tf.expand_dims(input, axis)": 0.004807692307692308,
                "tf.eye(num_rows)": 0.004807692307692308,
                "tf.eye(num_rows, num_columns)": 0.004807692307692308,
                "tf.eye(num_rows, dtype)": 0.004807692307692308,
                "tf.fill(dims, value)": 0.004807692307692308,
                "tf.gather(params, indices)": 0.014423076923076924,
                "tf.gather(params, indices, axis, batch_dims)": 0.004807692307692308,
                "tf.gather_nd(params, indices)": 0.004807692307692308,
                "tf.gather_nd(params, indices, batch_dims)": 0.004807692307692308,
                "tf.greater(x, y)": 0.04807692307692308,
                "tf.greater_equal(x, y)": 0.004807692307692308,
                "tf.math.bincount(arr)": 0.004807692307692308,
                "tf.math.ceil(x)": 0.004807692307692308,
                "tf.math.count_nonzero(input)": 0.004807692307692308,
                "tf.math.count_nonzero(input, axis)": 0.004807692307692308,
                "tf.math.cumsum(x, axis)": 0.004807692307692308,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004807692307692308,
                "tf.math.divide_no_nan(x, y)": 0.004807692307692308,
                "tf.math.floor(x)": 0.004807692307692308,
                "tf.math.log(x)": 0.004807692307692308,
                "tf.math.logical_and(x, y)": 0.004807692307692308,
                "tf.math.logical_not(x)": 0.004807692307692308,
                "tf.math.logical_or(x, y)": 0.004807692307692308,
                "tf.math.logical_xor(x, y)": 0.004807692307692308,
                "tf.math.negative(x)": 0.004807692307692308,
                "tf.math.reciprocal(x)": 0.004807692307692308,
                "tf.math.reciprocal_no_nan(x)": 0.004807692307692308,
                "tf.math.segment_max(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_mean(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_min(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_prod(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_sum(data, segment_ids)": 0.004807692307692308,
                "tf.math.squared_difference(x, y)": 0.004807692307692308,
                "tf.math.top_k(input, k)": 0.004807692307692308,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.matmul(a, b)": 0.004807692307692308,
                "tf.maximum(x, y)": 0.004807692307692308,
                "tf.minimum(x, y)": 0.004807692307692308,
                "tf.multiply(x, y)": 0.004807692307692308,
                "tf.not_equal(x, y)": 0.004807692307692308,
                "tf.one_hot(indices, depth)": 0.004807692307692308,
                "tf.ones(shape)": 0.004807692307692308,
                "tf.ones_like(input)": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004807692307692308,
                "tf.range(start)": 0.004807692307692308,
                "tf.range(start, limit, delta)": 0.004807692307692308,
                "tf.reduce_any(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_all(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_max(input_tensor)": 0.004807692307692308,
                "tf.reduce_max(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_mean(input_tensor)": 0.004807692307692308,
                "tf.reduce_mean(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_min(input_tensor)": 0.004807692307692308,
                "tf.reduce_min(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_prod(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_sum(input_tensor)": 0.004807692307692308,
                "tf.reduce_sum(input_tensor, axis)": 0.004807692307692308,
                "tf.repeat(input, repeats)": 0.004807692307692308,
                "tf.repeat(input, repeats, axis)": 0.004807692307692308,
                "tf.reshape(tensor, shape)": 0.004807692307692308,
                "tf.reverse(tensor, axis)": 0.004807692307692308,
                "tf.roll(input, shift, axis)": 0.004807692307692308,
                "tf.round(x)": 0.004807692307692308,
                "tf.scatter_nd(indices, updates, shape)": 0.004807692307692308,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004807692307692308,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004807692307692308,
                "tf.sequence_mask(lengths)": 0.004807692307692308,
                "tf.sequence_mask(lengths, maxlen)": 0.004807692307692308,
                "tf.shape(input)": 0.004807692307692308,
                "tf.sign(x)": 0.004807692307692308,
                "tf.sort(values, axis)": 0.004807692307692308,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004807692307692308,
                "tf.sqrt(x)": 0.004807692307692308,
                "tf.square(x)": 0.004807692307692308,
                "tf.squeeze(input)": 0.004807692307692308,
                "tf.squeeze(input, axis)": 0.004807692307692308,
                "tf.stack(values, axis)": 0.004807692307692308,
                "tf.subtract(x, y)": 0.004807692307692308,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004807692307692308,
                "tf.tensordot(a, b, axes)": 0.004807692307692308,
                "tf.tile(input, multiples)": 0.004807692307692308,
                "tf.transpose(a)": 0.004807692307692308,
                "tf.transpose(a, perm)": 0.004807692307692308,
                "tf.unique_with_counts(x)": 0.004807692307692308,
                "tf.unstack(value, axis)": 0.004807692307692308,
                "tf.where(condition)": 0.014423076923076924,
                "tf.where(condition, x, y)": 0.004807692307692308,
                "tf.zeros(shape)": 0.004807692307692308,
                "tf.zeros_like(input)": 0.004807692307692308,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004807692307692308,
                "tf.sparse.add(a, b)": 0.004807692307692308,
                "tf.sparse.concat(axis, sp_inputs)": 0.004807692307692308,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004807692307692308,
                "tf.sparse.from_dense(tensor)": 0.004807692307692308,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004807692307692308,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004807692307692308,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004807692307692308,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004807692307692308,
                "tf.sparse.reset_shape(sp_input)": 0.004807692307692308,
                "tf.sparse.reshape(sp_input, shape)": 0.004807692307692308,
                "tf.sparse.retain(sp_input, to_retain)": 0.004807692307692308,
                "tf.sparse.slice(sp_input, start, size)": 0.004807692307692308,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004807692307692308,
                "tf.sparse.to_dense(sp_input)": 0.004807692307692308,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004807692307692308,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004807692307692308,
                "tf.sparse.transpose(sp_input)": 0.004807692307692308,
                "tf.sparse.transpose(sp_input, perm)": 0.004807692307692308,
                "IndexingAxis1Operation": 0.004807692307692308,
                "IndexingOperation": 0.004807692307692308,
                "PairCreationOperation": 0.004807692307692308,
                "SingletonTupleCreationOperation": 0.004807692307692308,
                "SlicingAxis0BothOperation": 0.004807692307692308,
                "SlicingAxis0LeftOperation": 0.004807692307692308,
                "SlicingAxis0RightOperation": 0.004807692307692308,
                "SlicingAxis1BothOperation": 0.004807692307692308,
                "SlicingAxis1LeftOperation": 0.004807692307692308,
                "SlicingAxis1RightOperation": 0.004807692307692308,
                "TripleCreationOperation": 0.004807692307692308,
                "PROVIDED_CONSTANT_WEIGHT": 0.004807692307692308,
                "COMMON_CONSTANT_WEIGHT": 0.052884615384615384,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004807692307692308,
                "INPUT_VARIABLE_WEIGHT": 0.10096153846153846,
                "AXIS_CONSTANT_WEIGHT": 0.004807692307692308,
                "SHAPE_CONSTANT_WEIGHT": 0.004807692307692308,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004807692307692308,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.009615384615384616,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004807692307692308,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004807692307692308,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004807692307692308
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 5,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 6,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 4,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_09",
        "description": "group items by value and get the group indices",
        "target_program": "tf.unique_with_counts(in1)[1]",
        "source": "https://stackoverflow.com/questions/53054668/assign-values-between-0-and-n-1-for-a-vector-of-length-l-with-n-different-eleme",
        "constants": "[]",
        "examples": {
            "inputs": "[[37, 42, 42, 37, 28, 15, 42, 15],]",
            "outputs": "[0, 1, 1, 0, 2, 3, 1, 3]"
        },
        "completions": [
            "return tf.unique_with_counts(in1).idx\n",
            "return tf.cast(tf.unique_with_counts(in1).y, tf.int32)\n",
            "return tf.unique(in1)[2]\n",
            "values, _ = tf.unique(in1)\nreturn tf.searchsorted(values, in1, side='left')\n",
            "def transform(in1):\n    return tf.argmax(tf.math.segment_max(tf.range(tf.size(in1)), in1), axis=0)\n",
            "def transform(in1):\n    _, idx = tf.unique(in1)\n    return idx\n",
            "def transform(in1):\n    return tf.math.segment_max(in1, in1)\n",
            "return tf.unique(in1)[2]\n",
            "return tf.unique_with_counts(in1).idx\n",
            "return tf.unique_with_counts(in1).y"
        ],
        "tf_operators": {
            "tf.unique_with_counts": 4,
            "tf.cast": 1,
            "tf.int32": 1,
            "tf.unique": 4,
            "tf.searchsorted": 1,
            "tf.range": 1,
            "tf.argmax": 1,
            "tf.math.segment_max": 2,
            "tf.size": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [
                2
            ],
            [],
            [
                0
            ],
            [],
            [],
            [
                2
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 13,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 1,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005405405405405406,
                "tf.add(x, y)": 0.005405405405405406,
                "tf.add_n(inputs)": 0.005405405405405406,
                "tf.argmax(input, axis)": 0.010810810810810811,
                "tf.argmin(input, axis)": 0.005405405405405406,
                "tf.argsort(values, axis, stable=True)": 0.005405405405405406,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005405405405405406,
                "tf.boolean_mask(tensor, mask)": 0.005405405405405406,
                "tf.broadcast_to(input, shape)": 0.005405405405405406,
                "tf.cast(x, dtype)": 0.010810810810810811,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005405405405405406,
                "tf.concat(values, axis)": 0.005405405405405406,
                "tf.constant(value)": 0.005405405405405406,
                "tf.constant(value, dtype)": 0.005405405405405406,
                "tf.divide(x, y)": 0.005405405405405406,
                "tf.equal(x, y)": 0.005405405405405406,
                "tf.exp(x)": 0.005405405405405406,
                "tf.expand_dims(input, axis)": 0.005405405405405406,
                "tf.eye(num_rows)": 0.005405405405405406,
                "tf.eye(num_rows, num_columns)": 0.005405405405405406,
                "tf.eye(num_rows, dtype)": 0.005405405405405406,
                "tf.fill(dims, value)": 0.005405405405405406,
                "tf.gather(params, indices)": 0.005405405405405406,
                "tf.gather(params, indices, axis, batch_dims)": 0.005405405405405406,
                "tf.gather_nd(params, indices)": 0.005405405405405406,
                "tf.gather_nd(params, indices, batch_dims)": 0.005405405405405406,
                "tf.greater(x, y)": 0.005405405405405406,
                "tf.greater_equal(x, y)": 0.005405405405405406,
                "tf.math.bincount(arr)": 0.005405405405405406,
                "tf.math.ceil(x)": 0.005405405405405406,
                "tf.math.count_nonzero(input)": 0.005405405405405406,
                "tf.math.count_nonzero(input, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005405405405405406,
                "tf.math.divide_no_nan(x, y)": 0.005405405405405406,
                "tf.math.floor(x)": 0.005405405405405406,
                "tf.math.log(x)": 0.005405405405405406,
                "tf.math.logical_and(x, y)": 0.005405405405405406,
                "tf.math.logical_not(x)": 0.005405405405405406,
                "tf.math.logical_or(x, y)": 0.005405405405405406,
                "tf.math.logical_xor(x, y)": 0.005405405405405406,
                "tf.math.negative(x)": 0.005405405405405406,
                "tf.math.reciprocal(x)": 0.005405405405405406,
                "tf.math.reciprocal_no_nan(x)": 0.005405405405405406,
                "tf.math.segment_max(data, segment_ids)": 0.016216216216216217,
                "tf.math.segment_mean(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_min(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_prod(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_sum(data, segment_ids)": 0.005405405405405406,
                "tf.math.squared_difference(x, y)": 0.005405405405405406,
                "tf.math.top_k(input, k)": 0.005405405405405406,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.matmul(a, b)": 0.005405405405405406,
                "tf.maximum(x, y)": 0.005405405405405406,
                "tf.minimum(x, y)": 0.005405405405405406,
                "tf.multiply(x, y)": 0.005405405405405406,
                "tf.not_equal(x, y)": 0.005405405405405406,
                "tf.one_hot(indices, depth)": 0.005405405405405406,
                "tf.ones(shape)": 0.005405405405405406,
                "tf.ones_like(input)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005405405405405406,
                "tf.range(start)": 0.010810810810810811,
                "tf.range(start, limit, delta)": 0.005405405405405406,
                "tf.reduce_any(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_all(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_max(input_tensor)": 0.005405405405405406,
                "tf.reduce_max(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_min(input_tensor)": 0.005405405405405406,
                "tf.reduce_min(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_prod(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor, axis)": 0.005405405405405406,
                "tf.repeat(input, repeats)": 0.005405405405405406,
                "tf.repeat(input, repeats, axis)": 0.005405405405405406,
                "tf.reshape(tensor, shape)": 0.005405405405405406,
                "tf.reverse(tensor, axis)": 0.005405405405405406,
                "tf.roll(input, shift, axis)": 0.005405405405405406,
                "tf.round(x)": 0.005405405405405406,
                "tf.scatter_nd(indices, updates, shape)": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005405405405405406,
                "tf.sequence_mask(lengths)": 0.005405405405405406,
                "tf.sequence_mask(lengths, maxlen)": 0.005405405405405406,
                "tf.shape(input)": 0.005405405405405406,
                "tf.sign(x)": 0.005405405405405406,
                "tf.sort(values, axis)": 0.005405405405405406,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005405405405405406,
                "tf.sqrt(x)": 0.005405405405405406,
                "tf.square(x)": 0.005405405405405406,
                "tf.squeeze(input)": 0.005405405405405406,
                "tf.squeeze(input, axis)": 0.005405405405405406,
                "tf.stack(values, axis)": 0.005405405405405406,
                "tf.subtract(x, y)": 0.005405405405405406,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005405405405405406,
                "tf.tensordot(a, b, axes)": 0.005405405405405406,
                "tf.tile(input, multiples)": 0.005405405405405406,
                "tf.transpose(a)": 0.005405405405405406,
                "tf.transpose(a, perm)": 0.005405405405405406,
                "tf.unique_with_counts(x)": 0.02702702702702703,
                "tf.unstack(value, axis)": 0.005405405405405406,
                "tf.where(condition)": 0.005405405405405406,
                "tf.where(condition, x, y)": 0.005405405405405406,
                "tf.zeros(shape)": 0.005405405405405406,
                "tf.zeros_like(input)": 0.005405405405405406,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005405405405405406,
                "tf.sparse.add(a, b)": 0.005405405405405406,
                "tf.sparse.concat(axis, sp_inputs)": 0.005405405405405406,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005405405405405406,
                "tf.sparse.from_dense(tensor)": 0.005405405405405406,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reset_shape(sp_input)": 0.005405405405405406,
                "tf.sparse.reshape(sp_input, shape)": 0.005405405405405406,
                "tf.sparse.retain(sp_input, to_retain)": 0.005405405405405406,
                "tf.sparse.slice(sp_input, start, size)": 0.005405405405405406,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005405405405405406,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input, perm)": 0.005405405405405406,
                "IndexingAxis1Operation": 0.005405405405405406,
                "IndexingOperation": 0.016216216216216217,
                "PairCreationOperation": 0.016216216216216217,
                "SingletonTupleCreationOperation": 0.005405405405405406,
                "SlicingAxis0BothOperation": 0.005405405405405406,
                "SlicingAxis0LeftOperation": 0.005405405405405406,
                "SlicingAxis0RightOperation": 0.005405405405405406,
                "SlicingAxis1BothOperation": 0.005405405405405406,
                "SlicingAxis1LeftOperation": 0.005405405405405406,
                "SlicingAxis1RightOperation": 0.005405405405405406,
                "TripleCreationOperation": 0.005405405405405406,
                "PROVIDED_CONSTANT_WEIGHT": 0.016216216216216217,
                "COMMON_CONSTANT_WEIGHT": 0.010810810810810811,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005405405405405406,
                "INPUT_VARIABLE_WEIGHT": 0.07567567567567568,
                "AXIS_CONSTANT_WEIGHT": 0.005405405405405406,
                "SHAPE_CONSTANT_WEIGHT": 0.005405405405405406,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.010810810810810811,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005405405405405406
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 6,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 5,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 7,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_10",
        "description": "perform matrix multiplication",
        "target_program": "tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/53094212/tensorflow-sxn-matrix-multiply-with-sxd-matrix-to-output-sxnxd-array",
        "constants": "[]",
        "examples": {
            "inputs": "[[[15, 10], [20, -5]],[[2, 3, 1], [-2, 5, 0]],]",
            "outputs": "[[[30, 45, 15], [20, 30, 10]],[[-40, 100, 0], [10, -25, 0]]]"
        },
        "completions": [
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.matmul(in1, in2)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)",
            "return tf.transpose(tf.tensordot(in1, in2, axes=1), perm=[0, 2, 1])",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.matmul(in1, in2)\n",
            "return tf.matmul(in1, in2)\n"
        ],
        "tf_operators": {
            "tf.tensordot": 4,
            "tf.transpose": 2,
            "tf.matmul": 6
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                0,
                2,
                1
            ],
            [],
            [],
            [],
            [
                1
            ],
            [],
            [
                1,
                0,
                2,
                1
            ],
            [
                1
            ],
            [],
            []
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 8,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.005128205128205128,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005128205128205128,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.005128205128205128,
                "tf.constant(value)": 0.005128205128205128,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.005128205128205128,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.005128205128205128,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.035897435897435895,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.005128205128205128,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.005128205128205128,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.005128205128205128,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.005128205128205128,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005128205128205128,
                "tf.tensordot(a, b, axes)": 0.02564102564102564,
                "tf.tile(input, multiples)": 0.005128205128205128,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.005128205128205128,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.005128205128205128,
                "PairCreationOperation": 0.005128205128205128,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.005128205128205128,
                "PROVIDED_CONSTANT_WEIGHT": 0.005128205128205128,
                "COMMON_CONSTANT_WEIGHT": 0.046153846153846156,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.1076923076923077,
                "AXIS_CONSTANT_WEIGHT": 0.015384615384615385,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 5,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_11",
        "description": "count the number of occurences of each distinct number",
        "target_program": "tf.math.bincount(in1)",
        "source": "https://stackoverflow.com/questions/45194672/how-to-count-elements-in-tensorflow-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1],]",
            "outputs": "[4, 3, 0, 1, 3]"
        },
        "completions": [
            "return tf.math.bincount(in1)",
            "def transform(input_tensor):\n    counts = tf.math.bincount(input_tensor)\n    return tf.boolean_mask(counts, tf.not_equal(counts, 0))\n",
            "result = tf.math.bincount(in1)\nreturn result[result > 0]\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)\n",
            "return tf.math.bincount(in1)",
            "return tf.math.bincount(in1)"
        ],
        "tf_operators": {
            "tf.math.bincount": 10,
            "tf.boolean_mask": 1,
            "tf.not_equal": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 2,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005555555555555556,
                "tf.add(x, y)": 0.005555555555555556,
                "tf.add_n(inputs)": 0.005555555555555556,
                "tf.argmax(input, axis)": 0.005555555555555556,
                "tf.argmin(input, axis)": 0.005555555555555556,
                "tf.argsort(values, axis, stable=True)": 0.005555555555555556,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005555555555555556,
                "tf.boolean_mask(tensor, mask)": 0.011111111111111112,
                "tf.broadcast_to(input, shape)": 0.005555555555555556,
                "tf.cast(x, dtype)": 0.005555555555555556,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005555555555555556,
                "tf.concat(values, axis)": 0.005555555555555556,
                "tf.constant(value)": 0.005555555555555556,
                "tf.constant(value, dtype)": 0.005555555555555556,
                "tf.divide(x, y)": 0.005555555555555556,
                "tf.equal(x, y)": 0.005555555555555556,
                "tf.exp(x)": 0.005555555555555556,
                "tf.expand_dims(input, axis)": 0.005555555555555556,
                "tf.eye(num_rows)": 0.005555555555555556,
                "tf.eye(num_rows, num_columns)": 0.005555555555555556,
                "tf.eye(num_rows, dtype)": 0.005555555555555556,
                "tf.fill(dims, value)": 0.005555555555555556,
                "tf.gather(params, indices)": 0.005555555555555556,
                "tf.gather(params, indices, axis, batch_dims)": 0.005555555555555556,
                "tf.gather_nd(params, indices)": 0.005555555555555556,
                "tf.gather_nd(params, indices, batch_dims)": 0.005555555555555556,
                "tf.greater(x, y)": 0.005555555555555556,
                "tf.greater_equal(x, y)": 0.005555555555555556,
                "tf.math.bincount(arr)": 0.06111111111111111,
                "tf.math.ceil(x)": 0.005555555555555556,
                "tf.math.count_nonzero(input)": 0.005555555555555556,
                "tf.math.count_nonzero(input, axis)": 0.005555555555555556,
                "tf.math.cumsum(x, axis)": 0.005555555555555556,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005555555555555556,
                "tf.math.divide_no_nan(x, y)": 0.005555555555555556,
                "tf.math.floor(x)": 0.005555555555555556,
                "tf.math.log(x)": 0.005555555555555556,
                "tf.math.logical_and(x, y)": 0.005555555555555556,
                "tf.math.logical_not(x)": 0.005555555555555556,
                "tf.math.logical_or(x, y)": 0.005555555555555556,
                "tf.math.logical_xor(x, y)": 0.005555555555555556,
                "tf.math.negative(x)": 0.005555555555555556,
                "tf.math.reciprocal(x)": 0.005555555555555556,
                "tf.math.reciprocal_no_nan(x)": 0.005555555555555556,
                "tf.math.segment_max(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_mean(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_min(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_prod(data, segment_ids)": 0.005555555555555556,
                "tf.math.segment_sum(data, segment_ids)": 0.005555555555555556,
                "tf.math.squared_difference(x, y)": 0.005555555555555556,
                "tf.math.top_k(input, k)": 0.005555555555555556,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005555555555555556,
                "tf.matmul(a, b)": 0.005555555555555556,
                "tf.maximum(x, y)": 0.005555555555555556,
                "tf.minimum(x, y)": 0.005555555555555556,
                "tf.multiply(x, y)": 0.005555555555555556,
                "tf.not_equal(x, y)": 0.011111111111111112,
                "tf.one_hot(indices, depth)": 0.005555555555555556,
                "tf.ones(shape)": 0.005555555555555556,
                "tf.ones_like(input)": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005555555555555556,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005555555555555556,
                "tf.range(start)": 0.005555555555555556,
                "tf.range(start, limit, delta)": 0.005555555555555556,
                "tf.reduce_any(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_all(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_max(input_tensor)": 0.005555555555555556,
                "tf.reduce_max(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_mean(input_tensor)": 0.005555555555555556,
                "tf.reduce_mean(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_min(input_tensor)": 0.005555555555555556,
                "tf.reduce_min(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_prod(input_tensor, axis)": 0.005555555555555556,
                "tf.reduce_sum(input_tensor)": 0.005555555555555556,
                "tf.reduce_sum(input_tensor, axis)": 0.005555555555555556,
                "tf.repeat(input, repeats)": 0.005555555555555556,
                "tf.repeat(input, repeats, axis)": 0.005555555555555556,
                "tf.reshape(tensor, shape)": 0.005555555555555556,
                "tf.reverse(tensor, axis)": 0.005555555555555556,
                "tf.roll(input, shift, axis)": 0.005555555555555556,
                "tf.round(x)": 0.005555555555555556,
                "tf.scatter_nd(indices, updates, shape)": 0.005555555555555556,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005555555555555556,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005555555555555556,
                "tf.sequence_mask(lengths)": 0.005555555555555556,
                "tf.sequence_mask(lengths, maxlen)": 0.005555555555555556,
                "tf.shape(input)": 0.005555555555555556,
                "tf.sign(x)": 0.005555555555555556,
                "tf.sort(values, axis)": 0.005555555555555556,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005555555555555556,
                "tf.sqrt(x)": 0.005555555555555556,
                "tf.square(x)": 0.005555555555555556,
                "tf.squeeze(input)": 0.005555555555555556,
                "tf.squeeze(input, axis)": 0.005555555555555556,
                "tf.stack(values, axis)": 0.005555555555555556,
                "tf.subtract(x, y)": 0.005555555555555556,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005555555555555556,
                "tf.tensordot(a, b, axes)": 0.005555555555555556,
                "tf.tile(input, multiples)": 0.005555555555555556,
                "tf.transpose(a)": 0.005555555555555556,
                "tf.transpose(a, perm)": 0.005555555555555556,
                "tf.unique_with_counts(x)": 0.005555555555555556,
                "tf.unstack(value, axis)": 0.005555555555555556,
                "tf.where(condition)": 0.005555555555555556,
                "tf.where(condition, x, y)": 0.005555555555555556,
                "tf.zeros(shape)": 0.005555555555555556,
                "tf.zeros_like(input)": 0.005555555555555556,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005555555555555556,
                "tf.sparse.add(a, b)": 0.005555555555555556,
                "tf.sparse.concat(axis, sp_inputs)": 0.005555555555555556,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005555555555555556,
                "tf.sparse.from_dense(tensor)": 0.005555555555555556,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005555555555555556,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005555555555555556,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005555555555555556,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005555555555555556,
                "tf.sparse.reset_shape(sp_input)": 0.005555555555555556,
                "tf.sparse.reshape(sp_input, shape)": 0.005555555555555556,
                "tf.sparse.retain(sp_input, to_retain)": 0.005555555555555556,
                "tf.sparse.slice(sp_input, start, size)": 0.005555555555555556,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005555555555555556,
                "tf.sparse.to_dense(sp_input)": 0.005555555555555556,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005555555555555556,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005555555555555556,
                "tf.sparse.transpose(sp_input)": 0.005555555555555556,
                "tf.sparse.transpose(sp_input, perm)": 0.005555555555555556,
                "IndexingAxis1Operation": 0.005555555555555556,
                "IndexingOperation": 0.011111111111111112,
                "PairCreationOperation": 0.005555555555555556,
                "SingletonTupleCreationOperation": 0.005555555555555556,
                "SlicingAxis0BothOperation": 0.005555555555555556,
                "SlicingAxis0LeftOperation": 0.005555555555555556,
                "SlicingAxis0RightOperation": 0.005555555555555556,
                "SlicingAxis1BothOperation": 0.005555555555555556,
                "SlicingAxis1LeftOperation": 0.005555555555555556,
                "SlicingAxis1RightOperation": 0.005555555555555556,
                "TripleCreationOperation": 0.005555555555555556,
                "PROVIDED_CONSTANT_WEIGHT": 0.005555555555555556,
                "COMMON_CONSTANT_WEIGHT": 0.016666666666666666,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005555555555555556,
                "INPUT_VARIABLE_WEIGHT": 0.06111111111111111,
                "AXIS_CONSTANT_WEIGHT": 0.005555555555555556,
                "SHAPE_CONSTANT_WEIGHT": 0.005555555555555556,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005555555555555556,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005555555555555556,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005555555555555556,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005555555555555556,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005555555555555556
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 4,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 6,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)": 7,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 7,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_12",
        "description": "remove a column from the tensor",
        "target_program": "tf.gather(in1, (0, 2), axis=1, batch_dims=0)",
        "source": "https://stackoverflow.com/questions/47447183/remove-a-set-of-tensors-from-a-tensor-in-tensorflow",
        "constants": "[0, 1, 2]",
        "examples": {
            "inputs": "[[[12, 34, 56], [33, 22, 11]]]",
            "outputs": "[[12, 56], [33, 11]]"
        },
        "completions": [
            "return tf.boolean_mask(in1, [True, False, True], axis=1)",
            "return tf.slice(in1, [0, 0], [-1, 1])",
            "return tf.gather(in1, [0, 2], axis=1)",
            "result = tf.slice(in1, [0, 0], [tf.shape(in1)[0], 1])\nresult = tf.concat([result, tf.slice(in1, [0, 2], [tf.shape(in1)[0], 1])], axis=1)\nreturn result\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.gather(in1, [0, 2], axis=1)\n",
            "return tf.concat([in1[:, :1], in1[:, 2:]], axis=1)",
            "return tf.concat([in1[:, 0:1], in1[:, 2:3]], axis=1)\n",
            "def transform(in1):\n    return in1[:, [0, 2]]\n",
            "result = tf.concat([in1[:,0:1], in1[:,2:3]], axis=1)\nreturn result\n"
        ],
        "tf_operators": {
            "tf.boolean_mask": 1,
            "tf.slice": 2,
            "tf.gather": 3,
            "tf.concat": 4,
            "tf.shape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                0,
                0,
                -1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                0,
                0,
                1,
                0,
                2,
                0,
                1,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                0,
                2,
                1
            ],
            [
                1,
                2,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                0,
                2
            ],
            [
                0,
                1,
                2,
                3,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 8,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 16,
            "shape": 2,
            "tf_bool": 0,
            "provided": 0,
            "common": 31,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 8,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004201680672268907,
                "tf.add(x, y)": 0.004201680672268907,
                "tf.add_n(inputs)": 0.004201680672268907,
                "tf.argmax(input, axis)": 0.004201680672268907,
                "tf.argmin(input, axis)": 0.004201680672268907,
                "tf.argsort(values, axis, stable=True)": 0.004201680672268907,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004201680672268907,
                "tf.boolean_mask(tensor, mask)": 0.008403361344537815,
                "tf.broadcast_to(input, shape)": 0.004201680672268907,
                "tf.cast(x, dtype)": 0.004201680672268907,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004201680672268907,
                "tf.concat(values, axis)": 0.02100840336134454,
                "tf.constant(value)": 0.004201680672268907,
                "tf.constant(value, dtype)": 0.004201680672268907,
                "tf.divide(x, y)": 0.004201680672268907,
                "tf.equal(x, y)": 0.004201680672268907,
                "tf.exp(x)": 0.004201680672268907,
                "tf.expand_dims(input, axis)": 0.004201680672268907,
                "tf.eye(num_rows)": 0.004201680672268907,
                "tf.eye(num_rows, num_columns)": 0.004201680672268907,
                "tf.eye(num_rows, dtype)": 0.004201680672268907,
                "tf.fill(dims, value)": 0.004201680672268907,
                "tf.gather(params, indices)": 0.004201680672268907,
                "tf.gather(params, indices, axis, batch_dims)": 0.01680672268907563,
                "tf.gather_nd(params, indices)": 0.004201680672268907,
                "tf.gather_nd(params, indices, batch_dims)": 0.004201680672268907,
                "tf.greater(x, y)": 0.004201680672268907,
                "tf.greater_equal(x, y)": 0.004201680672268907,
                "tf.math.bincount(arr)": 0.004201680672268907,
                "tf.math.ceil(x)": 0.004201680672268907,
                "tf.math.count_nonzero(input)": 0.004201680672268907,
                "tf.math.count_nonzero(input, axis)": 0.004201680672268907,
                "tf.math.cumsum(x, axis)": 0.004201680672268907,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004201680672268907,
                "tf.math.divide_no_nan(x, y)": 0.004201680672268907,
                "tf.math.floor(x)": 0.004201680672268907,
                "tf.math.log(x)": 0.004201680672268907,
                "tf.math.logical_and(x, y)": 0.004201680672268907,
                "tf.math.logical_not(x)": 0.004201680672268907,
                "tf.math.logical_or(x, y)": 0.004201680672268907,
                "tf.math.logical_xor(x, y)": 0.004201680672268907,
                "tf.math.negative(x)": 0.004201680672268907,
                "tf.math.reciprocal(x)": 0.004201680672268907,
                "tf.math.reciprocal_no_nan(x)": 0.004201680672268907,
                "tf.math.segment_max(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_mean(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_min(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_prod(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_sum(data, segment_ids)": 0.004201680672268907,
                "tf.math.squared_difference(x, y)": 0.004201680672268907,
                "tf.math.top_k(input, k)": 0.004201680672268907,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.matmul(a, b)": 0.004201680672268907,
                "tf.maximum(x, y)": 0.004201680672268907,
                "tf.minimum(x, y)": 0.004201680672268907,
                "tf.multiply(x, y)": 0.004201680672268907,
                "tf.not_equal(x, y)": 0.004201680672268907,
                "tf.one_hot(indices, depth)": 0.004201680672268907,
                "tf.ones(shape)": 0.004201680672268907,
                "tf.ones_like(input)": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004201680672268907,
                "tf.range(start)": 0.004201680672268907,
                "tf.range(start, limit, delta)": 0.004201680672268907,
                "tf.reduce_any(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_all(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_max(input_tensor)": 0.004201680672268907,
                "tf.reduce_max(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_mean(input_tensor)": 0.004201680672268907,
                "tf.reduce_mean(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_min(input_tensor)": 0.004201680672268907,
                "tf.reduce_min(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_prod(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_sum(input_tensor)": 0.004201680672268907,
                "tf.reduce_sum(input_tensor, axis)": 0.004201680672268907,
                "tf.repeat(input, repeats)": 0.004201680672268907,
                "tf.repeat(input, repeats, axis)": 0.004201680672268907,
                "tf.reshape(tensor, shape)": 0.004201680672268907,
                "tf.reverse(tensor, axis)": 0.004201680672268907,
                "tf.roll(input, shift, axis)": 0.004201680672268907,
                "tf.round(x)": 0.004201680672268907,
                "tf.scatter_nd(indices, updates, shape)": 0.004201680672268907,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004201680672268907,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004201680672268907,
                "tf.sequence_mask(lengths)": 0.004201680672268907,
                "tf.sequence_mask(lengths, maxlen)": 0.004201680672268907,
                "tf.shape(input)": 0.012605042016806723,
                "tf.sign(x)": 0.004201680672268907,
                "tf.sort(values, axis)": 0.004201680672268907,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004201680672268907,
                "tf.sqrt(x)": 0.004201680672268907,
                "tf.square(x)": 0.004201680672268907,
                "tf.squeeze(input)": 0.004201680672268907,
                "tf.squeeze(input, axis)": 0.004201680672268907,
                "tf.stack(values, axis)": 0.004201680672268907,
                "tf.subtract(x, y)": 0.004201680672268907,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004201680672268907,
                "tf.tensordot(a, b, axes)": 0.004201680672268907,
                "tf.tile(input, multiples)": 0.004201680672268907,
                "tf.transpose(a)": 0.004201680672268907,
                "tf.transpose(a, perm)": 0.004201680672268907,
                "tf.unique_with_counts(x)": 0.004201680672268907,
                "tf.unstack(value, axis)": 0.004201680672268907,
                "tf.where(condition)": 0.004201680672268907,
                "tf.where(condition, x, y)": 0.004201680672268907,
                "tf.zeros(shape)": 0.004201680672268907,
                "tf.zeros_like(input)": 0.004201680672268907,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004201680672268907,
                "tf.sparse.add(a, b)": 0.004201680672268907,
                "tf.sparse.concat(axis, sp_inputs)": 0.004201680672268907,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004201680672268907,
                "tf.sparse.from_dense(tensor)": 0.004201680672268907,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004201680672268907,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004201680672268907,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004201680672268907,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004201680672268907,
                "tf.sparse.reset_shape(sp_input)": 0.004201680672268907,
                "tf.sparse.reshape(sp_input, shape)": 0.004201680672268907,
                "tf.sparse.retain(sp_input, to_retain)": 0.004201680672268907,
                "tf.sparse.slice(sp_input, start, size)": 0.004201680672268907,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004201680672268907,
                "tf.sparse.to_dense(sp_input)": 0.004201680672268907,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004201680672268907,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004201680672268907,
                "tf.sparse.transpose(sp_input)": 0.004201680672268907,
                "tf.sparse.transpose(sp_input, perm)": 0.004201680672268907,
                "IndexingAxis1Operation": 0.008403361344537815,
                "IndexingOperation": 0.012605042016806723,
                "PairCreationOperation": 0.03361344537815126,
                "SingletonTupleCreationOperation": 0.004201680672268907,
                "SlicingAxis0BothOperation": 0.004201680672268907,
                "SlicingAxis0LeftOperation": 0.004201680672268907,
                "SlicingAxis0RightOperation": 0.004201680672268907,
                "SlicingAxis1BothOperation": 0.02100840336134454,
                "SlicingAxis1LeftOperation": 0.008403361344537815,
                "SlicingAxis1RightOperation": 0.008403361344537815,
                "TripleCreationOperation": 0.004201680672268907,
                "PROVIDED_CONSTANT_WEIGHT": 0.004201680672268907,
                "COMMON_CONSTANT_WEIGHT": 0.13445378151260504,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004201680672268907,
                "INPUT_VARIABLE_WEIGHT": 0.07142857142857142,
                "AXIS_CONSTANT_WEIGHT": 0.037815126050420166,
                "SHAPE_CONSTANT_WEIGHT": 0.012605042016806723,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004201680672268907
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 6,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 6,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_13",
        "description": "multiply vectors by tensor",
        "target_program": "tf.tensordot(in1, in2, (1, 1))",
        "source": "https://stackoverflow.com/questions/50777704/n-d-tensor-matrix-multiplication-with-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 5], [10, 2]],[[[1, 0], [5, 4]], [[3, 10], [2, -2]]],]",
            "outputs": "[[[28, 20], [19, 20]], [[20, 8], [34, 96]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, 1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "def transform(in1, in2):\n    return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, tf.reshape(in1, [2, 1, 2]))\n",
            "return tf.tensordot(tf.expand_dims(in1, 1), in2, 1)\n",
            "return tf.tensordot(in1, in2, axes=1)",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.matmul(in2, tf.expand_dims(in1, 2))"
        ],
        "tf_operators": {
            "tf.tensordot": 7,
            "tf.reshape": 1,
            "tf.matmul": 3,
            "tf.expand_dims": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                1,
                2
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 9,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 3,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005,
                "tf.add(x, y)": 0.005,
                "tf.add_n(inputs)": 0.005,
                "tf.argmax(input, axis)": 0.005,
                "tf.argmin(input, axis)": 0.005,
                "tf.argsort(values, axis, stable=True)": 0.005,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005,
                "tf.boolean_mask(tensor, mask)": 0.005,
                "tf.broadcast_to(input, shape)": 0.005,
                "tf.cast(x, dtype)": 0.005,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005,
                "tf.concat(values, axis)": 0.005,
                "tf.constant(value)": 0.005,
                "tf.constant(value, dtype)": 0.005,
                "tf.divide(x, y)": 0.005,
                "tf.equal(x, y)": 0.005,
                "tf.exp(x)": 0.005,
                "tf.expand_dims(input, axis)": 0.015,
                "tf.eye(num_rows)": 0.005,
                "tf.eye(num_rows, num_columns)": 0.005,
                "tf.eye(num_rows, dtype)": 0.005,
                "tf.fill(dims, value)": 0.005,
                "tf.gather(params, indices)": 0.005,
                "tf.gather(params, indices, axis, batch_dims)": 0.005,
                "tf.gather_nd(params, indices)": 0.005,
                "tf.gather_nd(params, indices, batch_dims)": 0.005,
                "tf.greater(x, y)": 0.005,
                "tf.greater_equal(x, y)": 0.005,
                "tf.math.bincount(arr)": 0.005,
                "tf.math.ceil(x)": 0.005,
                "tf.math.count_nonzero(input)": 0.005,
                "tf.math.count_nonzero(input, axis)": 0.005,
                "tf.math.cumsum(x, axis)": 0.005,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005,
                "tf.math.divide_no_nan(x, y)": 0.005,
                "tf.math.floor(x)": 0.005,
                "tf.math.log(x)": 0.005,
                "tf.math.logical_and(x, y)": 0.005,
                "tf.math.logical_not(x)": 0.005,
                "tf.math.logical_or(x, y)": 0.005,
                "tf.math.logical_xor(x, y)": 0.005,
                "tf.math.negative(x)": 0.005,
                "tf.math.reciprocal(x)": 0.005,
                "tf.math.reciprocal_no_nan(x)": 0.005,
                "tf.math.segment_max(data, segment_ids)": 0.005,
                "tf.math.segment_mean(data, segment_ids)": 0.005,
                "tf.math.segment_min(data, segment_ids)": 0.005,
                "tf.math.segment_prod(data, segment_ids)": 0.005,
                "tf.math.segment_sum(data, segment_ids)": 0.005,
                "tf.math.squared_difference(x, y)": 0.005,
                "tf.math.top_k(input, k)": 0.005,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005,
                "tf.matmul(a, b)": 0.02,
                "tf.maximum(x, y)": 0.005,
                "tf.minimum(x, y)": 0.005,
                "tf.multiply(x, y)": 0.005,
                "tf.not_equal(x, y)": 0.005,
                "tf.one_hot(indices, depth)": 0.005,
                "tf.ones(shape)": 0.005,
                "tf.ones_like(input)": 0.005,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005,
                "tf.range(start)": 0.005,
                "tf.range(start, limit, delta)": 0.005,
                "tf.reduce_any(input_tensor, axis)": 0.005,
                "tf.reduce_all(input_tensor, axis)": 0.005,
                "tf.reduce_max(input_tensor)": 0.005,
                "tf.reduce_max(input_tensor, axis)": 0.005,
                "tf.reduce_mean(input_tensor)": 0.005,
                "tf.reduce_mean(input_tensor, axis)": 0.005,
                "tf.reduce_min(input_tensor)": 0.005,
                "tf.reduce_min(input_tensor, axis)": 0.005,
                "tf.reduce_prod(input_tensor, axis)": 0.005,
                "tf.reduce_sum(input_tensor)": 0.005,
                "tf.reduce_sum(input_tensor, axis)": 0.005,
                "tf.repeat(input, repeats)": 0.005,
                "tf.repeat(input, repeats, axis)": 0.005,
                "tf.reshape(tensor, shape)": 0.01,
                "tf.reverse(tensor, axis)": 0.005,
                "tf.roll(input, shift, axis)": 0.005,
                "tf.round(x)": 0.005,
                "tf.scatter_nd(indices, updates, shape)": 0.005,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005,
                "tf.sequence_mask(lengths)": 0.005,
                "tf.sequence_mask(lengths, maxlen)": 0.005,
                "tf.shape(input)": 0.005,
                "tf.sign(x)": 0.005,
                "tf.sort(values, axis)": 0.005,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005,
                "tf.sqrt(x)": 0.005,
                "tf.square(x)": 0.005,
                "tf.squeeze(input)": 0.005,
                "tf.squeeze(input, axis)": 0.005,
                "tf.stack(values, axis)": 0.005,
                "tf.subtract(x, y)": 0.005,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005,
                "tf.tensordot(a, b, axes)": 0.04,
                "tf.tile(input, multiples)": 0.005,
                "tf.transpose(a)": 0.005,
                "tf.transpose(a, perm)": 0.005,
                "tf.unique_with_counts(x)": 0.005,
                "tf.unstack(value, axis)": 0.005,
                "tf.where(condition)": 0.005,
                "tf.where(condition, x, y)": 0.005,
                "tf.zeros(shape)": 0.005,
                "tf.zeros_like(input)": 0.005,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005,
                "tf.sparse.add(a, b)": 0.005,
                "tf.sparse.concat(axis, sp_inputs)": 0.005,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005,
                "tf.sparse.from_dense(tensor)": 0.005,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005,
                "tf.sparse.reset_shape(sp_input)": 0.005,
                "tf.sparse.reshape(sp_input, shape)": 0.005,
                "tf.sparse.retain(sp_input, to_retain)": 0.005,
                "tf.sparse.slice(sp_input, start, size)": 0.005,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005,
                "tf.sparse.to_dense(sp_input)": 0.005,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005,
                "tf.sparse.transpose(sp_input)": 0.005,
                "tf.sparse.transpose(sp_input, perm)": 0.005,
                "IndexingAxis1Operation": 0.005,
                "IndexingOperation": 0.005,
                "PairCreationOperation": 0.005,
                "SingletonTupleCreationOperation": 0.005,
                "SlicingAxis0BothOperation": 0.005,
                "SlicingAxis0LeftOperation": 0.005,
                "SlicingAxis0RightOperation": 0.005,
                "SlicingAxis1BothOperation": 0.005,
                "SlicingAxis1LeftOperation": 0.005,
                "SlicingAxis1RightOperation": 0.005,
                "TripleCreationOperation": 0.005,
                "PROVIDED_CONSTANT_WEIGHT": 0.005,
                "COMMON_CONSTANT_WEIGHT": 0.05,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005,
                "INPUT_VARIABLE_WEIGHT": 0.105,
                "AXIS_CONSTANT_WEIGHT": 0.02,
                "SHAPE_CONSTANT_WEIGHT": 0.005,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 6,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_14",
        "description": "choose True if any value in a row is True, False otherwise",
        "target_program": "tf.reduce_any(in1, axis=-1)",
        "source": "https://stackoverflow.com/questions/35657003/aggregate-each-element-of-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[False, False, True],  [False, False, False],  [True, False, True],  [False, True, False],  [False, False, False],  [True, True, True],  [True, True, False]]],]",
            "outputs": "[[True, False, True, True, False, True, True]]"
        },
        "completions": [
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)",
            "def transform(in1):\n    return tf.reduce_any(in1, axis=-1)\n",
            "return tf.reduce_any(in1, axis=1)\n",
            "return tf.reduce_any(in1, axis=1)",
            "return tf.reduce_any(in1, axis=1)\n"
        ],
        "tf_operators": {
            "tf.reduce_any": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005405405405405406,
                "tf.add(x, y)": 0.005405405405405406,
                "tf.add_n(inputs)": 0.005405405405405406,
                "tf.argmax(input, axis)": 0.005405405405405406,
                "tf.argmin(input, axis)": 0.005405405405405406,
                "tf.argsort(values, axis, stable=True)": 0.005405405405405406,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005405405405405406,
                "tf.boolean_mask(tensor, mask)": 0.005405405405405406,
                "tf.broadcast_to(input, shape)": 0.005405405405405406,
                "tf.cast(x, dtype)": 0.005405405405405406,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005405405405405406,
                "tf.concat(values, axis)": 0.005405405405405406,
                "tf.constant(value)": 0.005405405405405406,
                "tf.constant(value, dtype)": 0.005405405405405406,
                "tf.divide(x, y)": 0.005405405405405406,
                "tf.equal(x, y)": 0.005405405405405406,
                "tf.exp(x)": 0.005405405405405406,
                "tf.expand_dims(input, axis)": 0.005405405405405406,
                "tf.eye(num_rows)": 0.005405405405405406,
                "tf.eye(num_rows, num_columns)": 0.005405405405405406,
                "tf.eye(num_rows, dtype)": 0.005405405405405406,
                "tf.fill(dims, value)": 0.005405405405405406,
                "tf.gather(params, indices)": 0.005405405405405406,
                "tf.gather(params, indices, axis, batch_dims)": 0.005405405405405406,
                "tf.gather_nd(params, indices)": 0.005405405405405406,
                "tf.gather_nd(params, indices, batch_dims)": 0.005405405405405406,
                "tf.greater(x, y)": 0.005405405405405406,
                "tf.greater_equal(x, y)": 0.005405405405405406,
                "tf.math.bincount(arr)": 0.005405405405405406,
                "tf.math.ceil(x)": 0.005405405405405406,
                "tf.math.count_nonzero(input)": 0.005405405405405406,
                "tf.math.count_nonzero(input, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005405405405405406,
                "tf.math.divide_no_nan(x, y)": 0.005405405405405406,
                "tf.math.floor(x)": 0.005405405405405406,
                "tf.math.log(x)": 0.005405405405405406,
                "tf.math.logical_and(x, y)": 0.005405405405405406,
                "tf.math.logical_not(x)": 0.005405405405405406,
                "tf.math.logical_or(x, y)": 0.005405405405405406,
                "tf.math.logical_xor(x, y)": 0.005405405405405406,
                "tf.math.negative(x)": 0.005405405405405406,
                "tf.math.reciprocal(x)": 0.005405405405405406,
                "tf.math.reciprocal_no_nan(x)": 0.005405405405405406,
                "tf.math.segment_max(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_mean(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_min(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_prod(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_sum(data, segment_ids)": 0.005405405405405406,
                "tf.math.squared_difference(x, y)": 0.005405405405405406,
                "tf.math.top_k(input, k)": 0.005405405405405406,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.matmul(a, b)": 0.005405405405405406,
                "tf.maximum(x, y)": 0.005405405405405406,
                "tf.minimum(x, y)": 0.005405405405405406,
                "tf.multiply(x, y)": 0.005405405405405406,
                "tf.not_equal(x, y)": 0.005405405405405406,
                "tf.one_hot(indices, depth)": 0.005405405405405406,
                "tf.ones(shape)": 0.005405405405405406,
                "tf.ones_like(input)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005405405405405406,
                "tf.range(start)": 0.005405405405405406,
                "tf.range(start, limit, delta)": 0.005405405405405406,
                "tf.reduce_any(input_tensor, axis)": 0.05945945945945946,
                "tf.reduce_all(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_max(input_tensor)": 0.005405405405405406,
                "tf.reduce_max(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_min(input_tensor)": 0.005405405405405406,
                "tf.reduce_min(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_prod(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor, axis)": 0.005405405405405406,
                "tf.repeat(input, repeats)": 0.005405405405405406,
                "tf.repeat(input, repeats, axis)": 0.005405405405405406,
                "tf.reshape(tensor, shape)": 0.005405405405405406,
                "tf.reverse(tensor, axis)": 0.005405405405405406,
                "tf.roll(input, shift, axis)": 0.005405405405405406,
                "tf.round(x)": 0.005405405405405406,
                "tf.scatter_nd(indices, updates, shape)": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005405405405405406,
                "tf.sequence_mask(lengths)": 0.005405405405405406,
                "tf.sequence_mask(lengths, maxlen)": 0.005405405405405406,
                "tf.shape(input)": 0.005405405405405406,
                "tf.sign(x)": 0.005405405405405406,
                "tf.sort(values, axis)": 0.005405405405405406,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005405405405405406,
                "tf.sqrt(x)": 0.005405405405405406,
                "tf.square(x)": 0.005405405405405406,
                "tf.squeeze(input)": 0.005405405405405406,
                "tf.squeeze(input, axis)": 0.005405405405405406,
                "tf.stack(values, axis)": 0.005405405405405406,
                "tf.subtract(x, y)": 0.005405405405405406,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005405405405405406,
                "tf.tensordot(a, b, axes)": 0.005405405405405406,
                "tf.tile(input, multiples)": 0.005405405405405406,
                "tf.transpose(a)": 0.005405405405405406,
                "tf.transpose(a, perm)": 0.005405405405405406,
                "tf.unique_with_counts(x)": 0.005405405405405406,
                "tf.unstack(value, axis)": 0.005405405405405406,
                "tf.where(condition)": 0.005405405405405406,
                "tf.where(condition, x, y)": 0.005405405405405406,
                "tf.zeros(shape)": 0.005405405405405406,
                "tf.zeros_like(input)": 0.005405405405405406,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005405405405405406,
                "tf.sparse.add(a, b)": 0.005405405405405406,
                "tf.sparse.concat(axis, sp_inputs)": 0.005405405405405406,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005405405405405406,
                "tf.sparse.from_dense(tensor)": 0.005405405405405406,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reset_shape(sp_input)": 0.005405405405405406,
                "tf.sparse.reshape(sp_input, shape)": 0.005405405405405406,
                "tf.sparse.retain(sp_input, to_retain)": 0.005405405405405406,
                "tf.sparse.slice(sp_input, start, size)": 0.005405405405405406,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005405405405405406,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input, perm)": 0.005405405405405406,
                "IndexingAxis1Operation": 0.005405405405405406,
                "IndexingOperation": 0.005405405405405406,
                "PairCreationOperation": 0.005405405405405406,
                "SingletonTupleCreationOperation": 0.005405405405405406,
                "SlicingAxis0BothOperation": 0.005405405405405406,
                "SlicingAxis0LeftOperation": 0.005405405405405406,
                "SlicingAxis0RightOperation": 0.005405405405405406,
                "SlicingAxis1BothOperation": 0.005405405405405406,
                "SlicingAxis1LeftOperation": 0.005405405405405406,
                "SlicingAxis1RightOperation": 0.005405405405405406,
                "TripleCreationOperation": 0.005405405405405406,
                "PROVIDED_CONSTANT_WEIGHT": 0.005405405405405406,
                "COMMON_CONSTANT_WEIGHT": 0.05945945945945946,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005405405405405406,
                "INPUT_VARIABLE_WEIGHT": 0.05945945945945946,
                "AXIS_CONSTANT_WEIGHT": 0.005405405405405406,
                "SHAPE_CONSTANT_WEIGHT": 0.005405405405405406,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005405405405405406
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 4,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_15",
        "description": "set all instances of 1 to 0",
        "target_program": "tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))",
        "source": "https://stackoverflow.com/questions/39045797/conditional-assignment-of-tensor-values-in-tensorflow",
        "constants": "[0, 1]",
        "examples": {
            "inputs": "[[3, 1, 2, 0, 1, -1, 10, 1, -10],]",
            "outputs": "[3, 0, 2, 0, 0, -1, 10, 0, -10]"
        },
        "completions": [
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)\n",
            "return tf.where(tf.equal(in1, 1), 0, in1)",
            "def transform(in1):\n    return tf.where(tf.equal(in1, 1), tf.zeros_like(in1), in1)\n"
        ],
        "tf_operators": {
            "tf.where": 10,
            "tf.equal": 10,
            "tf.zeros_like": 4
        },
        "coverage_percentage": 20.0,
        "total_covered": 1,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 24,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 16,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0045662100456621,
                "tf.add(x, y)": 0.0045662100456621,
                "tf.add_n(inputs)": 0.0045662100456621,
                "tf.argmax(input, axis)": 0.0045662100456621,
                "tf.argmin(input, axis)": 0.0045662100456621,
                "tf.argsort(values, axis, stable=True)": 0.0045662100456621,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0045662100456621,
                "tf.boolean_mask(tensor, mask)": 0.0045662100456621,
                "tf.broadcast_to(input, shape)": 0.0045662100456621,
                "tf.cast(x, dtype)": 0.0045662100456621,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0045662100456621,
                "tf.concat(values, axis)": 0.0045662100456621,
                "tf.constant(value)": 0.0045662100456621,
                "tf.constant(value, dtype)": 0.0045662100456621,
                "tf.divide(x, y)": 0.0045662100456621,
                "tf.equal(x, y)": 0.0502283105022831,
                "tf.exp(x)": 0.0045662100456621,
                "tf.expand_dims(input, axis)": 0.0045662100456621,
                "tf.eye(num_rows)": 0.0045662100456621,
                "tf.eye(num_rows, num_columns)": 0.0045662100456621,
                "tf.eye(num_rows, dtype)": 0.0045662100456621,
                "tf.fill(dims, value)": 0.0045662100456621,
                "tf.gather(params, indices)": 0.0045662100456621,
                "tf.gather(params, indices, axis, batch_dims)": 0.0045662100456621,
                "tf.gather_nd(params, indices)": 0.0045662100456621,
                "tf.gather_nd(params, indices, batch_dims)": 0.0045662100456621,
                "tf.greater(x, y)": 0.0045662100456621,
                "tf.greater_equal(x, y)": 0.0045662100456621,
                "tf.math.bincount(arr)": 0.0045662100456621,
                "tf.math.ceil(x)": 0.0045662100456621,
                "tf.math.count_nonzero(input)": 0.0045662100456621,
                "tf.math.count_nonzero(input, axis)": 0.0045662100456621,
                "tf.math.cumsum(x, axis)": 0.0045662100456621,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0045662100456621,
                "tf.math.divide_no_nan(x, y)": 0.0045662100456621,
                "tf.math.floor(x)": 0.0045662100456621,
                "tf.math.log(x)": 0.0045662100456621,
                "tf.math.logical_and(x, y)": 0.0045662100456621,
                "tf.math.logical_not(x)": 0.0045662100456621,
                "tf.math.logical_or(x, y)": 0.0045662100456621,
                "tf.math.logical_xor(x, y)": 0.0045662100456621,
                "tf.math.negative(x)": 0.0045662100456621,
                "tf.math.reciprocal(x)": 0.0045662100456621,
                "tf.math.reciprocal_no_nan(x)": 0.0045662100456621,
                "tf.math.segment_max(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_mean(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_min(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_prod(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_sum(data, segment_ids)": 0.0045662100456621,
                "tf.math.squared_difference(x, y)": 0.0045662100456621,
                "tf.math.top_k(input, k)": 0.0045662100456621,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.matmul(a, b)": 0.0045662100456621,
                "tf.maximum(x, y)": 0.0045662100456621,
                "tf.minimum(x, y)": 0.0045662100456621,
                "tf.multiply(x, y)": 0.0045662100456621,
                "tf.not_equal(x, y)": 0.0045662100456621,
                "tf.one_hot(indices, depth)": 0.0045662100456621,
                "tf.ones(shape)": 0.0045662100456621,
                "tf.ones_like(input)": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0045662100456621,
                "tf.range(start)": 0.0045662100456621,
                "tf.range(start, limit, delta)": 0.0045662100456621,
                "tf.reduce_any(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_all(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_max(input_tensor)": 0.0045662100456621,
                "tf.reduce_max(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_mean(input_tensor)": 0.0045662100456621,
                "tf.reduce_mean(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_min(input_tensor)": 0.0045662100456621,
                "tf.reduce_min(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_prod(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_sum(input_tensor)": 0.0045662100456621,
                "tf.reduce_sum(input_tensor, axis)": 0.0045662100456621,
                "tf.repeat(input, repeats)": 0.0045662100456621,
                "tf.repeat(input, repeats, axis)": 0.0045662100456621,
                "tf.reshape(tensor, shape)": 0.0045662100456621,
                "tf.reverse(tensor, axis)": 0.0045662100456621,
                "tf.roll(input, shift, axis)": 0.0045662100456621,
                "tf.round(x)": 0.0045662100456621,
                "tf.scatter_nd(indices, updates, shape)": 0.0045662100456621,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0045662100456621,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0045662100456621,
                "tf.sequence_mask(lengths)": 0.0045662100456621,
                "tf.sequence_mask(lengths, maxlen)": 0.0045662100456621,
                "tf.shape(input)": 0.0045662100456621,
                "tf.sign(x)": 0.0045662100456621,
                "tf.sort(values, axis)": 0.0045662100456621,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0045662100456621,
                "tf.sqrt(x)": 0.0045662100456621,
                "tf.square(x)": 0.0045662100456621,
                "tf.squeeze(input)": 0.0045662100456621,
                "tf.squeeze(input, axis)": 0.0045662100456621,
                "tf.stack(values, axis)": 0.0045662100456621,
                "tf.subtract(x, y)": 0.0045662100456621,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0045662100456621,
                "tf.tensordot(a, b, axes)": 0.0045662100456621,
                "tf.tile(input, multiples)": 0.0045662100456621,
                "tf.transpose(a)": 0.0045662100456621,
                "tf.transpose(a, perm)": 0.0045662100456621,
                "tf.unique_with_counts(x)": 0.0045662100456621,
                "tf.unstack(value, axis)": 0.0045662100456621,
                "tf.where(condition)": 0.0045662100456621,
                "tf.where(condition, x, y)": 0.0502283105022831,
                "tf.zeros(shape)": 0.0045662100456621,
                "tf.zeros_like(input)": 0.0228310502283105,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0045662100456621,
                "tf.sparse.add(a, b)": 0.0045662100456621,
                "tf.sparse.concat(axis, sp_inputs)": 0.0045662100456621,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0045662100456621,
                "tf.sparse.from_dense(tensor)": 0.0045662100456621,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0045662100456621,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0045662100456621,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0045662100456621,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0045662100456621,
                "tf.sparse.reset_shape(sp_input)": 0.0045662100456621,
                "tf.sparse.reshape(sp_input, shape)": 0.0045662100456621,
                "tf.sparse.retain(sp_input, to_retain)": 0.0045662100456621,
                "tf.sparse.slice(sp_input, start, size)": 0.0045662100456621,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0045662100456621,
                "tf.sparse.to_dense(sp_input)": 0.0045662100456621,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0045662100456621,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0045662100456621,
                "tf.sparse.transpose(sp_input)": 0.0045662100456621,
                "tf.sparse.transpose(sp_input, perm)": 0.0045662100456621,
                "IndexingAxis1Operation": 0.0045662100456621,
                "IndexingOperation": 0.0045662100456621,
                "PairCreationOperation": 0.0045662100456621,
                "SingletonTupleCreationOperation": 0.0045662100456621,
                "SlicingAxis0BothOperation": 0.0045662100456621,
                "SlicingAxis0LeftOperation": 0.0045662100456621,
                "SlicingAxis0RightOperation": 0.0045662100456621,
                "SlicingAxis1BothOperation": 0.0045662100456621,
                "SlicingAxis1LeftOperation": 0.0045662100456621,
                "SlicingAxis1RightOperation": 0.0045662100456621,
                "TripleCreationOperation": 0.0045662100456621,
                "PROVIDED_CONSTANT_WEIGHT": 0.0045662100456621,
                "COMMON_CONSTANT_WEIGHT": 0.0776255707762557,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0045662100456621,
                "INPUT_VARIABLE_WEIGHT": 0.1141552511415525,
                "AXIS_CONSTANT_WEIGHT": 0.0045662100456621,
                "SHAPE_CONSTANT_WEIGHT": 0.0045662100456621,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0045662100456621
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 4,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 5,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_16",
        "description": "multiply tensors across the first axis",
        "target_program": "tf.multiply(in1, tf.expand_dims(in2, 1))",
        "source": "https://stackoverflow.com/questions/46240646/tensor-multiply-along-axis-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2, 5], [3, 0], [8, -7]],[4, 10, -6],]",
            "outputs": "[[8, 20], [30, 0], [-48, 42]]"
        },
        "completions": [
            "return tf.matmul(tf.expand_dims(in1, 2), tf.expand_dims(in2, 1))",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "result = tf.multiply(in1, tf.expand_dims(in2, axis=1))\n",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))\n",
            "return tf.multiply(tf.expand_dims(in1, axis=1), tf.expand_dims(in2, axis=0))",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))",
            "return tf.multiply(tf.expand_dims(in1, -1), tf.expand_dims(in2, 0))",
            "return tf.multiply(tf.expand_dims(in1, axis=2), tf.expand_dims(in2, axis=1))"
        ],
        "tf_operators": {
            "tf.expand_dims": 10,
            "tf.matmul": 1,
            "tf.multiply": 9
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                2,
                1
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                2,
                1
            ],
            [
                2,
                1
            ],
            [
                -1,
                0
            ],
            [
                2,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 15,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 4,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004484304932735426,
                "tf.add(x, y)": 0.004484304932735426,
                "tf.add_n(inputs)": 0.004484304932735426,
                "tf.argmax(input, axis)": 0.004484304932735426,
                "tf.argmin(input, axis)": 0.004484304932735426,
                "tf.argsort(values, axis, stable=True)": 0.004484304932735426,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004484304932735426,
                "tf.boolean_mask(tensor, mask)": 0.004484304932735426,
                "tf.broadcast_to(input, shape)": 0.004484304932735426,
                "tf.cast(x, dtype)": 0.004484304932735426,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004484304932735426,
                "tf.concat(values, axis)": 0.004484304932735426,
                "tf.constant(value)": 0.004484304932735426,
                "tf.constant(value, dtype)": 0.004484304932735426,
                "tf.divide(x, y)": 0.004484304932735426,
                "tf.equal(x, y)": 0.004484304932735426,
                "tf.exp(x)": 0.004484304932735426,
                "tf.expand_dims(input, axis)": 0.08968609865470852,
                "tf.eye(num_rows)": 0.004484304932735426,
                "tf.eye(num_rows, num_columns)": 0.004484304932735426,
                "tf.eye(num_rows, dtype)": 0.004484304932735426,
                "tf.fill(dims, value)": 0.004484304932735426,
                "tf.gather(params, indices)": 0.004484304932735426,
                "tf.gather(params, indices, axis, batch_dims)": 0.004484304932735426,
                "tf.gather_nd(params, indices)": 0.004484304932735426,
                "tf.gather_nd(params, indices, batch_dims)": 0.004484304932735426,
                "tf.greater(x, y)": 0.004484304932735426,
                "tf.greater_equal(x, y)": 0.004484304932735426,
                "tf.math.bincount(arr)": 0.004484304932735426,
                "tf.math.ceil(x)": 0.004484304932735426,
                "tf.math.count_nonzero(input)": 0.004484304932735426,
                "tf.math.count_nonzero(input, axis)": 0.004484304932735426,
                "tf.math.cumsum(x, axis)": 0.004484304932735426,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004484304932735426,
                "tf.math.divide_no_nan(x, y)": 0.004484304932735426,
                "tf.math.floor(x)": 0.004484304932735426,
                "tf.math.log(x)": 0.004484304932735426,
                "tf.math.logical_and(x, y)": 0.004484304932735426,
                "tf.math.logical_not(x)": 0.004484304932735426,
                "tf.math.logical_or(x, y)": 0.004484304932735426,
                "tf.math.logical_xor(x, y)": 0.004484304932735426,
                "tf.math.negative(x)": 0.004484304932735426,
                "tf.math.reciprocal(x)": 0.004484304932735426,
                "tf.math.reciprocal_no_nan(x)": 0.004484304932735426,
                "tf.math.segment_max(data, segment_ids)": 0.004484304932735426,
                "tf.math.segment_mean(data, segment_ids)": 0.004484304932735426,
                "tf.math.segment_min(data, segment_ids)": 0.004484304932735426,
                "tf.math.segment_prod(data, segment_ids)": 0.004484304932735426,
                "tf.math.segment_sum(data, segment_ids)": 0.004484304932735426,
                "tf.math.squared_difference(x, y)": 0.004484304932735426,
                "tf.math.top_k(input, k)": 0.004484304932735426,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004484304932735426,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004484304932735426,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004484304932735426,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004484304932735426,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004484304932735426,
                "tf.matmul(a, b)": 0.008968609865470852,
                "tf.maximum(x, y)": 0.004484304932735426,
                "tf.minimum(x, y)": 0.004484304932735426,
                "tf.multiply(x, y)": 0.04484304932735426,
                "tf.not_equal(x, y)": 0.004484304932735426,
                "tf.one_hot(indices, depth)": 0.004484304932735426,
                "tf.ones(shape)": 0.004484304932735426,
                "tf.ones_like(input)": 0.004484304932735426,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004484304932735426,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004484304932735426,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004484304932735426,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004484304932735426,
                "tf.range(start)": 0.004484304932735426,
                "tf.range(start, limit, delta)": 0.004484304932735426,
                "tf.reduce_any(input_tensor, axis)": 0.004484304932735426,
                "tf.reduce_all(input_tensor, axis)": 0.004484304932735426,
                "tf.reduce_max(input_tensor)": 0.004484304932735426,
                "tf.reduce_max(input_tensor, axis)": 0.004484304932735426,
                "tf.reduce_mean(input_tensor)": 0.004484304932735426,
                "tf.reduce_mean(input_tensor, axis)": 0.004484304932735426,
                "tf.reduce_min(input_tensor)": 0.004484304932735426,
                "tf.reduce_min(input_tensor, axis)": 0.004484304932735426,
                "tf.reduce_prod(input_tensor, axis)": 0.004484304932735426,
                "tf.reduce_sum(input_tensor)": 0.004484304932735426,
                "tf.reduce_sum(input_tensor, axis)": 0.004484304932735426,
                "tf.repeat(input, repeats)": 0.004484304932735426,
                "tf.repeat(input, repeats, axis)": 0.004484304932735426,
                "tf.reshape(tensor, shape)": 0.004484304932735426,
                "tf.reverse(tensor, axis)": 0.004484304932735426,
                "tf.roll(input, shift, axis)": 0.004484304932735426,
                "tf.round(x)": 0.004484304932735426,
                "tf.scatter_nd(indices, updates, shape)": 0.004484304932735426,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004484304932735426,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004484304932735426,
                "tf.sequence_mask(lengths)": 0.004484304932735426,
                "tf.sequence_mask(lengths, maxlen)": 0.004484304932735426,
                "tf.shape(input)": 0.004484304932735426,
                "tf.sign(x)": 0.004484304932735426,
                "tf.sort(values, axis)": 0.004484304932735426,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004484304932735426,
                "tf.sqrt(x)": 0.004484304932735426,
                "tf.square(x)": 0.004484304932735426,
                "tf.squeeze(input)": 0.004484304932735426,
                "tf.squeeze(input, axis)": 0.004484304932735426,
                "tf.stack(values, axis)": 0.004484304932735426,
                "tf.subtract(x, y)": 0.004484304932735426,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004484304932735426,
                "tf.tensordot(a, b, axes)": 0.004484304932735426,
                "tf.tile(input, multiples)": 0.004484304932735426,
                "tf.transpose(a)": 0.004484304932735426,
                "tf.transpose(a, perm)": 0.004484304932735426,
                "tf.unique_with_counts(x)": 0.004484304932735426,
                "tf.unstack(value, axis)": 0.004484304932735426,
                "tf.where(condition)": 0.004484304932735426,
                "tf.where(condition, x, y)": 0.004484304932735426,
                "tf.zeros(shape)": 0.004484304932735426,
                "tf.zeros_like(input)": 0.004484304932735426,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004484304932735426,
                "tf.sparse.add(a, b)": 0.004484304932735426,
                "tf.sparse.concat(axis, sp_inputs)": 0.004484304932735426,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004484304932735426,
                "tf.sparse.from_dense(tensor)": 0.004484304932735426,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004484304932735426,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004484304932735426,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004484304932735426,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004484304932735426,
                "tf.sparse.reset_shape(sp_input)": 0.004484304932735426,
                "tf.sparse.reshape(sp_input, shape)": 0.004484304932735426,
                "tf.sparse.retain(sp_input, to_retain)": 0.004484304932735426,
                "tf.sparse.slice(sp_input, start, size)": 0.004484304932735426,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004484304932735426,
                "tf.sparse.to_dense(sp_input)": 0.004484304932735426,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004484304932735426,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004484304932735426,
                "tf.sparse.transpose(sp_input)": 0.004484304932735426,
                "tf.sparse.transpose(sp_input, perm)": 0.004484304932735426,
                "IndexingAxis1Operation": 0.004484304932735426,
                "IndexingOperation": 0.004484304932735426,
                "PairCreationOperation": 0.004484304932735426,
                "SingletonTupleCreationOperation": 0.004484304932735426,
                "SlicingAxis0BothOperation": 0.004484304932735426,
                "SlicingAxis0LeftOperation": 0.004484304932735426,
                "SlicingAxis0RightOperation": 0.004484304932735426,
                "SlicingAxis1BothOperation": 0.004484304932735426,
                "SlicingAxis1LeftOperation": 0.004484304932735426,
                "SlicingAxis1RightOperation": 0.004484304932735426,
                "TripleCreationOperation": 0.004484304932735426,
                "PROVIDED_CONSTANT_WEIGHT": 0.004484304932735426,
                "COMMON_CONSTANT_WEIGHT": 0.07174887892376682,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004484304932735426,
                "INPUT_VARIABLE_WEIGHT": 0.09417040358744394,
                "AXIS_CONSTANT_WEIGHT": 0.02242152466367713,
                "SHAPE_CONSTANT_WEIGHT": 0.004484304932735426,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004484304932735426,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004484304932735426,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004484304932735426,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004484304932735426,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004484304932735426
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 3,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_17",
        "description": "duplicate each element of a tensor",
        "target_program": "tf.stack((in1, in1), axis=1)",
        "source": "https://stackoverflow.com/questions/51761353/about-tensor-of-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[17, -32, 99],]",
            "outputs": "[[17, 17], [-32, -32], [99, 99]]"
        },
        "completions": [
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "result = tf.stack([in1, in1], axis=1)\nreturn result\n",
            "return tf.repeat(in1, 2)\n",
            "return tf.repeat(in1, 2)",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.tile(tf.expand_dims(in1, 1), [1, 2])\n",
            "def transform(in1):\n    return tf.repeat(in1, 2)\n",
            "return tf.repeat(tf.expand_dims(in1, 1), 2, axis=1)\n"
        ],
        "tf_operators": {
            "tf.repeat": 5,
            "tf.tile": 4,
            "tf.expand_dims": 5,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                1,
                1,
                2
            ],
            [
                2
            ],
            [
                1,
                2,
                1
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 11,
            "shape": 0,
            "tf_bool": 0,
            "provided": 9,
            "common": 11,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005,
                "tf.add(x, y)": 0.005,
                "tf.add_n(inputs)": 0.005,
                "tf.argmax(input, axis)": 0.005,
                "tf.argmin(input, axis)": 0.005,
                "tf.argsort(values, axis, stable=True)": 0.005,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005,
                "tf.boolean_mask(tensor, mask)": 0.005,
                "tf.broadcast_to(input, shape)": 0.005,
                "tf.cast(x, dtype)": 0.005,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005,
                "tf.concat(values, axis)": 0.005,
                "tf.constant(value)": 0.005,
                "tf.constant(value, dtype)": 0.005,
                "tf.divide(x, y)": 0.005,
                "tf.equal(x, y)": 0.005,
                "tf.exp(x)": 0.005,
                "tf.expand_dims(input, axis)": 0.03,
                "tf.eye(num_rows)": 0.005,
                "tf.eye(num_rows, num_columns)": 0.005,
                "tf.eye(num_rows, dtype)": 0.005,
                "tf.fill(dims, value)": 0.005,
                "tf.gather(params, indices)": 0.005,
                "tf.gather(params, indices, axis, batch_dims)": 0.005,
                "tf.gather_nd(params, indices)": 0.005,
                "tf.gather_nd(params, indices, batch_dims)": 0.005,
                "tf.greater(x, y)": 0.005,
                "tf.greater_equal(x, y)": 0.005,
                "tf.math.bincount(arr)": 0.005,
                "tf.math.ceil(x)": 0.005,
                "tf.math.count_nonzero(input)": 0.005,
                "tf.math.count_nonzero(input, axis)": 0.005,
                "tf.math.cumsum(x, axis)": 0.005,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005,
                "tf.math.divide_no_nan(x, y)": 0.005,
                "tf.math.floor(x)": 0.005,
                "tf.math.log(x)": 0.005,
                "tf.math.logical_and(x, y)": 0.005,
                "tf.math.logical_not(x)": 0.005,
                "tf.math.logical_or(x, y)": 0.005,
                "tf.math.logical_xor(x, y)": 0.005,
                "tf.math.negative(x)": 0.005,
                "tf.math.reciprocal(x)": 0.005,
                "tf.math.reciprocal_no_nan(x)": 0.005,
                "tf.math.segment_max(data, segment_ids)": 0.005,
                "tf.math.segment_mean(data, segment_ids)": 0.005,
                "tf.math.segment_min(data, segment_ids)": 0.005,
                "tf.math.segment_prod(data, segment_ids)": 0.005,
                "tf.math.segment_sum(data, segment_ids)": 0.005,
                "tf.math.squared_difference(x, y)": 0.005,
                "tf.math.top_k(input, k)": 0.005,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005,
                "tf.matmul(a, b)": 0.005,
                "tf.maximum(x, y)": 0.005,
                "tf.minimum(x, y)": 0.005,
                "tf.multiply(x, y)": 0.005,
                "tf.not_equal(x, y)": 0.005,
                "tf.one_hot(indices, depth)": 0.005,
                "tf.ones(shape)": 0.005,
                "tf.ones_like(input)": 0.005,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005,
                "tf.range(start)": 0.005,
                "tf.range(start, limit, delta)": 0.005,
                "tf.reduce_any(input_tensor, axis)": 0.005,
                "tf.reduce_all(input_tensor, axis)": 0.005,
                "tf.reduce_max(input_tensor)": 0.005,
                "tf.reduce_max(input_tensor, axis)": 0.005,
                "tf.reduce_mean(input_tensor)": 0.005,
                "tf.reduce_mean(input_tensor, axis)": 0.005,
                "tf.reduce_min(input_tensor)": 0.005,
                "tf.reduce_min(input_tensor, axis)": 0.005,
                "tf.reduce_prod(input_tensor, axis)": 0.005,
                "tf.reduce_sum(input_tensor)": 0.005,
                "tf.reduce_sum(input_tensor, axis)": 0.005,
                "tf.repeat(input, repeats)": 0.025,
                "tf.repeat(input, repeats, axis)": 0.005,
                "tf.reshape(tensor, shape)": 0.005,
                "tf.reverse(tensor, axis)": 0.005,
                "tf.roll(input, shift, axis)": 0.005,
                "tf.round(x)": 0.005,
                "tf.scatter_nd(indices, updates, shape)": 0.005,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005,
                "tf.sequence_mask(lengths)": 0.005,
                "tf.sequence_mask(lengths, maxlen)": 0.005,
                "tf.shape(input)": 0.005,
                "tf.sign(x)": 0.005,
                "tf.sort(values, axis)": 0.005,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005,
                "tf.sqrt(x)": 0.005,
                "tf.square(x)": 0.005,
                "tf.squeeze(input)": 0.005,
                "tf.squeeze(input, axis)": 0.005,
                "tf.stack(values, axis)": 0.01,
                "tf.subtract(x, y)": 0.005,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005,
                "tf.tensordot(a, b, axes)": 0.005,
                "tf.tile(input, multiples)": 0.025,
                "tf.transpose(a)": 0.005,
                "tf.transpose(a, perm)": 0.005,
                "tf.unique_with_counts(x)": 0.005,
                "tf.unstack(value, axis)": 0.005,
                "tf.where(condition)": 0.005,
                "tf.where(condition, x, y)": 0.005,
                "tf.zeros(shape)": 0.005,
                "tf.zeros_like(input)": 0.005,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005,
                "tf.sparse.add(a, b)": 0.005,
                "tf.sparse.concat(axis, sp_inputs)": 0.005,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005,
                "tf.sparse.from_dense(tensor)": 0.005,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005,
                "tf.sparse.reset_shape(sp_input)": 0.005,
                "tf.sparse.reshape(sp_input, shape)": 0.005,
                "tf.sparse.retain(sp_input, to_retain)": 0.005,
                "tf.sparse.slice(sp_input, start, size)": 0.005,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005,
                "tf.sparse.to_dense(sp_input)": 0.005,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005,
                "tf.sparse.transpose(sp_input)": 0.005,
                "tf.sparse.transpose(sp_input, perm)": 0.005,
                "IndexingAxis1Operation": 0.005,
                "IndexingOperation": 0.005,
                "PairCreationOperation": 0.005,
                "SingletonTupleCreationOperation": 0.005,
                "SlicingAxis0BothOperation": 0.005,
                "SlicingAxis0LeftOperation": 0.005,
                "SlicingAxis0RightOperation": 0.005,
                "SlicingAxis1BothOperation": 0.005,
                "SlicingAxis1LeftOperation": 0.005,
                "SlicingAxis1RightOperation": 0.005,
                "TripleCreationOperation": 0.005,
                "PROVIDED_CONSTANT_WEIGHT": 0.05,
                "COMMON_CONSTANT_WEIGHT": 0.06,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005,
                "INPUT_VARIABLE_WEIGHT": 0.06,
                "AXIS_CONSTANT_WEIGHT": 0.005,
                "SHAPE_CONSTANT_WEIGHT": 0.005,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 5,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 5,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 5,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_18",
        "description": "multiply 3D tensor and 2D tensor and add another tensor",
        "target_program": "tf.add(in3, tf.matmul(in1, in2))",
        "source": "https://stackoverflow.com/questions/38222126/tensorflow-efficient-way-for-tensor-multiplication",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400],]",
            "outputs": "[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]]"
        },
        "completions": [
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), 2) + in3\n",
            "result = tf.add(tf.matmul(in1, in2), in3)\nreturn result\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, 1), in3)\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), in3)\n",
            "mul_result = tf.multiply(in1, in2)\nadd_result = tf.add(mul_result, in3)\nreturn add_result\n",
            "return tf.add(tf.tensordot(in1, in2, axes=1), tf.reshape(in3, [1, 2, 4]))\n"
        ],
        "tf_operators": {
            "tf.tensordot": 7,
            "tf.add": 9,
            "tf.expand_dims": 1,
            "tf.reduce_sum": 1,
            "tf.multiply": 2,
            "tf.matmul": 1,
            "tf.reshape": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                2
            ],
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1,
                1,
                2,
                4
            ]
        ],
        "all_constants": [
            1,
            2,
            4
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 30,
            "shape": 1,
            "tf_bool": 0,
            "provided": 0,
            "common": 9,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0045662100456621,
                "tf.add(x, y)": 0.045662100456621,
                "tf.add_n(inputs)": 0.0045662100456621,
                "tf.argmax(input, axis)": 0.0045662100456621,
                "tf.argmin(input, axis)": 0.0045662100456621,
                "tf.argsort(values, axis, stable=True)": 0.0045662100456621,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0045662100456621,
                "tf.boolean_mask(tensor, mask)": 0.0045662100456621,
                "tf.broadcast_to(input, shape)": 0.0045662100456621,
                "tf.cast(x, dtype)": 0.0045662100456621,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0045662100456621,
                "tf.concat(values, axis)": 0.0045662100456621,
                "tf.constant(value)": 0.0045662100456621,
                "tf.constant(value, dtype)": 0.0045662100456621,
                "tf.divide(x, y)": 0.0045662100456621,
                "tf.equal(x, y)": 0.0045662100456621,
                "tf.exp(x)": 0.0045662100456621,
                "tf.expand_dims(input, axis)": 0.0091324200913242,
                "tf.eye(num_rows)": 0.0045662100456621,
                "tf.eye(num_rows, num_columns)": 0.0045662100456621,
                "tf.eye(num_rows, dtype)": 0.0045662100456621,
                "tf.fill(dims, value)": 0.0045662100456621,
                "tf.gather(params, indices)": 0.0045662100456621,
                "tf.gather(params, indices, axis, batch_dims)": 0.0045662100456621,
                "tf.gather_nd(params, indices)": 0.0045662100456621,
                "tf.gather_nd(params, indices, batch_dims)": 0.0045662100456621,
                "tf.greater(x, y)": 0.0045662100456621,
                "tf.greater_equal(x, y)": 0.0045662100456621,
                "tf.math.bincount(arr)": 0.0045662100456621,
                "tf.math.ceil(x)": 0.0045662100456621,
                "tf.math.count_nonzero(input)": 0.0045662100456621,
                "tf.math.count_nonzero(input, axis)": 0.0045662100456621,
                "tf.math.cumsum(x, axis)": 0.0045662100456621,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0045662100456621,
                "tf.math.divide_no_nan(x, y)": 0.0045662100456621,
                "tf.math.floor(x)": 0.0045662100456621,
                "tf.math.log(x)": 0.0045662100456621,
                "tf.math.logical_and(x, y)": 0.0045662100456621,
                "tf.math.logical_not(x)": 0.0045662100456621,
                "tf.math.logical_or(x, y)": 0.0045662100456621,
                "tf.math.logical_xor(x, y)": 0.0045662100456621,
                "tf.math.negative(x)": 0.0045662100456621,
                "tf.math.reciprocal(x)": 0.0045662100456621,
                "tf.math.reciprocal_no_nan(x)": 0.0045662100456621,
                "tf.math.segment_max(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_mean(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_min(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_prod(data, segment_ids)": 0.0045662100456621,
                "tf.math.segment_sum(data, segment_ids)": 0.0045662100456621,
                "tf.math.squared_difference(x, y)": 0.0045662100456621,
                "tf.math.top_k(input, k)": 0.0045662100456621,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0045662100456621,
                "tf.matmul(a, b)": 0.0091324200913242,
                "tf.maximum(x, y)": 0.0045662100456621,
                "tf.minimum(x, y)": 0.0045662100456621,
                "tf.multiply(x, y)": 0.0136986301369863,
                "tf.not_equal(x, y)": 0.0045662100456621,
                "tf.one_hot(indices, depth)": 0.0045662100456621,
                "tf.ones(shape)": 0.0045662100456621,
                "tf.ones_like(input)": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0045662100456621,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0045662100456621,
                "tf.range(start)": 0.0045662100456621,
                "tf.range(start, limit, delta)": 0.0045662100456621,
                "tf.reduce_any(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_all(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_max(input_tensor)": 0.0045662100456621,
                "tf.reduce_max(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_mean(input_tensor)": 0.0045662100456621,
                "tf.reduce_mean(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_min(input_tensor)": 0.0045662100456621,
                "tf.reduce_min(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_prod(input_tensor, axis)": 0.0045662100456621,
                "tf.reduce_sum(input_tensor)": 0.0045662100456621,
                "tf.reduce_sum(input_tensor, axis)": 0.0091324200913242,
                "tf.repeat(input, repeats)": 0.0045662100456621,
                "tf.repeat(input, repeats, axis)": 0.0045662100456621,
                "tf.reshape(tensor, shape)": 0.0091324200913242,
                "tf.reverse(tensor, axis)": 0.0045662100456621,
                "tf.roll(input, shift, axis)": 0.0045662100456621,
                "tf.round(x)": 0.0045662100456621,
                "tf.scatter_nd(indices, updates, shape)": 0.0045662100456621,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0045662100456621,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0045662100456621,
                "tf.sequence_mask(lengths)": 0.0045662100456621,
                "tf.sequence_mask(lengths, maxlen)": 0.0045662100456621,
                "tf.shape(input)": 0.0045662100456621,
                "tf.sign(x)": 0.0045662100456621,
                "tf.sort(values, axis)": 0.0045662100456621,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0045662100456621,
                "tf.sqrt(x)": 0.0045662100456621,
                "tf.square(x)": 0.0045662100456621,
                "tf.squeeze(input)": 0.0045662100456621,
                "tf.squeeze(input, axis)": 0.0045662100456621,
                "tf.stack(values, axis)": 0.0045662100456621,
                "tf.subtract(x, y)": 0.0045662100456621,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0045662100456621,
                "tf.tensordot(a, b, axes)": 0.0365296803652968,
                "tf.tile(input, multiples)": 0.0045662100456621,
                "tf.transpose(a)": 0.0045662100456621,
                "tf.transpose(a, perm)": 0.0045662100456621,
                "tf.unique_with_counts(x)": 0.0045662100456621,
                "tf.unstack(value, axis)": 0.0045662100456621,
                "tf.where(condition)": 0.0045662100456621,
                "tf.where(condition, x, y)": 0.0045662100456621,
                "tf.zeros(shape)": 0.0045662100456621,
                "tf.zeros_like(input)": 0.0045662100456621,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0045662100456621,
                "tf.sparse.add(a, b)": 0.0045662100456621,
                "tf.sparse.concat(axis, sp_inputs)": 0.0045662100456621,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0045662100456621,
                "tf.sparse.from_dense(tensor)": 0.0045662100456621,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0045662100456621,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0045662100456621,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0045662100456621,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0045662100456621,
                "tf.sparse.reset_shape(sp_input)": 0.0045662100456621,
                "tf.sparse.reshape(sp_input, shape)": 0.0045662100456621,
                "tf.sparse.retain(sp_input, to_retain)": 0.0045662100456621,
                "tf.sparse.slice(sp_input, start, size)": 0.0045662100456621,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0045662100456621,
                "tf.sparse.to_dense(sp_input)": 0.0045662100456621,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0045662100456621,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0045662100456621,
                "tf.sparse.transpose(sp_input)": 0.0045662100456621,
                "tf.sparse.transpose(sp_input, perm)": 0.0045662100456621,
                "IndexingAxis1Operation": 0.0045662100456621,
                "IndexingOperation": 0.0045662100456621,
                "PairCreationOperation": 0.0045662100456621,
                "SingletonTupleCreationOperation": 0.0045662100456621,
                "SlicingAxis0BothOperation": 0.0045662100456621,
                "SlicingAxis0LeftOperation": 0.0045662100456621,
                "SlicingAxis0RightOperation": 0.0045662100456621,
                "SlicingAxis1BothOperation": 0.0045662100456621,
                "SlicingAxis1LeftOperation": 0.0045662100456621,
                "SlicingAxis1RightOperation": 0.0045662100456621,
                "TripleCreationOperation": 0.0045662100456621,
                "PROVIDED_CONSTANT_WEIGHT": 0.0045662100456621,
                "COMMON_CONSTANT_WEIGHT": 0.045662100456621,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0045662100456621,
                "INPUT_VARIABLE_WEIGHT": 0.1415525114155251,
                "AXIS_CONSTANT_WEIGHT": 0.0136986301369863,
                "SHAPE_CONSTANT_WEIGHT": 0.0091324200913242,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0045662100456621,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0045662100456621
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 4,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 6,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_19",
        "description": "(\\'sort a tensor considering the first column, breaking ties using the second column\\')",
        "target_program": "tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))",
        "source": "https://stackoverflow.com/questions/49399198/sort-a-tensor-based-on-two-columns-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]],]",
            "outputs": "[[0, 5, 1],    [1, 0, 4],    [1, 1, 2],    [1, 2, 3],    [2, 1, 0],    [2, 3, 1],    [3, 1, 2]]"
        },
        "completions": [
            "return tf.gather(in1, tf.argsort(tf.transpose(in1), axis=1)[:, 0])",
            "return tf.gather(in1, tf.argsort(in1[:, 0], axis=0))\n",
            "return tf.gather(params=in1, indices=tf.argsort(tf.transpose(in1), axis=1))\n",
            "sorted_indices = tf.argsort(in1[:, 0])\nsorted_in1 = tf.gather(in1, sorted_indices)\nsecond_sort_indices = tf.argsort(sorted_in1[:, 1])\nsorted_in1 = tf.gather(sorted_in1, second_sort_indices)\nreturn sorted_in1\n",
            "return tf.argsort(in1[:, 1:], axis=0, stable=True, direction='ASCENDING') + tf.math.cumsum(tf.ones_like(in1[:, 1:]), axis=0)\n",
            "return tf.gather(params=in1, indices=tf.argsort(in1[:, 1]), axis=0)\n",
            "return  tf.gather(in1, tf.argsort(in1[:, 0], stable=True))",
            "return tf.gather(in1, tf.argsort(in1[:, 0], stable=True))\n",
            "out = tf.gather(in1, tf.argsort(tf.stack([in1[:, 0], in1[:, 1]], axis=1)))\nreturn out\n",
            "return tf.gather(in1, tf.argsort(in1[:, 1], stable=True))"
        ],
        "tf_operators": {
            "tf.transpose": 2,
            "tf.gather": 9,
            "tf.argsort": 10,
            "tf.math.cumsum": 1,
            "tf.ones_like": 1,
            "tf.stack": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1,
                0
            ],
            [
                0,
                0
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1,
                0,
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [
                0,
                1,
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 5,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 13,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004291845493562232,
                "tf.add(x, y)": 0.004291845493562232,
                "tf.add_n(inputs)": 0.004291845493562232,
                "tf.argmax(input, axis)": 0.004291845493562232,
                "tf.argmin(input, axis)": 0.004291845493562232,
                "tf.argsort(values, axis, stable=True)": 0.030042918454935622,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004291845493562232,
                "tf.boolean_mask(tensor, mask)": 0.004291845493562232,
                "tf.broadcast_to(input, shape)": 0.004291845493562232,
                "tf.cast(x, dtype)": 0.004291845493562232,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004291845493562232,
                "tf.concat(values, axis)": 0.004291845493562232,
                "tf.constant(value)": 0.004291845493562232,
                "tf.constant(value, dtype)": 0.004291845493562232,
                "tf.divide(x, y)": 0.004291845493562232,
                "tf.equal(x, y)": 0.004291845493562232,
                "tf.exp(x)": 0.004291845493562232,
                "tf.expand_dims(input, axis)": 0.004291845493562232,
                "tf.eye(num_rows)": 0.004291845493562232,
                "tf.eye(num_rows, num_columns)": 0.004291845493562232,
                "tf.eye(num_rows, dtype)": 0.004291845493562232,
                "tf.fill(dims, value)": 0.004291845493562232,
                "tf.gather(params, indices)": 0.03862660944206009,
                "tf.gather(params, indices, axis, batch_dims)": 0.008583690987124463,
                "tf.gather_nd(params, indices)": 0.004291845493562232,
                "tf.gather_nd(params, indices, batch_dims)": 0.004291845493562232,
                "tf.greater(x, y)": 0.004291845493562232,
                "tf.greater_equal(x, y)": 0.004291845493562232,
                "tf.math.bincount(arr)": 0.004291845493562232,
                "tf.math.ceil(x)": 0.004291845493562232,
                "tf.math.count_nonzero(input)": 0.004291845493562232,
                "tf.math.count_nonzero(input, axis)": 0.004291845493562232,
                "tf.math.cumsum(x, axis)": 0.004291845493562232,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.008583690987124463,
                "tf.math.divide_no_nan(x, y)": 0.004291845493562232,
                "tf.math.floor(x)": 0.004291845493562232,
                "tf.math.log(x)": 0.004291845493562232,
                "tf.math.logical_and(x, y)": 0.004291845493562232,
                "tf.math.logical_not(x)": 0.004291845493562232,
                "tf.math.logical_or(x, y)": 0.004291845493562232,
                "tf.math.logical_xor(x, y)": 0.004291845493562232,
                "tf.math.negative(x)": 0.004291845493562232,
                "tf.math.reciprocal(x)": 0.004291845493562232,
                "tf.math.reciprocal_no_nan(x)": 0.004291845493562232,
                "tf.math.segment_max(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_mean(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_min(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_prod(data, segment_ids)": 0.004291845493562232,
                "tf.math.segment_sum(data, segment_ids)": 0.004291845493562232,
                "tf.math.squared_difference(x, y)": 0.004291845493562232,
                "tf.math.top_k(input, k)": 0.004291845493562232,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004291845493562232,
                "tf.matmul(a, b)": 0.004291845493562232,
                "tf.maximum(x, y)": 0.004291845493562232,
                "tf.minimum(x, y)": 0.004291845493562232,
                "tf.multiply(x, y)": 0.004291845493562232,
                "tf.not_equal(x, y)": 0.004291845493562232,
                "tf.one_hot(indices, depth)": 0.004291845493562232,
                "tf.ones(shape)": 0.004291845493562232,
                "tf.ones_like(input)": 0.008583690987124463,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004291845493562232,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004291845493562232,
                "tf.range(start)": 0.004291845493562232,
                "tf.range(start, limit, delta)": 0.004291845493562232,
                "tf.reduce_any(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_all(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_max(input_tensor)": 0.004291845493562232,
                "tf.reduce_max(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_mean(input_tensor)": 0.004291845493562232,
                "tf.reduce_mean(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_min(input_tensor)": 0.004291845493562232,
                "tf.reduce_min(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_prod(input_tensor, axis)": 0.004291845493562232,
                "tf.reduce_sum(input_tensor)": 0.004291845493562232,
                "tf.reduce_sum(input_tensor, axis)": 0.004291845493562232,
                "tf.repeat(input, repeats)": 0.004291845493562232,
                "tf.repeat(input, repeats, axis)": 0.004291845493562232,
                "tf.reshape(tensor, shape)": 0.004291845493562232,
                "tf.reverse(tensor, axis)": 0.004291845493562232,
                "tf.roll(input, shift, axis)": 0.004291845493562232,
                "tf.round(x)": 0.004291845493562232,
                "tf.scatter_nd(indices, updates, shape)": 0.004291845493562232,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004291845493562232,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004291845493562232,
                "tf.sequence_mask(lengths)": 0.004291845493562232,
                "tf.sequence_mask(lengths, maxlen)": 0.004291845493562232,
                "tf.shape(input)": 0.004291845493562232,
                "tf.sign(x)": 0.004291845493562232,
                "tf.sort(values, axis)": 0.004291845493562232,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004291845493562232,
                "tf.sqrt(x)": 0.004291845493562232,
                "tf.square(x)": 0.004291845493562232,
                "tf.squeeze(input)": 0.004291845493562232,
                "tf.squeeze(input, axis)": 0.004291845493562232,
                "tf.stack(values, axis)": 0.008583690987124463,
                "tf.subtract(x, y)": 0.004291845493562232,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004291845493562232,
                "tf.tensordot(a, b, axes)": 0.004291845493562232,
                "tf.tile(input, multiples)": 0.004291845493562232,
                "tf.transpose(a)": 0.012875536480686695,
                "tf.transpose(a, perm)": 0.004291845493562232,
                "tf.unique_with_counts(x)": 0.004291845493562232,
                "tf.unstack(value, axis)": 0.004291845493562232,
                "tf.where(condition)": 0.004291845493562232,
                "tf.where(condition, x, y)": 0.004291845493562232,
                "tf.zeros(shape)": 0.004291845493562232,
                "tf.zeros_like(input)": 0.004291845493562232,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004291845493562232,
                "tf.sparse.add(a, b)": 0.004291845493562232,
                "tf.sparse.concat(axis, sp_inputs)": 0.004291845493562232,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004291845493562232,
                "tf.sparse.from_dense(tensor)": 0.004291845493562232,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004291845493562232,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004291845493562232,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004291845493562232,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004291845493562232,
                "tf.sparse.reset_shape(sp_input)": 0.004291845493562232,
                "tf.sparse.reshape(sp_input, shape)": 0.004291845493562232,
                "tf.sparse.retain(sp_input, to_retain)": 0.004291845493562232,
                "tf.sparse.slice(sp_input, start, size)": 0.004291845493562232,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004291845493562232,
                "tf.sparse.to_dense(sp_input)": 0.004291845493562232,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004291845493562232,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004291845493562232,
                "tf.sparse.transpose(sp_input)": 0.004291845493562232,
                "tf.sparse.transpose(sp_input, perm)": 0.004291845493562232,
                "IndexingAxis1Operation": 0.04721030042918455,
                "IndexingOperation": 0.004291845493562232,
                "PairCreationOperation": 0.055793991416309016,
                "SingletonTupleCreationOperation": 0.004291845493562232,
                "SlicingAxis0BothOperation": 0.004291845493562232,
                "SlicingAxis0LeftOperation": 0.004291845493562232,
                "SlicingAxis0RightOperation": 0.004291845493562232,
                "SlicingAxis1BothOperation": 0.004291845493562232,
                "SlicingAxis1LeftOperation": 0.012875536480686695,
                "SlicingAxis1RightOperation": 0.004291845493562232,
                "TripleCreationOperation": 0.004291845493562232,
                "PROVIDED_CONSTANT_WEIGHT": 0.004291845493562232,
                "COMMON_CONSTANT_WEIGHT": 0.060085836909871244,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004291845493562232,
                "INPUT_VARIABLE_WEIGHT": 0.0944206008583691,
                "AXIS_CONSTANT_WEIGHT": 0.004291845493562232,
                "SHAPE_CONSTANT_WEIGHT": 0.004291845493562232,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004291845493562232,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004291845493562232
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 5,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 5,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 6,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 4,
                "IndexingOperation": 8,
                "PairCreationOperation": 4,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 6,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_20",
        "description": "compute argmax in each tensor and set it to 1",
        "target_program": "tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)",
        "source": "https://stackoverflow.com/questions/44834739/argmax-on-a-tensor-and-ceiling-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]],]",
            "outputs": "[[1, 0, 0],    [0, 1, 0],    [1, 0, 0],    [0, 1, 0],    [0, 0, 1]]"
        },
        "completions": [
            "def transform(in1):\n    indices = tf.argmax(in1, axis=1)\n    updates = tf.one_hot(indices, tf.shape(in1)[1])\n    return tf.tensor_scatter_nd_update(tf.zeros_like(in1), tf.expand_dims(indices, axis=1), updates)\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.shape(in1)[1]), tf.int32)\n",
            "def transform(in1):\n    argmax_indices = tf.argmax(in1, axis=1)\n    one_hot = tf.one_hot(argmax_indices, in1.shape[1])\n    return one_hot\n",
            "return tf.one_hot(tf.argmax(in1, axis=1), depth=in1.shape[1])\n",
            "return tf.cast(tf.eye(tf.argmax(in1, axis=1) + 1, depth=in1.shape[1]), tf.int32)\n",
            "return tf.cast(tf.one_hot(tf.argmax(in1, axis=1), tf.int32), tf.int32)\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n",
            "max_indices = tf.argmax(in1, axis=1)\nreturn tf.one_hot(max_indices, depth=tf.shape(in1)[1])\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1, axis=1, keepdims=True)), tf.int32)\n"
        ],
        "tf_operators": {
            "tf.one_hot": 7,
            "tf.tensor_scatter_nd_update": 1,
            "tf.shape": 3,
            "tf.zeros_like": 1,
            "tf.expand_dims": 1,
            "tf.argmax": 8,
            "tf.cast": 5,
            "tf.int32": 5,
            "tf.eye": 1,
            "tf.reduce_max": 2,
            "tf.equal": 2
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 8,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 21,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 6
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0041841004184100415,
                "tf.add(x, y)": 0.0041841004184100415,
                "tf.add_n(inputs)": 0.0041841004184100415,
                "tf.argmax(input, axis)": 0.03765690376569038,
                "tf.argmin(input, axis)": 0.0041841004184100415,
                "tf.argsort(values, axis, stable=True)": 0.0041841004184100415,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0041841004184100415,
                "tf.boolean_mask(tensor, mask)": 0.0041841004184100415,
                "tf.broadcast_to(input, shape)": 0.0041841004184100415,
                "tf.cast(x, dtype)": 0.02510460251046025,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0041841004184100415,
                "tf.concat(values, axis)": 0.0041841004184100415,
                "tf.constant(value)": 0.0041841004184100415,
                "tf.constant(value, dtype)": 0.0041841004184100415,
                "tf.divide(x, y)": 0.0041841004184100415,
                "tf.equal(x, y)": 0.012552301255230125,
                "tf.exp(x)": 0.0041841004184100415,
                "tf.expand_dims(input, axis)": 0.008368200836820083,
                "tf.eye(num_rows)": 0.0041841004184100415,
                "tf.eye(num_rows, num_columns)": 0.008368200836820083,
                "tf.eye(num_rows, dtype)": 0.0041841004184100415,
                "tf.fill(dims, value)": 0.0041841004184100415,
                "tf.gather(params, indices)": 0.0041841004184100415,
                "tf.gather(params, indices, axis, batch_dims)": 0.0041841004184100415,
                "tf.gather_nd(params, indices)": 0.0041841004184100415,
                "tf.gather_nd(params, indices, batch_dims)": 0.0041841004184100415,
                "tf.greater(x, y)": 0.0041841004184100415,
                "tf.greater_equal(x, y)": 0.0041841004184100415,
                "tf.math.bincount(arr)": 0.0041841004184100415,
                "tf.math.ceil(x)": 0.0041841004184100415,
                "tf.math.count_nonzero(input)": 0.0041841004184100415,
                "tf.math.count_nonzero(input, axis)": 0.0041841004184100415,
                "tf.math.cumsum(x, axis)": 0.0041841004184100415,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0041841004184100415,
                "tf.math.divide_no_nan(x, y)": 0.0041841004184100415,
                "tf.math.floor(x)": 0.0041841004184100415,
                "tf.math.log(x)": 0.0041841004184100415,
                "tf.math.logical_and(x, y)": 0.0041841004184100415,
                "tf.math.logical_not(x)": 0.0041841004184100415,
                "tf.math.logical_or(x, y)": 0.0041841004184100415,
                "tf.math.logical_xor(x, y)": 0.0041841004184100415,
                "tf.math.negative(x)": 0.0041841004184100415,
                "tf.math.reciprocal(x)": 0.0041841004184100415,
                "tf.math.reciprocal_no_nan(x)": 0.0041841004184100415,
                "tf.math.segment_max(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_mean(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_min(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_prod(data, segment_ids)": 0.0041841004184100415,
                "tf.math.segment_sum(data, segment_ids)": 0.0041841004184100415,
                "tf.math.squared_difference(x, y)": 0.0041841004184100415,
                "tf.math.top_k(input, k)": 0.0041841004184100415,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0041841004184100415,
                "tf.matmul(a, b)": 0.0041841004184100415,
                "tf.maximum(x, y)": 0.0041841004184100415,
                "tf.minimum(x, y)": 0.0041841004184100415,
                "tf.multiply(x, y)": 0.0041841004184100415,
                "tf.not_equal(x, y)": 0.0041841004184100415,
                "tf.one_hot(indices, depth)": 0.03347280334728033,
                "tf.ones(shape)": 0.0041841004184100415,
                "tf.ones_like(input)": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0041841004184100415,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0041841004184100415,
                "tf.range(start)": 0.0041841004184100415,
                "tf.range(start, limit, delta)": 0.0041841004184100415,
                "tf.reduce_any(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_all(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_max(input_tensor)": 0.0041841004184100415,
                "tf.reduce_max(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_mean(input_tensor)": 0.0041841004184100415,
                "tf.reduce_mean(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_min(input_tensor)": 0.0041841004184100415,
                "tf.reduce_min(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_prod(input_tensor, axis)": 0.0041841004184100415,
                "tf.reduce_sum(input_tensor)": 0.0041841004184100415,
                "tf.reduce_sum(input_tensor, axis)": 0.0041841004184100415,
                "tf.repeat(input, repeats)": 0.0041841004184100415,
                "tf.repeat(input, repeats, axis)": 0.0041841004184100415,
                "tf.reshape(tensor, shape)": 0.0041841004184100415,
                "tf.reverse(tensor, axis)": 0.0041841004184100415,
                "tf.roll(input, shift, axis)": 0.0041841004184100415,
                "tf.round(x)": 0.0041841004184100415,
                "tf.scatter_nd(indices, updates, shape)": 0.0041841004184100415,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0041841004184100415,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0041841004184100415,
                "tf.sequence_mask(lengths)": 0.0041841004184100415,
                "tf.sequence_mask(lengths, maxlen)": 0.0041841004184100415,
                "tf.shape(input)": 0.016736401673640166,
                "tf.sign(x)": 0.0041841004184100415,
                "tf.sort(values, axis)": 0.0041841004184100415,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0041841004184100415,
                "tf.sqrt(x)": 0.0041841004184100415,
                "tf.square(x)": 0.0041841004184100415,
                "tf.squeeze(input)": 0.0041841004184100415,
                "tf.squeeze(input, axis)": 0.0041841004184100415,
                "tf.stack(values, axis)": 0.0041841004184100415,
                "tf.subtract(x, y)": 0.0041841004184100415,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.008368200836820083,
                "tf.tensordot(a, b, axes)": 0.0041841004184100415,
                "tf.tile(input, multiples)": 0.0041841004184100415,
                "tf.transpose(a)": 0.0041841004184100415,
                "tf.transpose(a, perm)": 0.0041841004184100415,
                "tf.unique_with_counts(x)": 0.0041841004184100415,
                "tf.unstack(value, axis)": 0.0041841004184100415,
                "tf.where(condition)": 0.0041841004184100415,
                "tf.where(condition, x, y)": 0.0041841004184100415,
                "tf.zeros(shape)": 0.0041841004184100415,
                "tf.zeros_like(input)": 0.008368200836820083,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0041841004184100415,
                "tf.sparse.add(a, b)": 0.0041841004184100415,
                "tf.sparse.concat(axis, sp_inputs)": 0.0041841004184100415,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0041841004184100415,
                "tf.sparse.from_dense(tensor)": 0.0041841004184100415,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0041841004184100415,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0041841004184100415,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0041841004184100415,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0041841004184100415,
                "tf.sparse.reset_shape(sp_input)": 0.0041841004184100415,
                "tf.sparse.reshape(sp_input, shape)": 0.0041841004184100415,
                "tf.sparse.retain(sp_input, to_retain)": 0.0041841004184100415,
                "tf.sparse.slice(sp_input, start, size)": 0.0041841004184100415,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0041841004184100415,
                "tf.sparse.to_dense(sp_input)": 0.0041841004184100415,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0041841004184100415,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0041841004184100415,
                "tf.sparse.transpose(sp_input)": 0.0041841004184100415,
                "tf.sparse.transpose(sp_input, perm)": 0.0041841004184100415,
                "IndexingAxis1Operation": 0.0041841004184100415,
                "IndexingOperation": 0.03347280334728033,
                "PairCreationOperation": 0.0041841004184100415,
                "SingletonTupleCreationOperation": 0.0041841004184100415,
                "SlicingAxis0BothOperation": 0.0041841004184100415,
                "SlicingAxis0LeftOperation": 0.0041841004184100415,
                "SlicingAxis0RightOperation": 0.0041841004184100415,
                "SlicingAxis1BothOperation": 0.0041841004184100415,
                "SlicingAxis1LeftOperation": 0.0041841004184100415,
                "SlicingAxis1RightOperation": 0.0041841004184100415,
                "TripleCreationOperation": 0.0041841004184100415,
                "PROVIDED_CONSTANT_WEIGHT": 0.0041841004184100415,
                "COMMON_CONSTANT_WEIGHT": 0.09205020920502092,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0041841004184100415,
                "INPUT_VARIABLE_WEIGHT": 0.09205020920502092,
                "AXIS_CONSTANT_WEIGHT": 0.0041841004184100415,
                "SHAPE_CONSTANT_WEIGHT": 0.0041841004184100415,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.029288702928870293,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0041841004184100415,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0041841004184100415
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 5,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 5,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_21",
        "description": "gather elements in a tensor along axis 1",
        "target_program": "tf.gather(in2, in1, axis=1, batch_dims=1)",
        "source": "https://stackoverflow.com/questions/51690095/how-to-gather-element-with-index-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[2], [0], [1], [0]],[[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]],]",
            "outputs": "[[0.3], [0.1], [0.6], [0.7]]"
        },
        "completions": [
            "output = tf.gather_nd(in2, in1)\nreturn output\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))\n",
            "return tf.gather(in2, in1, axis=1)\n  ",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, tf.expand_dims(in1, axis=1))",
            "return tf.gather_nd(in2, in1)",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, in1)\n",
            "return tf.gather_nd(in2, tf.expand_dims(in1, 1))"
        ],
        "tf_operators": {
            "tf.gather_nd": 9,
            "tf.expand_dims": 3,
            "tf.gather": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 4,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005208333333333333,
                "tf.add(x, y)": 0.005208333333333333,
                "tf.add_n(inputs)": 0.005208333333333333,
                "tf.argmax(input, axis)": 0.005208333333333333,
                "tf.argmin(input, axis)": 0.005208333333333333,
                "tf.argsort(values, axis, stable=True)": 0.005208333333333333,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005208333333333333,
                "tf.boolean_mask(tensor, mask)": 0.005208333333333333,
                "tf.broadcast_to(input, shape)": 0.005208333333333333,
                "tf.cast(x, dtype)": 0.005208333333333333,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005208333333333333,
                "tf.concat(values, axis)": 0.005208333333333333,
                "tf.constant(value)": 0.005208333333333333,
                "tf.constant(value, dtype)": 0.005208333333333333,
                "tf.divide(x, y)": 0.005208333333333333,
                "tf.equal(x, y)": 0.005208333333333333,
                "tf.exp(x)": 0.005208333333333333,
                "tf.expand_dims(input, axis)": 0.020833333333333332,
                "tf.eye(num_rows)": 0.005208333333333333,
                "tf.eye(num_rows, num_columns)": 0.005208333333333333,
                "tf.eye(num_rows, dtype)": 0.005208333333333333,
                "tf.fill(dims, value)": 0.005208333333333333,
                "tf.gather(params, indices)": 0.005208333333333333,
                "tf.gather(params, indices, axis, batch_dims)": 0.010416666666666666,
                "tf.gather_nd(params, indices)": 0.052083333333333336,
                "tf.gather_nd(params, indices, batch_dims)": 0.005208333333333333,
                "tf.greater(x, y)": 0.005208333333333333,
                "tf.greater_equal(x, y)": 0.005208333333333333,
                "tf.math.bincount(arr)": 0.005208333333333333,
                "tf.math.ceil(x)": 0.005208333333333333,
                "tf.math.count_nonzero(input)": 0.005208333333333333,
                "tf.math.count_nonzero(input, axis)": 0.005208333333333333,
                "tf.math.cumsum(x, axis)": 0.005208333333333333,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005208333333333333,
                "tf.math.divide_no_nan(x, y)": 0.005208333333333333,
                "tf.math.floor(x)": 0.005208333333333333,
                "tf.math.log(x)": 0.005208333333333333,
                "tf.math.logical_and(x, y)": 0.005208333333333333,
                "tf.math.logical_not(x)": 0.005208333333333333,
                "tf.math.logical_or(x, y)": 0.005208333333333333,
                "tf.math.logical_xor(x, y)": 0.005208333333333333,
                "tf.math.negative(x)": 0.005208333333333333,
                "tf.math.reciprocal(x)": 0.005208333333333333,
                "tf.math.reciprocal_no_nan(x)": 0.005208333333333333,
                "tf.math.segment_max(data, segment_ids)": 0.005208333333333333,
                "tf.math.segment_mean(data, segment_ids)": 0.005208333333333333,
                "tf.math.segment_min(data, segment_ids)": 0.005208333333333333,
                "tf.math.segment_prod(data, segment_ids)": 0.005208333333333333,
                "tf.math.segment_sum(data, segment_ids)": 0.005208333333333333,
                "tf.math.squared_difference(x, y)": 0.005208333333333333,
                "tf.math.top_k(input, k)": 0.005208333333333333,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005208333333333333,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005208333333333333,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005208333333333333,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005208333333333333,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005208333333333333,
                "tf.matmul(a, b)": 0.005208333333333333,
                "tf.maximum(x, y)": 0.005208333333333333,
                "tf.minimum(x, y)": 0.005208333333333333,
                "tf.multiply(x, y)": 0.005208333333333333,
                "tf.not_equal(x, y)": 0.005208333333333333,
                "tf.one_hot(indices, depth)": 0.005208333333333333,
                "tf.ones(shape)": 0.005208333333333333,
                "tf.ones_like(input)": 0.005208333333333333,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005208333333333333,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005208333333333333,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005208333333333333,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005208333333333333,
                "tf.range(start)": 0.005208333333333333,
                "tf.range(start, limit, delta)": 0.005208333333333333,
                "tf.reduce_any(input_tensor, axis)": 0.005208333333333333,
                "tf.reduce_all(input_tensor, axis)": 0.005208333333333333,
                "tf.reduce_max(input_tensor)": 0.005208333333333333,
                "tf.reduce_max(input_tensor, axis)": 0.005208333333333333,
                "tf.reduce_mean(input_tensor)": 0.005208333333333333,
                "tf.reduce_mean(input_tensor, axis)": 0.005208333333333333,
                "tf.reduce_min(input_tensor)": 0.005208333333333333,
                "tf.reduce_min(input_tensor, axis)": 0.005208333333333333,
                "tf.reduce_prod(input_tensor, axis)": 0.005208333333333333,
                "tf.reduce_sum(input_tensor)": 0.005208333333333333,
                "tf.reduce_sum(input_tensor, axis)": 0.005208333333333333,
                "tf.repeat(input, repeats)": 0.005208333333333333,
                "tf.repeat(input, repeats, axis)": 0.005208333333333333,
                "tf.reshape(tensor, shape)": 0.005208333333333333,
                "tf.reverse(tensor, axis)": 0.005208333333333333,
                "tf.roll(input, shift, axis)": 0.005208333333333333,
                "tf.round(x)": 0.005208333333333333,
                "tf.scatter_nd(indices, updates, shape)": 0.005208333333333333,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005208333333333333,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005208333333333333,
                "tf.sequence_mask(lengths)": 0.005208333333333333,
                "tf.sequence_mask(lengths, maxlen)": 0.005208333333333333,
                "tf.shape(input)": 0.005208333333333333,
                "tf.sign(x)": 0.005208333333333333,
                "tf.sort(values, axis)": 0.005208333333333333,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005208333333333333,
                "tf.sqrt(x)": 0.005208333333333333,
                "tf.square(x)": 0.005208333333333333,
                "tf.squeeze(input)": 0.005208333333333333,
                "tf.squeeze(input, axis)": 0.005208333333333333,
                "tf.stack(values, axis)": 0.005208333333333333,
                "tf.subtract(x, y)": 0.005208333333333333,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005208333333333333,
                "tf.tensordot(a, b, axes)": 0.005208333333333333,
                "tf.tile(input, multiples)": 0.005208333333333333,
                "tf.transpose(a)": 0.005208333333333333,
                "tf.transpose(a, perm)": 0.005208333333333333,
                "tf.unique_with_counts(x)": 0.005208333333333333,
                "tf.unstack(value, axis)": 0.005208333333333333,
                "tf.where(condition)": 0.005208333333333333,
                "tf.where(condition, x, y)": 0.005208333333333333,
                "tf.zeros(shape)": 0.005208333333333333,
                "tf.zeros_like(input)": 0.005208333333333333,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005208333333333333,
                "tf.sparse.add(a, b)": 0.005208333333333333,
                "tf.sparse.concat(axis, sp_inputs)": 0.005208333333333333,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005208333333333333,
                "tf.sparse.from_dense(tensor)": 0.005208333333333333,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005208333333333333,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005208333333333333,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005208333333333333,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005208333333333333,
                "tf.sparse.reset_shape(sp_input)": 0.005208333333333333,
                "tf.sparse.reshape(sp_input, shape)": 0.005208333333333333,
                "tf.sparse.retain(sp_input, to_retain)": 0.005208333333333333,
                "tf.sparse.slice(sp_input, start, size)": 0.005208333333333333,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005208333333333333,
                "tf.sparse.to_dense(sp_input)": 0.005208333333333333,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005208333333333333,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005208333333333333,
                "tf.sparse.transpose(sp_input)": 0.005208333333333333,
                "tf.sparse.transpose(sp_input, perm)": 0.005208333333333333,
                "IndexingAxis1Operation": 0.005208333333333333,
                "IndexingOperation": 0.005208333333333333,
                "PairCreationOperation": 0.005208333333333333,
                "SingletonTupleCreationOperation": 0.005208333333333333,
                "SlicingAxis0BothOperation": 0.005208333333333333,
                "SlicingAxis0LeftOperation": 0.005208333333333333,
                "SlicingAxis0RightOperation": 0.005208333333333333,
                "SlicingAxis1BothOperation": 0.005208333333333333,
                "SlicingAxis1LeftOperation": 0.005208333333333333,
                "SlicingAxis1RightOperation": 0.005208333333333333,
                "TripleCreationOperation": 0.005208333333333333,
                "PROVIDED_CONSTANT_WEIGHT": 0.005208333333333333,
                "COMMON_CONSTANT_WEIGHT": 0.026041666666666668,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005208333333333333,
                "INPUT_VARIABLE_WEIGHT": 0.109375,
                "AXIS_CONSTANT_WEIGHT": 0.005208333333333333,
                "SHAPE_CONSTANT_WEIGHT": 0.005208333333333333,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005208333333333333,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005208333333333333,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005208333333333333,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005208333333333333,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005208333333333333
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 4,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_22",
        "description": "multiply a vector with a matrix without reshaping the vector",
        "target_program": "tf.tensordot(tf.cast(in1, tf.float32), in2, 1)",
        "source": "https://stackoverflow.com/questions/43284897/how-can-i-multiply-a-vector-and-a-matrix-in-tensorflow-without-reshaping",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 1, 10],[[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]],]",
            "outputs": "[32.3, 42.2]"
        },
        "completions": [
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.matmul(in1, in2)\n",
            "return tf.reduce_sum(tf.multiply(tf.repeat(tf.expand_dims(in1, 1), tf.shape(in2)[1], axis=1), in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 0)), axis=1)",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.reduce_sum(tf.multiply(in1, in2), axis=1)\n",
            "return tf.tensordot(in2, in1, axes=1)\n",
            "return tf.tensordot(in2, in1, axes=1)",
            "return tf.tensordot(in1, in2, 1)"
        ],
        "tf_operators": {
            "tf.reduce_sum": 5,
            "tf.multiply": 5,
            "tf.matmul": 1,
            "tf.repeat": 1,
            "tf.shape": 1,
            "tf.expand_dims": 2,
            "tf.tensordot": 4
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1
            ],
            [],
            [
                1,
                1,
                1,
                1
            ],
            [
                1
            ],
            [
                0,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 13,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0049261083743842365,
                "tf.add(x, y)": 0.0049261083743842365,
                "tf.add_n(inputs)": 0.0049261083743842365,
                "tf.argmax(input, axis)": 0.0049261083743842365,
                "tf.argmin(input, axis)": 0.0049261083743842365,
                "tf.argsort(values, axis, stable=True)": 0.0049261083743842365,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0049261083743842365,
                "tf.boolean_mask(tensor, mask)": 0.0049261083743842365,
                "tf.broadcast_to(input, shape)": 0.0049261083743842365,
                "tf.cast(x, dtype)": 0.0049261083743842365,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0049261083743842365,
                "tf.concat(values, axis)": 0.0049261083743842365,
                "tf.constant(value)": 0.0049261083743842365,
                "tf.constant(value, dtype)": 0.0049261083743842365,
                "tf.divide(x, y)": 0.0049261083743842365,
                "tf.equal(x, y)": 0.0049261083743842365,
                "tf.exp(x)": 0.0049261083743842365,
                "tf.expand_dims(input, axis)": 0.014778325123152709,
                "tf.eye(num_rows)": 0.0049261083743842365,
                "tf.eye(num_rows, num_columns)": 0.0049261083743842365,
                "tf.eye(num_rows, dtype)": 0.0049261083743842365,
                "tf.fill(dims, value)": 0.0049261083743842365,
                "tf.gather(params, indices)": 0.0049261083743842365,
                "tf.gather(params, indices, axis, batch_dims)": 0.0049261083743842365,
                "tf.gather_nd(params, indices)": 0.0049261083743842365,
                "tf.gather_nd(params, indices, batch_dims)": 0.0049261083743842365,
                "tf.greater(x, y)": 0.0049261083743842365,
                "tf.greater_equal(x, y)": 0.0049261083743842365,
                "tf.math.bincount(arr)": 0.0049261083743842365,
                "tf.math.ceil(x)": 0.0049261083743842365,
                "tf.math.count_nonzero(input)": 0.0049261083743842365,
                "tf.math.count_nonzero(input, axis)": 0.0049261083743842365,
                "tf.math.cumsum(x, axis)": 0.0049261083743842365,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0049261083743842365,
                "tf.math.divide_no_nan(x, y)": 0.0049261083743842365,
                "tf.math.floor(x)": 0.0049261083743842365,
                "tf.math.log(x)": 0.0049261083743842365,
                "tf.math.logical_and(x, y)": 0.0049261083743842365,
                "tf.math.logical_not(x)": 0.0049261083743842365,
                "tf.math.logical_or(x, y)": 0.0049261083743842365,
                "tf.math.logical_xor(x, y)": 0.0049261083743842365,
                "tf.math.negative(x)": 0.0049261083743842365,
                "tf.math.reciprocal(x)": 0.0049261083743842365,
                "tf.math.reciprocal_no_nan(x)": 0.0049261083743842365,
                "tf.math.segment_max(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_mean(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_min(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_prod(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_sum(data, segment_ids)": 0.0049261083743842365,
                "tf.math.squared_difference(x, y)": 0.0049261083743842365,
                "tf.math.top_k(input, k)": 0.0049261083743842365,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.matmul(a, b)": 0.009852216748768473,
                "tf.maximum(x, y)": 0.0049261083743842365,
                "tf.minimum(x, y)": 0.0049261083743842365,
                "tf.multiply(x, y)": 0.029556650246305417,
                "tf.not_equal(x, y)": 0.0049261083743842365,
                "tf.one_hot(indices, depth)": 0.0049261083743842365,
                "tf.ones(shape)": 0.0049261083743842365,
                "tf.ones_like(input)": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0049261083743842365,
                "tf.range(start)": 0.0049261083743842365,
                "tf.range(start, limit, delta)": 0.0049261083743842365,
                "tf.reduce_any(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_all(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_max(input_tensor)": 0.0049261083743842365,
                "tf.reduce_max(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_mean(input_tensor)": 0.0049261083743842365,
                "tf.reduce_mean(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_min(input_tensor)": 0.0049261083743842365,
                "tf.reduce_min(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_prod(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_sum(input_tensor)": 0.0049261083743842365,
                "tf.reduce_sum(input_tensor, axis)": 0.0049261083743842365,
                "tf.repeat(input, repeats)": 0.0049261083743842365,
                "tf.repeat(input, repeats, axis)": 0.0049261083743842365,
                "tf.reshape(tensor, shape)": 0.0049261083743842365,
                "tf.reverse(tensor, axis)": 0.0049261083743842365,
                "tf.roll(input, shift, axis)": 0.0049261083743842365,
                "tf.round(x)": 0.0049261083743842365,
                "tf.scatter_nd(indices, updates, shape)": 0.0049261083743842365,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0049261083743842365,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0049261083743842365,
                "tf.sequence_mask(lengths)": 0.0049261083743842365,
                "tf.sequence_mask(lengths, maxlen)": 0.0049261083743842365,
                "tf.shape(input)": 0.009852216748768473,
                "tf.sign(x)": 0.0049261083743842365,
                "tf.sort(values, axis)": 0.0049261083743842365,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0049261083743842365,
                "tf.sqrt(x)": 0.0049261083743842365,
                "tf.square(x)": 0.0049261083743842365,
                "tf.squeeze(input)": 0.0049261083743842365,
                "tf.squeeze(input, axis)": 0.0049261083743842365,
                "tf.stack(values, axis)": 0.0049261083743842365,
                "tf.subtract(x, y)": 0.0049261083743842365,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0049261083743842365,
                "tf.tensordot(a, b, axes)": 0.024630541871921183,
                "tf.tile(input, multiples)": 0.0049261083743842365,
                "tf.transpose(a)": 0.0049261083743842365,
                "tf.transpose(a, perm)": 0.0049261083743842365,
                "tf.unique_with_counts(x)": 0.0049261083743842365,
                "tf.unstack(value, axis)": 0.0049261083743842365,
                "tf.where(condition)": 0.0049261083743842365,
                "tf.where(condition, x, y)": 0.0049261083743842365,
                "tf.zeros(shape)": 0.0049261083743842365,
                "tf.zeros_like(input)": 0.0049261083743842365,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0049261083743842365,
                "tf.sparse.add(a, b)": 0.0049261083743842365,
                "tf.sparse.concat(axis, sp_inputs)": 0.0049261083743842365,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0049261083743842365,
                "tf.sparse.from_dense(tensor)": 0.0049261083743842365,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0049261083743842365,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0049261083743842365,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0049261083743842365,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0049261083743842365,
                "tf.sparse.reset_shape(sp_input)": 0.0049261083743842365,
                "tf.sparse.reshape(sp_input, shape)": 0.0049261083743842365,
                "tf.sparse.retain(sp_input, to_retain)": 0.0049261083743842365,
                "tf.sparse.slice(sp_input, start, size)": 0.0049261083743842365,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0049261083743842365,
                "tf.sparse.to_dense(sp_input)": 0.0049261083743842365,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0049261083743842365,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0049261083743842365,
                "tf.sparse.transpose(sp_input)": 0.0049261083743842365,
                "tf.sparse.transpose(sp_input, perm)": 0.0049261083743842365,
                "IndexingAxis1Operation": 0.0049261083743842365,
                "IndexingOperation": 0.009852216748768473,
                "PairCreationOperation": 0.0049261083743842365,
                "SingletonTupleCreationOperation": 0.0049261083743842365,
                "SlicingAxis0BothOperation": 0.0049261083743842365,
                "SlicingAxis0LeftOperation": 0.0049261083743842365,
                "SlicingAxis0RightOperation": 0.0049261083743842365,
                "SlicingAxis1BothOperation": 0.0049261083743842365,
                "SlicingAxis1LeftOperation": 0.0049261083743842365,
                "SlicingAxis1RightOperation": 0.0049261083743842365,
                "TripleCreationOperation": 0.0049261083743842365,
                "PROVIDED_CONSTANT_WEIGHT": 0.0049261083743842365,
                "COMMON_CONSTANT_WEIGHT": 0.06896551724137931,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0049261083743842365,
                "INPUT_VARIABLE_WEIGHT": 0.10837438423645321,
                "AXIS_CONSTANT_WEIGHT": 0.0049261083743842365,
                "SHAPE_CONSTANT_WEIGHT": 0.0049261083743842365,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0049261083743842365
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 5,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 5,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_23",
        "description": "place 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/53414433/tensorflow-tensor-binarization",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0, 5, 2], [3, 1, 4], [5, 1, 5]],]",
            "outputs": "[[1, 0, 1, 0, 0, 1, 0, 0, 0],    [0, 1, 0, 1, 1, 0, 0, 0, 0],    [0, 1, 0, 0, 0, 1, 0, 0, 0]]"
        },
        "completions": [
            "return tf.one_hot(tf.cast(tf.reshape(in1, [-1]), tf.int32), tf.reduce_max(in1)+1)\n",
            "def transform(in1):\n    return tf.one_hot(tf.cast(in1, tf.int32), tf.reduce_max(in1)+1)\n",
            "indices = tf.where(tf.equal(in1, 1))\nreturn tf.scatter_nd(indices, tf.ones_like(indices[:, 0]), shape=[in1.shape[0], 9])\n",
            "indices = tf.where(tf.cast(in1, tf.bool))\nupdates = tf.ones(tf.shape(indices)[0])\nreturn tf.scatter_nd(indices, updates, [tf.size(in1)])\n",
            "def transform(in1):\n    indices = tf.where(tf.equal(in1, 1))\n    output = tf.tensor_scatter_nd_update(tf.zeros(tf.reduce_prod(tf.shape(in1))), indices, tf.ones(tf.shape(indices)[0]))\n    return tf.reshape(output, tf.shape(in1) * 2)\n",
            "return tf.one_hot(tf.reshape(in1, [-1]), depth=tf.reduce_max(in1)+1)\n",
            "return tf.tensor_scatter_nd_update(tf.zeros([3, 9], dtype=tf.int32), [[0, 1], [0, 3], [0, 5], [1, 0], [1, 2], [1, 3], [1, 4], [2, 1], [2, 5], [2, 8]], tf.ones(9, dtype=tf.int32))\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=9)\n",
            "indices = tf.where(tf.equal(in1, 0))\nupdates = tf.ones_like(tf.reshape(in1, [-1]))\nshape = tf.shape(in1, out_type=tf.int64) * tf.constant([1, 0]) + tf.constant([0, 1])\nreturn tf.cast(tf.scatter_nd(indices, updates, shape), tf.int32)\n",
            "return tf.scatter_nd(tf.reshape(in1, [-1, 1]), tf.ones_like(tf.reshape(in1, [-1, 1])), [3, 9])"
        ],
        "tf_operators": {
            "tf.one_hot": 4,
            "tf.reduce_max": 3,
            "tf.cast": 4,
            "tf.int32": 4,
            "tf.reshape": 5,
            "tf.where": 4,
            "tf.equal": 3,
            "tf.ones_like": 3,
            "tf.scatter_nd": 4,
            "tf.bool": 1,
            "tf.shape": 3,
            "tf.ones": 3,
            "tf.size": 1,
            "tf.tensor_scatter_nd_update": 2,
            "tf.reduce_prod": 1,
            "tf.zeros": 2,
            "tf.int64": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [
                -1,
                1
            ],
            [
                1
            ],
            [
                1,
                0,
                0,
                9
            ],
            [
                0
            ],
            [
                1,
                0,
                2
            ],
            [
                -1,
                1
            ],
            [
                3,
                9,
                0,
                1,
                0,
                3,
                0,
                5,
                1,
                0,
                1,
                2,
                1,
                3,
                1,
                4,
                2,
                1,
                2,
                5,
                2,
                8,
                9
            ],
            [
                9
            ],
            [
                0,
                -1,
                1,
                0,
                0,
                1
            ],
            [
                -1,
                1,
                -1,
                1,
                3,
                9
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 10,
                "axis": 4,
                "shape": 3,
                "provided": 6,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 0,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 6,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 7,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 1,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 33,
            "shape": 4,
            "tf_bool": 1,
            "provided": 9,
            "common": 30,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 5,
            "tf_int64": 1,
            "tf_int32": 5
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003401360544217687,
                "tf.add(x, y)": 0.003401360544217687,
                "tf.add_n(inputs)": 0.003401360544217687,
                "tf.argmax(input, axis)": 0.003401360544217687,
                "tf.argmin(input, axis)": 0.003401360544217687,
                "tf.argsort(values, axis, stable=True)": 0.003401360544217687,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.003401360544217687,
                "tf.boolean_mask(tensor, mask)": 0.003401360544217687,
                "tf.broadcast_to(input, shape)": 0.003401360544217687,
                "tf.cast(x, dtype)": 0.017006802721088437,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003401360544217687,
                "tf.concat(values, axis)": 0.003401360544217687,
                "tf.constant(value)": 0.01020408163265306,
                "tf.constant(value, dtype)": 0.003401360544217687,
                "tf.divide(x, y)": 0.003401360544217687,
                "tf.equal(x, y)": 0.013605442176870748,
                "tf.exp(x)": 0.003401360544217687,
                "tf.expand_dims(input, axis)": 0.003401360544217687,
                "tf.eye(num_rows)": 0.003401360544217687,
                "tf.eye(num_rows, num_columns)": 0.003401360544217687,
                "tf.eye(num_rows, dtype)": 0.003401360544217687,
                "tf.fill(dims, value)": 0.003401360544217687,
                "tf.gather(params, indices)": 0.003401360544217687,
                "tf.gather(params, indices, axis, batch_dims)": 0.003401360544217687,
                "tf.gather_nd(params, indices)": 0.003401360544217687,
                "tf.gather_nd(params, indices, batch_dims)": 0.003401360544217687,
                "tf.greater(x, y)": 0.003401360544217687,
                "tf.greater_equal(x, y)": 0.003401360544217687,
                "tf.math.bincount(arr)": 0.003401360544217687,
                "tf.math.ceil(x)": 0.003401360544217687,
                "tf.math.count_nonzero(input)": 0.003401360544217687,
                "tf.math.count_nonzero(input, axis)": 0.003401360544217687,
                "tf.math.cumsum(x, axis)": 0.003401360544217687,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003401360544217687,
                "tf.math.divide_no_nan(x, y)": 0.003401360544217687,
                "tf.math.floor(x)": 0.003401360544217687,
                "tf.math.log(x)": 0.003401360544217687,
                "tf.math.logical_and(x, y)": 0.003401360544217687,
                "tf.math.logical_not(x)": 0.003401360544217687,
                "tf.math.logical_or(x, y)": 0.003401360544217687,
                "tf.math.logical_xor(x, y)": 0.003401360544217687,
                "tf.math.negative(x)": 0.003401360544217687,
                "tf.math.reciprocal(x)": 0.003401360544217687,
                "tf.math.reciprocal_no_nan(x)": 0.003401360544217687,
                "tf.math.segment_max(data, segment_ids)": 0.003401360544217687,
                "tf.math.segment_mean(data, segment_ids)": 0.003401360544217687,
                "tf.math.segment_min(data, segment_ids)": 0.003401360544217687,
                "tf.math.segment_prod(data, segment_ids)": 0.003401360544217687,
                "tf.math.segment_sum(data, segment_ids)": 0.003401360544217687,
                "tf.math.squared_difference(x, y)": 0.003401360544217687,
                "tf.math.top_k(input, k)": 0.003401360544217687,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003401360544217687,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003401360544217687,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003401360544217687,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003401360544217687,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003401360544217687,
                "tf.matmul(a, b)": 0.003401360544217687,
                "tf.maximum(x, y)": 0.003401360544217687,
                "tf.minimum(x, y)": 0.003401360544217687,
                "tf.multiply(x, y)": 0.003401360544217687,
                "tf.not_equal(x, y)": 0.003401360544217687,
                "tf.one_hot(indices, depth)": 0.017006802721088437,
                "tf.ones(shape)": 0.013605442176870748,
                "tf.ones_like(input)": 0.013605442176870748,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.003401360544217687,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.003401360544217687,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.003401360544217687,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.003401360544217687,
                "tf.range(start)": 0.003401360544217687,
                "tf.range(start, limit, delta)": 0.003401360544217687,
                "tf.reduce_any(input_tensor, axis)": 0.003401360544217687,
                "tf.reduce_all(input_tensor, axis)": 0.003401360544217687,
                "tf.reduce_max(input_tensor)": 0.013605442176870748,
                "tf.reduce_max(input_tensor, axis)": 0.003401360544217687,
                "tf.reduce_mean(input_tensor)": 0.003401360544217687,
                "tf.reduce_mean(input_tensor, axis)": 0.003401360544217687,
                "tf.reduce_min(input_tensor)": 0.003401360544217687,
                "tf.reduce_min(input_tensor, axis)": 0.003401360544217687,
                "tf.reduce_prod(input_tensor, axis)": 0.006802721088435374,
                "tf.reduce_sum(input_tensor)": 0.003401360544217687,
                "tf.reduce_sum(input_tensor, axis)": 0.003401360544217687,
                "tf.repeat(input, repeats)": 0.003401360544217687,
                "tf.repeat(input, repeats, axis)": 0.003401360544217687,
                "tf.reshape(tensor, shape)": 0.023809523809523808,
                "tf.reverse(tensor, axis)": 0.003401360544217687,
                "tf.roll(input, shift, axis)": 0.003401360544217687,
                "tf.round(x)": 0.003401360544217687,
                "tf.scatter_nd(indices, updates, shape)": 0.017006802721088437,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.003401360544217687,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.003401360544217687,
                "tf.sequence_mask(lengths)": 0.003401360544217687,
                "tf.sequence_mask(lengths, maxlen)": 0.003401360544217687,
                "tf.shape(input)": 0.02040816326530612,
                "tf.sign(x)": 0.003401360544217687,
                "tf.sort(values, axis)": 0.003401360544217687,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.003401360544217687,
                "tf.sqrt(x)": 0.003401360544217687,
                "tf.square(x)": 0.003401360544217687,
                "tf.squeeze(input)": 0.003401360544217687,
                "tf.squeeze(input, axis)": 0.003401360544217687,
                "tf.stack(values, axis)": 0.003401360544217687,
                "tf.subtract(x, y)": 0.003401360544217687,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.01020408163265306,
                "tf.tensordot(a, b, axes)": 0.003401360544217687,
                "tf.tile(input, multiples)": 0.003401360544217687,
                "tf.transpose(a)": 0.003401360544217687,
                "tf.transpose(a, perm)": 0.003401360544217687,
                "tf.unique_with_counts(x)": 0.003401360544217687,
                "tf.unstack(value, axis)": 0.003401360544217687,
                "tf.where(condition)": 0.017006802721088437,
                "tf.where(condition, x, y)": 0.003401360544217687,
                "tf.zeros(shape)": 0.01020408163265306,
                "tf.zeros_like(input)": 0.003401360544217687,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003401360544217687,
                "tf.sparse.add(a, b)": 0.003401360544217687,
                "tf.sparse.concat(axis, sp_inputs)": 0.003401360544217687,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003401360544217687,
                "tf.sparse.from_dense(tensor)": 0.003401360544217687,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003401360544217687,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003401360544217687,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003401360544217687,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003401360544217687,
                "tf.sparse.reset_shape(sp_input)": 0.003401360544217687,
                "tf.sparse.reshape(sp_input, shape)": 0.003401360544217687,
                "tf.sparse.retain(sp_input, to_retain)": 0.003401360544217687,
                "tf.sparse.slice(sp_input, start, size)": 0.003401360544217687,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003401360544217687,
                "tf.sparse.to_dense(sp_input)": 0.003401360544217687,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003401360544217687,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003401360544217687,
                "tf.sparse.transpose(sp_input)": 0.003401360544217687,
                "tf.sparse.transpose(sp_input, perm)": 0.003401360544217687,
                "IndexingAxis1Operation": 0.006802721088435374,
                "IndexingOperation": 0.013605442176870748,
                "PairCreationOperation": 0.006802721088435374,
                "SingletonTupleCreationOperation": 0.003401360544217687,
                "SlicingAxis0BothOperation": 0.003401360544217687,
                "SlicingAxis0LeftOperation": 0.003401360544217687,
                "SlicingAxis0RightOperation": 0.003401360544217687,
                "SlicingAxis1BothOperation": 0.003401360544217687,
                "SlicingAxis1LeftOperation": 0.003401360544217687,
                "SlicingAxis1RightOperation": 0.003401360544217687,
                "TripleCreationOperation": 0.003401360544217687,
                "PROVIDED_CONSTANT_WEIGHT": 0.034013605442176874,
                "COMMON_CONSTANT_WEIGHT": 0.1054421768707483,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003401360544217687,
                "INPUT_VARIABLE_WEIGHT": 0.11564625850340136,
                "AXIS_CONSTANT_WEIGHT": 0.02040816326530612,
                "SHAPE_CONSTANT_WEIGHT": 0.017006802721088437,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003401360544217687,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.02040816326530612,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.003401360544217687,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.006802721088435374,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.006802721088435374
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 6,
                "tf.ones(shape)": 6,
                "tf.ones_like(input)": 6,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 6,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 6,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 6,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 5,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_24",
        "description": "(\\'like tf.divide(), but when dividing by 0, return the numerator\\')",
        "target_program": "tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)",
        "source": "https://stackoverflow.com/questions/53643339/tensorflow-overriding-tf-divide-to-return-the-numerator-when-dividing-by-0",
        "constants": "[0]",
        "examples": {
            "inputs": "[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0],[0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0],]",
            "outputs": "[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5]"
        },
        "completions": [
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))\n",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.math.divide_no_nan(in1, in2)",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))",
            "return tf.where(tf.equal(in2, 0), in1, tf.divide(in1, in2))"
        ],
        "tf_operators": {
            "tf.math.divide_no_nan": 4,
            "tf.where": 6,
            "tf.divide": 6,
            "tf.equal": 6
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 32,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 6,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004651162790697674,
                "tf.add(x, y)": 0.004651162790697674,
                "tf.add_n(inputs)": 0.004651162790697674,
                "tf.argmax(input, axis)": 0.004651162790697674,
                "tf.argmin(input, axis)": 0.004651162790697674,
                "tf.argsort(values, axis, stable=True)": 0.004651162790697674,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004651162790697674,
                "tf.boolean_mask(tensor, mask)": 0.004651162790697674,
                "tf.broadcast_to(input, shape)": 0.004651162790697674,
                "tf.cast(x, dtype)": 0.004651162790697674,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004651162790697674,
                "tf.concat(values, axis)": 0.004651162790697674,
                "tf.constant(value)": 0.004651162790697674,
                "tf.constant(value, dtype)": 0.004651162790697674,
                "tf.divide(x, y)": 0.03255813953488372,
                "tf.equal(x, y)": 0.03255813953488372,
                "tf.exp(x)": 0.004651162790697674,
                "tf.expand_dims(input, axis)": 0.004651162790697674,
                "tf.eye(num_rows)": 0.004651162790697674,
                "tf.eye(num_rows, num_columns)": 0.004651162790697674,
                "tf.eye(num_rows, dtype)": 0.004651162790697674,
                "tf.fill(dims, value)": 0.004651162790697674,
                "tf.gather(params, indices)": 0.004651162790697674,
                "tf.gather(params, indices, axis, batch_dims)": 0.004651162790697674,
                "tf.gather_nd(params, indices)": 0.004651162790697674,
                "tf.gather_nd(params, indices, batch_dims)": 0.004651162790697674,
                "tf.greater(x, y)": 0.004651162790697674,
                "tf.greater_equal(x, y)": 0.004651162790697674,
                "tf.math.bincount(arr)": 0.004651162790697674,
                "tf.math.ceil(x)": 0.004651162790697674,
                "tf.math.count_nonzero(input)": 0.004651162790697674,
                "tf.math.count_nonzero(input, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis)": 0.004651162790697674,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004651162790697674,
                "tf.math.divide_no_nan(x, y)": 0.023255813953488372,
                "tf.math.floor(x)": 0.004651162790697674,
                "tf.math.log(x)": 0.004651162790697674,
                "tf.math.logical_and(x, y)": 0.004651162790697674,
                "tf.math.logical_not(x)": 0.004651162790697674,
                "tf.math.logical_or(x, y)": 0.004651162790697674,
                "tf.math.logical_xor(x, y)": 0.004651162790697674,
                "tf.math.negative(x)": 0.004651162790697674,
                "tf.math.reciprocal(x)": 0.004651162790697674,
                "tf.math.reciprocal_no_nan(x)": 0.004651162790697674,
                "tf.math.segment_max(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_mean(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_min(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_prod(data, segment_ids)": 0.004651162790697674,
                "tf.math.segment_sum(data, segment_ids)": 0.004651162790697674,
                "tf.math.squared_difference(x, y)": 0.004651162790697674,
                "tf.math.top_k(input, k)": 0.004651162790697674,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004651162790697674,
                "tf.matmul(a, b)": 0.004651162790697674,
                "tf.maximum(x, y)": 0.004651162790697674,
                "tf.minimum(x, y)": 0.004651162790697674,
                "tf.multiply(x, y)": 0.004651162790697674,
                "tf.not_equal(x, y)": 0.004651162790697674,
                "tf.one_hot(indices, depth)": 0.004651162790697674,
                "tf.ones(shape)": 0.004651162790697674,
                "tf.ones_like(input)": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004651162790697674,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004651162790697674,
                "tf.range(start)": 0.004651162790697674,
                "tf.range(start, limit, delta)": 0.004651162790697674,
                "tf.reduce_any(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_all(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_max(input_tensor)": 0.004651162790697674,
                "tf.reduce_max(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor)": 0.004651162790697674,
                "tf.reduce_mean(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_min(input_tensor)": 0.004651162790697674,
                "tf.reduce_min(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_prod(input_tensor, axis)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor)": 0.004651162790697674,
                "tf.reduce_sum(input_tensor, axis)": 0.004651162790697674,
                "tf.repeat(input, repeats)": 0.004651162790697674,
                "tf.repeat(input, repeats, axis)": 0.004651162790697674,
                "tf.reshape(tensor, shape)": 0.004651162790697674,
                "tf.reverse(tensor, axis)": 0.004651162790697674,
                "tf.roll(input, shift, axis)": 0.004651162790697674,
                "tf.round(x)": 0.004651162790697674,
                "tf.scatter_nd(indices, updates, shape)": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004651162790697674,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004651162790697674,
                "tf.sequence_mask(lengths)": 0.004651162790697674,
                "tf.sequence_mask(lengths, maxlen)": 0.004651162790697674,
                "tf.shape(input)": 0.004651162790697674,
                "tf.sign(x)": 0.004651162790697674,
                "tf.sort(values, axis)": 0.004651162790697674,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004651162790697674,
                "tf.sqrt(x)": 0.004651162790697674,
                "tf.square(x)": 0.004651162790697674,
                "tf.squeeze(input)": 0.004651162790697674,
                "tf.squeeze(input, axis)": 0.004651162790697674,
                "tf.stack(values, axis)": 0.004651162790697674,
                "tf.subtract(x, y)": 0.004651162790697674,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004651162790697674,
                "tf.tensordot(a, b, axes)": 0.004651162790697674,
                "tf.tile(input, multiples)": 0.004651162790697674,
                "tf.transpose(a)": 0.004651162790697674,
                "tf.transpose(a, perm)": 0.004651162790697674,
                "tf.unique_with_counts(x)": 0.004651162790697674,
                "tf.unstack(value, axis)": 0.004651162790697674,
                "tf.where(condition)": 0.004651162790697674,
                "tf.where(condition, x, y)": 0.03255813953488372,
                "tf.zeros(shape)": 0.004651162790697674,
                "tf.zeros_like(input)": 0.004651162790697674,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004651162790697674,
                "tf.sparse.add(a, b)": 0.004651162790697674,
                "tf.sparse.concat(axis, sp_inputs)": 0.004651162790697674,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004651162790697674,
                "tf.sparse.from_dense(tensor)": 0.004651162790697674,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004651162790697674,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004651162790697674,
                "tf.sparse.reset_shape(sp_input)": 0.004651162790697674,
                "tf.sparse.reshape(sp_input, shape)": 0.004651162790697674,
                "tf.sparse.retain(sp_input, to_retain)": 0.004651162790697674,
                "tf.sparse.slice(sp_input, start, size)": 0.004651162790697674,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input)": 0.004651162790697674,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004651162790697674,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input)": 0.004651162790697674,
                "tf.sparse.transpose(sp_input, perm)": 0.004651162790697674,
                "IndexingAxis1Operation": 0.004651162790697674,
                "IndexingOperation": 0.004651162790697674,
                "PairCreationOperation": 0.004651162790697674,
                "SingletonTupleCreationOperation": 0.004651162790697674,
                "SlicingAxis0BothOperation": 0.004651162790697674,
                "SlicingAxis0LeftOperation": 0.004651162790697674,
                "SlicingAxis0RightOperation": 0.004651162790697674,
                "SlicingAxis1BothOperation": 0.004651162790697674,
                "SlicingAxis1LeftOperation": 0.004651162790697674,
                "SlicingAxis1RightOperation": 0.004651162790697674,
                "TripleCreationOperation": 0.004651162790697674,
                "PROVIDED_CONSTANT_WEIGHT": 0.004651162790697674,
                "COMMON_CONSTANT_WEIGHT": 0.03255813953488372,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004651162790697674,
                "INPUT_VARIABLE_WEIGHT": 0.15348837209302327,
                "AXIS_CONSTANT_WEIGHT": 0.004651162790697674,
                "SHAPE_CONSTANT_WEIGHT": 0.004651162790697674,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004651162790697674,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004651162790697674
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 5,
                "tf.equal(x, y)": 5,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 5,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 5,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_25",
        "description": "copy the tensor tf.eye(3), 4 times",
        "target_program": "tf.tile(tf.eye(in1), (in2, 1))",
        "source": "https://stackoverflow.com/questions/53602691/duplicate-a-tensor-n-times",
        "constants": "[]",
        "examples": {
            "inputs": "[3,4,]",
            "outputs": "[[1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0],    [1.0, 0.0, 0.0],    [0.0, 1.0, 0.0],    [0.0, 0.0, 1.0]]"
        },
        "completions": [
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "res = tf.tile(tf.eye(in1), [in2, 1])\nreturn res\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "def transform(in1, in2):\n    return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])\n",
            "return tf.tile(tf.eye(in1), [in2, 1])",
            "return tf.repeat(tf.eye(in1), in2, axis=0)"
        ],
        "tf_operators": {
            "tf.tile": 9,
            "tf.eye": 10,
            "tf.repeat": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 2,
        "total_in_target": 2,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004901960784313725,
                "tf.add(x, y)": 0.004901960784313725,
                "tf.add_n(inputs)": 0.004901960784313725,
                "tf.argmax(input, axis)": 0.004901960784313725,
                "tf.argmin(input, axis)": 0.004901960784313725,
                "tf.argsort(values, axis, stable=True)": 0.004901960784313725,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004901960784313725,
                "tf.boolean_mask(tensor, mask)": 0.004901960784313725,
                "tf.broadcast_to(input, shape)": 0.004901960784313725,
                "tf.cast(x, dtype)": 0.004901960784313725,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004901960784313725,
                "tf.concat(values, axis)": 0.004901960784313725,
                "tf.constant(value)": 0.004901960784313725,
                "tf.constant(value, dtype)": 0.004901960784313725,
                "tf.divide(x, y)": 0.004901960784313725,
                "tf.equal(x, y)": 0.004901960784313725,
                "tf.exp(x)": 0.004901960784313725,
                "tf.expand_dims(input, axis)": 0.004901960784313725,
                "tf.eye(num_rows)": 0.05392156862745098,
                "tf.eye(num_rows, num_columns)": 0.004901960784313725,
                "tf.eye(num_rows, dtype)": 0.004901960784313725,
                "tf.fill(dims, value)": 0.004901960784313725,
                "tf.gather(params, indices)": 0.004901960784313725,
                "tf.gather(params, indices, axis, batch_dims)": 0.004901960784313725,
                "tf.gather_nd(params, indices)": 0.004901960784313725,
                "tf.gather_nd(params, indices, batch_dims)": 0.004901960784313725,
                "tf.greater(x, y)": 0.004901960784313725,
                "tf.greater_equal(x, y)": 0.004901960784313725,
                "tf.math.bincount(arr)": 0.004901960784313725,
                "tf.math.ceil(x)": 0.004901960784313725,
                "tf.math.count_nonzero(input)": 0.004901960784313725,
                "tf.math.count_nonzero(input, axis)": 0.004901960784313725,
                "tf.math.cumsum(x, axis)": 0.004901960784313725,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004901960784313725,
                "tf.math.divide_no_nan(x, y)": 0.004901960784313725,
                "tf.math.floor(x)": 0.004901960784313725,
                "tf.math.log(x)": 0.004901960784313725,
                "tf.math.logical_and(x, y)": 0.004901960784313725,
                "tf.math.logical_not(x)": 0.004901960784313725,
                "tf.math.logical_or(x, y)": 0.004901960784313725,
                "tf.math.logical_xor(x, y)": 0.004901960784313725,
                "tf.math.negative(x)": 0.004901960784313725,
                "tf.math.reciprocal(x)": 0.004901960784313725,
                "tf.math.reciprocal_no_nan(x)": 0.004901960784313725,
                "tf.math.segment_max(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_mean(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_min(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_prod(data, segment_ids)": 0.004901960784313725,
                "tf.math.segment_sum(data, segment_ids)": 0.004901960784313725,
                "tf.math.squared_difference(x, y)": 0.004901960784313725,
                "tf.math.top_k(input, k)": 0.004901960784313725,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004901960784313725,
                "tf.matmul(a, b)": 0.004901960784313725,
                "tf.maximum(x, y)": 0.004901960784313725,
                "tf.minimum(x, y)": 0.004901960784313725,
                "tf.multiply(x, y)": 0.004901960784313725,
                "tf.not_equal(x, y)": 0.004901960784313725,
                "tf.one_hot(indices, depth)": 0.004901960784313725,
                "tf.ones(shape)": 0.004901960784313725,
                "tf.ones_like(input)": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004901960784313725,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004901960784313725,
                "tf.range(start)": 0.004901960784313725,
                "tf.range(start, limit, delta)": 0.004901960784313725,
                "tf.reduce_any(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_all(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_max(input_tensor)": 0.004901960784313725,
                "tf.reduce_max(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_mean(input_tensor)": 0.004901960784313725,
                "tf.reduce_mean(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_min(input_tensor)": 0.004901960784313725,
                "tf.reduce_min(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_prod(input_tensor, axis)": 0.004901960784313725,
                "tf.reduce_sum(input_tensor)": 0.004901960784313725,
                "tf.reduce_sum(input_tensor, axis)": 0.004901960784313725,
                "tf.repeat(input, repeats)": 0.004901960784313725,
                "tf.repeat(input, repeats, axis)": 0.004901960784313725,
                "tf.reshape(tensor, shape)": 0.004901960784313725,
                "tf.reverse(tensor, axis)": 0.004901960784313725,
                "tf.roll(input, shift, axis)": 0.004901960784313725,
                "tf.round(x)": 0.004901960784313725,
                "tf.scatter_nd(indices, updates, shape)": 0.004901960784313725,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004901960784313725,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004901960784313725,
                "tf.sequence_mask(lengths)": 0.004901960784313725,
                "tf.sequence_mask(lengths, maxlen)": 0.004901960784313725,
                "tf.shape(input)": 0.004901960784313725,
                "tf.sign(x)": 0.004901960784313725,
                "tf.sort(values, axis)": 0.004901960784313725,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004901960784313725,
                "tf.sqrt(x)": 0.004901960784313725,
                "tf.square(x)": 0.004901960784313725,
                "tf.squeeze(input)": 0.004901960784313725,
                "tf.squeeze(input, axis)": 0.004901960784313725,
                "tf.stack(values, axis)": 0.004901960784313725,
                "tf.subtract(x, y)": 0.004901960784313725,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004901960784313725,
                "tf.tensordot(a, b, axes)": 0.004901960784313725,
                "tf.tile(input, multiples)": 0.049019607843137254,
                "tf.transpose(a)": 0.004901960784313725,
                "tf.transpose(a, perm)": 0.004901960784313725,
                "tf.unique_with_counts(x)": 0.004901960784313725,
                "tf.unstack(value, axis)": 0.004901960784313725,
                "tf.where(condition)": 0.004901960784313725,
                "tf.where(condition, x, y)": 0.004901960784313725,
                "tf.zeros(shape)": 0.004901960784313725,
                "tf.zeros_like(input)": 0.004901960784313725,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004901960784313725,
                "tf.sparse.add(a, b)": 0.004901960784313725,
                "tf.sparse.concat(axis, sp_inputs)": 0.004901960784313725,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004901960784313725,
                "tf.sparse.from_dense(tensor)": 0.004901960784313725,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004901960784313725,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004901960784313725,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004901960784313725,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004901960784313725,
                "tf.sparse.reset_shape(sp_input)": 0.004901960784313725,
                "tf.sparse.reshape(sp_input, shape)": 0.004901960784313725,
                "tf.sparse.retain(sp_input, to_retain)": 0.004901960784313725,
                "tf.sparse.slice(sp_input, start, size)": 0.004901960784313725,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004901960784313725,
                "tf.sparse.to_dense(sp_input)": 0.004901960784313725,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004901960784313725,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004901960784313725,
                "tf.sparse.transpose(sp_input)": 0.004901960784313725,
                "tf.sparse.transpose(sp_input, perm)": 0.004901960784313725,
                "IndexingAxis1Operation": 0.004901960784313725,
                "IndexingOperation": 0.004901960784313725,
                "PairCreationOperation": 0.004901960784313725,
                "SingletonTupleCreationOperation": 0.004901960784313725,
                "SlicingAxis0BothOperation": 0.004901960784313725,
                "SlicingAxis0LeftOperation": 0.004901960784313725,
                "SlicingAxis0RightOperation": 0.004901960784313725,
                "SlicingAxis1BothOperation": 0.004901960784313725,
                "SlicingAxis1LeftOperation": 0.004901960784313725,
                "SlicingAxis1RightOperation": 0.004901960784313725,
                "TripleCreationOperation": 0.004901960784313725,
                "PROVIDED_CONSTANT_WEIGHT": 0.004901960784313725,
                "COMMON_CONSTANT_WEIGHT": 0.05392156862745098,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004901960784313725,
                "INPUT_VARIABLE_WEIGHT": 0.10294117647058823,
                "AXIS_CONSTANT_WEIGHT": 0.004901960784313725,
                "SHAPE_CONSTANT_WEIGHT": 0.004901960784313725,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004901960784313725,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004901960784313725
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 4,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 4,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_26",
        "description": "reduction operation for multiple dimensions simultaneously",
        "target_program": "tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)",
        "source": "https://stackoverflow.com/questions/54294780/how-to-perform-reduce-op-on-multiple-dimensions-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]]",
            "outputs": "[10, -4, 33]"
        },
        "completions": [
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n",
            "return tf.reduce_sum(in1, axis=[1, 2])\n"
        ],
        "tf_operators": {
            "tf.reduce_sum": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ]
        ],
        "all_constants": [
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 10,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005405405405405406,
                "tf.add(x, y)": 0.005405405405405406,
                "tf.add_n(inputs)": 0.005405405405405406,
                "tf.argmax(input, axis)": 0.005405405405405406,
                "tf.argmin(input, axis)": 0.005405405405405406,
                "tf.argsort(values, axis, stable=True)": 0.005405405405405406,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005405405405405406,
                "tf.boolean_mask(tensor, mask)": 0.005405405405405406,
                "tf.broadcast_to(input, shape)": 0.005405405405405406,
                "tf.cast(x, dtype)": 0.005405405405405406,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005405405405405406,
                "tf.concat(values, axis)": 0.005405405405405406,
                "tf.constant(value)": 0.005405405405405406,
                "tf.constant(value, dtype)": 0.005405405405405406,
                "tf.divide(x, y)": 0.005405405405405406,
                "tf.equal(x, y)": 0.005405405405405406,
                "tf.exp(x)": 0.005405405405405406,
                "tf.expand_dims(input, axis)": 0.005405405405405406,
                "tf.eye(num_rows)": 0.005405405405405406,
                "tf.eye(num_rows, num_columns)": 0.005405405405405406,
                "tf.eye(num_rows, dtype)": 0.005405405405405406,
                "tf.fill(dims, value)": 0.005405405405405406,
                "tf.gather(params, indices)": 0.005405405405405406,
                "tf.gather(params, indices, axis, batch_dims)": 0.005405405405405406,
                "tf.gather_nd(params, indices)": 0.005405405405405406,
                "tf.gather_nd(params, indices, batch_dims)": 0.005405405405405406,
                "tf.greater(x, y)": 0.005405405405405406,
                "tf.greater_equal(x, y)": 0.005405405405405406,
                "tf.math.bincount(arr)": 0.005405405405405406,
                "tf.math.ceil(x)": 0.005405405405405406,
                "tf.math.count_nonzero(input)": 0.005405405405405406,
                "tf.math.count_nonzero(input, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis)": 0.005405405405405406,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005405405405405406,
                "tf.math.divide_no_nan(x, y)": 0.005405405405405406,
                "tf.math.floor(x)": 0.005405405405405406,
                "tf.math.log(x)": 0.005405405405405406,
                "tf.math.logical_and(x, y)": 0.005405405405405406,
                "tf.math.logical_not(x)": 0.005405405405405406,
                "tf.math.logical_or(x, y)": 0.005405405405405406,
                "tf.math.logical_xor(x, y)": 0.005405405405405406,
                "tf.math.negative(x)": 0.005405405405405406,
                "tf.math.reciprocal(x)": 0.005405405405405406,
                "tf.math.reciprocal_no_nan(x)": 0.005405405405405406,
                "tf.math.segment_max(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_mean(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_min(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_prod(data, segment_ids)": 0.005405405405405406,
                "tf.math.segment_sum(data, segment_ids)": 0.005405405405405406,
                "tf.math.squared_difference(x, y)": 0.005405405405405406,
                "tf.math.top_k(input, k)": 0.005405405405405406,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005405405405405406,
                "tf.matmul(a, b)": 0.005405405405405406,
                "tf.maximum(x, y)": 0.005405405405405406,
                "tf.minimum(x, y)": 0.005405405405405406,
                "tf.multiply(x, y)": 0.005405405405405406,
                "tf.not_equal(x, y)": 0.005405405405405406,
                "tf.one_hot(indices, depth)": 0.005405405405405406,
                "tf.ones(shape)": 0.005405405405405406,
                "tf.ones_like(input)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005405405405405406,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005405405405405406,
                "tf.range(start)": 0.005405405405405406,
                "tf.range(start, limit, delta)": 0.005405405405405406,
                "tf.reduce_any(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_all(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_max(input_tensor)": 0.005405405405405406,
                "tf.reduce_max(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor)": 0.005405405405405406,
                "tf.reduce_mean(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_min(input_tensor)": 0.005405405405405406,
                "tf.reduce_min(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_prod(input_tensor, axis)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor)": 0.005405405405405406,
                "tf.reduce_sum(input_tensor, axis)": 0.005405405405405406,
                "tf.repeat(input, repeats)": 0.005405405405405406,
                "tf.repeat(input, repeats, axis)": 0.005405405405405406,
                "tf.reshape(tensor, shape)": 0.005405405405405406,
                "tf.reverse(tensor, axis)": 0.005405405405405406,
                "tf.roll(input, shift, axis)": 0.005405405405405406,
                "tf.round(x)": 0.005405405405405406,
                "tf.scatter_nd(indices, updates, shape)": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005405405405405406,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005405405405405406,
                "tf.sequence_mask(lengths)": 0.005405405405405406,
                "tf.sequence_mask(lengths, maxlen)": 0.005405405405405406,
                "tf.shape(input)": 0.005405405405405406,
                "tf.sign(x)": 0.005405405405405406,
                "tf.sort(values, axis)": 0.005405405405405406,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005405405405405406,
                "tf.sqrt(x)": 0.005405405405405406,
                "tf.square(x)": 0.005405405405405406,
                "tf.squeeze(input)": 0.005405405405405406,
                "tf.squeeze(input, axis)": 0.005405405405405406,
                "tf.stack(values, axis)": 0.005405405405405406,
                "tf.subtract(x, y)": 0.005405405405405406,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005405405405405406,
                "tf.tensordot(a, b, axes)": 0.005405405405405406,
                "tf.tile(input, multiples)": 0.005405405405405406,
                "tf.transpose(a)": 0.005405405405405406,
                "tf.transpose(a, perm)": 0.005405405405405406,
                "tf.unique_with_counts(x)": 0.005405405405405406,
                "tf.unstack(value, axis)": 0.005405405405405406,
                "tf.where(condition)": 0.005405405405405406,
                "tf.where(condition, x, y)": 0.005405405405405406,
                "tf.zeros(shape)": 0.005405405405405406,
                "tf.zeros_like(input)": 0.005405405405405406,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005405405405405406,
                "tf.sparse.add(a, b)": 0.005405405405405406,
                "tf.sparse.concat(axis, sp_inputs)": 0.005405405405405406,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005405405405405406,
                "tf.sparse.from_dense(tensor)": 0.005405405405405406,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005405405405405406,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005405405405405406,
                "tf.sparse.reset_shape(sp_input)": 0.005405405405405406,
                "tf.sparse.reshape(sp_input, shape)": 0.005405405405405406,
                "tf.sparse.retain(sp_input, to_retain)": 0.005405405405405406,
                "tf.sparse.slice(sp_input, start, size)": 0.005405405405405406,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input)": 0.005405405405405406,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005405405405405406,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input)": 0.005405405405405406,
                "tf.sparse.transpose(sp_input, perm)": 0.005405405405405406,
                "IndexingAxis1Operation": 0.005405405405405406,
                "IndexingOperation": 0.005405405405405406,
                "PairCreationOperation": 0.005405405405405406,
                "SingletonTupleCreationOperation": 0.005405405405405406,
                "SlicingAxis0BothOperation": 0.005405405405405406,
                "SlicingAxis0LeftOperation": 0.005405405405405406,
                "SlicingAxis0RightOperation": 0.005405405405405406,
                "SlicingAxis1BothOperation": 0.005405405405405406,
                "SlicingAxis1LeftOperation": 0.005405405405405406,
                "SlicingAxis1RightOperation": 0.005405405405405406,
                "TripleCreationOperation": 0.005405405405405406,
                "PROVIDED_CONSTANT_WEIGHT": 0.005405405405405406,
                "COMMON_CONSTANT_WEIGHT": 0.05945945945945946,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005405405405405406,
                "INPUT_VARIABLE_WEIGHT": 0.05945945945945946,
                "AXIS_CONSTANT_WEIGHT": 0.05945945945945946,
                "SHAPE_CONSTANT_WEIGHT": 0.005405405405405406,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005405405405405406,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005405405405405406
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_27",
        "description": "boolean tensor with 1 at the indices in the input tensor",
        "target_program": "tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)",
        "source": "https://stackoverflow.com/questions/54225704/how-do-i-get-a-tensor-representing-the-on-positions-in-the-original-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 3, 5, 6],8,]",
            "outputs": "[1, 0, 0, 1, 0, 1, 1, 0]"
        },
        "completions": [
            "return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, 1)), tf.ones(in2), tf.zeros(in2))",
            "def transform(in1, in2):\n    return tf.where(tf.equal(tf.range(in2), tf.expand_dims(in1, axis=1)), 1, 0)\n",
            "return tf.equal(tf.range(in2), in1)\n",
            "return tf.sequence_mask(indices=in1, maxlen=in2)",
            "return tf.sequence_mask(in1, in2)",
            "return tf.sequence_mask(in1, in2)",
            "result = tf.one_hot(indices=in1, depth=in2)\nreturn result\n",
            "return tf.sequence_mask(in1, in2)",
            "return tf.one_hot(indices=in1, depth=in2)",
            "return tf.sequence_mask(in1, in2, dtype=tf.int32)"
        ],
        "tf_operators": {
            "tf.where": 2,
            "tf.range": 3,
            "tf.equal": 3,
            "tf.ones": 1,
            "tf.zeros": 1,
            "tf.expand_dims": 2,
            "tf.sequence_mask": 5,
            "tf.one_hot": 2,
            "tf.int32": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1
            ],
            [
                1,
                1,
                0
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 22,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 4,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005025125628140704,
                "tf.add(x, y)": 0.005025125628140704,
                "tf.add_n(inputs)": 0.005025125628140704,
                "tf.argmax(input, axis)": 0.005025125628140704,
                "tf.argmin(input, axis)": 0.005025125628140704,
                "tf.argsort(values, axis, stable=True)": 0.005025125628140704,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005025125628140704,
                "tf.boolean_mask(tensor, mask)": 0.005025125628140704,
                "tf.broadcast_to(input, shape)": 0.005025125628140704,
                "tf.cast(x, dtype)": 0.005025125628140704,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005025125628140704,
                "tf.concat(values, axis)": 0.005025125628140704,
                "tf.constant(value)": 0.005025125628140704,
                "tf.constant(value, dtype)": 0.005025125628140704,
                "tf.divide(x, y)": 0.005025125628140704,
                "tf.equal(x, y)": 0.020100502512562814,
                "tf.exp(x)": 0.005025125628140704,
                "tf.expand_dims(input, axis)": 0.01507537688442211,
                "tf.eye(num_rows)": 0.005025125628140704,
                "tf.eye(num_rows, num_columns)": 0.005025125628140704,
                "tf.eye(num_rows, dtype)": 0.005025125628140704,
                "tf.fill(dims, value)": 0.005025125628140704,
                "tf.gather(params, indices)": 0.005025125628140704,
                "tf.gather(params, indices, axis, batch_dims)": 0.005025125628140704,
                "tf.gather_nd(params, indices)": 0.005025125628140704,
                "tf.gather_nd(params, indices, batch_dims)": 0.005025125628140704,
                "tf.greater(x, y)": 0.005025125628140704,
                "tf.greater_equal(x, y)": 0.005025125628140704,
                "tf.math.bincount(arr)": 0.005025125628140704,
                "tf.math.ceil(x)": 0.005025125628140704,
                "tf.math.count_nonzero(input)": 0.005025125628140704,
                "tf.math.count_nonzero(input, axis)": 0.005025125628140704,
                "tf.math.cumsum(x, axis)": 0.005025125628140704,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005025125628140704,
                "tf.math.divide_no_nan(x, y)": 0.005025125628140704,
                "tf.math.floor(x)": 0.005025125628140704,
                "tf.math.log(x)": 0.005025125628140704,
                "tf.math.logical_and(x, y)": 0.005025125628140704,
                "tf.math.logical_not(x)": 0.005025125628140704,
                "tf.math.logical_or(x, y)": 0.005025125628140704,
                "tf.math.logical_xor(x, y)": 0.005025125628140704,
                "tf.math.negative(x)": 0.005025125628140704,
                "tf.math.reciprocal(x)": 0.005025125628140704,
                "tf.math.reciprocal_no_nan(x)": 0.005025125628140704,
                "tf.math.segment_max(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_mean(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_min(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_prod(data, segment_ids)": 0.005025125628140704,
                "tf.math.segment_sum(data, segment_ids)": 0.005025125628140704,
                "tf.math.squared_difference(x, y)": 0.005025125628140704,
                "tf.math.top_k(input, k)": 0.005025125628140704,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005025125628140704,
                "tf.matmul(a, b)": 0.005025125628140704,
                "tf.maximum(x, y)": 0.005025125628140704,
                "tf.minimum(x, y)": 0.005025125628140704,
                "tf.multiply(x, y)": 0.005025125628140704,
                "tf.not_equal(x, y)": 0.005025125628140704,
                "tf.one_hot(indices, depth)": 0.01507537688442211,
                "tf.ones(shape)": 0.010050251256281407,
                "tf.ones_like(input)": 0.005025125628140704,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005025125628140704,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005025125628140704,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005025125628140704,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005025125628140704,
                "tf.range(start)": 0.020100502512562814,
                "tf.range(start, limit, delta)": 0.005025125628140704,
                "tf.reduce_any(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_all(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_max(input_tensor)": 0.005025125628140704,
                "tf.reduce_max(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_mean(input_tensor)": 0.005025125628140704,
                "tf.reduce_mean(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_min(input_tensor)": 0.005025125628140704,
                "tf.reduce_min(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_prod(input_tensor, axis)": 0.005025125628140704,
                "tf.reduce_sum(input_tensor)": 0.005025125628140704,
                "tf.reduce_sum(input_tensor, axis)": 0.005025125628140704,
                "tf.repeat(input, repeats)": 0.005025125628140704,
                "tf.repeat(input, repeats, axis)": 0.005025125628140704,
                "tf.reshape(tensor, shape)": 0.005025125628140704,
                "tf.reverse(tensor, axis)": 0.005025125628140704,
                "tf.roll(input, shift, axis)": 0.005025125628140704,
                "tf.round(x)": 0.005025125628140704,
                "tf.scatter_nd(indices, updates, shape)": 0.005025125628140704,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005025125628140704,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005025125628140704,
                "tf.sequence_mask(lengths)": 0.005025125628140704,
                "tf.sequence_mask(lengths, maxlen)": 0.020100502512562814,
                "tf.shape(input)": 0.005025125628140704,
                "tf.sign(x)": 0.005025125628140704,
                "tf.sort(values, axis)": 0.005025125628140704,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005025125628140704,
                "tf.sqrt(x)": 0.005025125628140704,
                "tf.square(x)": 0.005025125628140704,
                "tf.squeeze(input)": 0.005025125628140704,
                "tf.squeeze(input, axis)": 0.005025125628140704,
                "tf.stack(values, axis)": 0.005025125628140704,
                "tf.subtract(x, y)": 0.005025125628140704,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005025125628140704,
                "tf.tensordot(a, b, axes)": 0.005025125628140704,
                "tf.tile(input, multiples)": 0.005025125628140704,
                "tf.transpose(a)": 0.005025125628140704,
                "tf.transpose(a, perm)": 0.005025125628140704,
                "tf.unique_with_counts(x)": 0.005025125628140704,
                "tf.unstack(value, axis)": 0.005025125628140704,
                "tf.where(condition)": 0.005025125628140704,
                "tf.where(condition, x, y)": 0.01507537688442211,
                "tf.zeros(shape)": 0.010050251256281407,
                "tf.zeros_like(input)": 0.005025125628140704,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005025125628140704,
                "tf.sparse.add(a, b)": 0.005025125628140704,
                "tf.sparse.concat(axis, sp_inputs)": 0.005025125628140704,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005025125628140704,
                "tf.sparse.from_dense(tensor)": 0.005025125628140704,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005025125628140704,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005025125628140704,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005025125628140704,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005025125628140704,
                "tf.sparse.reset_shape(sp_input)": 0.005025125628140704,
                "tf.sparse.reshape(sp_input, shape)": 0.005025125628140704,
                "tf.sparse.retain(sp_input, to_retain)": 0.005025125628140704,
                "tf.sparse.slice(sp_input, start, size)": 0.005025125628140704,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005025125628140704,
                "tf.sparse.to_dense(sp_input)": 0.005025125628140704,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005025125628140704,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005025125628140704,
                "tf.sparse.transpose(sp_input)": 0.005025125628140704,
                "tf.sparse.transpose(sp_input, perm)": 0.005025125628140704,
                "IndexingAxis1Operation": 0.005025125628140704,
                "IndexingOperation": 0.005025125628140704,
                "PairCreationOperation": 0.005025125628140704,
                "SingletonTupleCreationOperation": 0.005025125628140704,
                "SlicingAxis0BothOperation": 0.005025125628140704,
                "SlicingAxis0LeftOperation": 0.005025125628140704,
                "SlicingAxis0RightOperation": 0.005025125628140704,
                "SlicingAxis1BothOperation": 0.005025125628140704,
                "SlicingAxis1LeftOperation": 0.005025125628140704,
                "SlicingAxis1RightOperation": 0.005025125628140704,
                "TripleCreationOperation": 0.005025125628140704,
                "PROVIDED_CONSTANT_WEIGHT": 0.005025125628140704,
                "COMMON_CONSTANT_WEIGHT": 0.02512562814070352,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005025125628140704,
                "INPUT_VARIABLE_WEIGHT": 0.11557788944723618,
                "AXIS_CONSTANT_WEIGHT": 0.005025125628140704,
                "SHAPE_CONSTANT_WEIGHT": 0.005025125628140704,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005025125628140704,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.010050251256281407,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005025125628140704,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005025125628140704,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005025125628140704
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 6,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 6,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 6,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 6,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 6,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_28",
        "description": "extract columns from a 3D tensor given column indices",
        "target_program": "tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))",
        "source": "https://stackoverflow.com/questions/54274074/selecting-columns-from-3d-tensor-according-to-a-1d-tensor-of-indices-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[5, 3],  [0, 2]], [[7, 4],  [5, 1]], [[10, 20],  [15, 30]], [[11, 16],  [14, 12]], [[-2, -7],  [-4, 6]]],[1, 0, 1, 1, 0],]",
            "outputs": "[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]]"
        },
        "completions": [
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather(in1, in2, axis=2)\n  ",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.transpose(tf.gather(in1, in2, axis=1), perm=[0, 2, 1])\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.cast(tf.gather(in1, in2, axis=2), tf.int32)\n",
            "return tf.gather(in1, in2, axis=2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in1)[0]), in2], axis=1))\n",
            "return tf.gather(in1, in2, axis=2)\n"
        ],
        "tf_operators": {
            "tf.gather": 8,
            "tf.transpose": 1,
            "tf.range": 2,
            "tf.gather_nd": 2,
            "tf.shape": 2,
            "tf.stack": 2,
            "tf.cast": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                0,
                1
            ],
            [
                2
            ],
            [
                2
            ],
            [
                2
            ],
            [
                0,
                1
            ],
            [
                2
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 22,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 7,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 8,
            "tf_int64": 0,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0047169811320754715,
                "tf.add(x, y)": 0.0047169811320754715,
                "tf.add_n(inputs)": 0.0047169811320754715,
                "tf.argmax(input, axis)": 0.0047169811320754715,
                "tf.argmin(input, axis)": 0.0047169811320754715,
                "tf.argsort(values, axis, stable=True)": 0.0047169811320754715,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0047169811320754715,
                "tf.boolean_mask(tensor, mask)": 0.0047169811320754715,
                "tf.broadcast_to(input, shape)": 0.0047169811320754715,
                "tf.cast(x, dtype)": 0.009433962264150943,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0047169811320754715,
                "tf.concat(values, axis)": 0.0047169811320754715,
                "tf.constant(value)": 0.0047169811320754715,
                "tf.constant(value, dtype)": 0.0047169811320754715,
                "tf.divide(x, y)": 0.0047169811320754715,
                "tf.equal(x, y)": 0.0047169811320754715,
                "tf.exp(x)": 0.0047169811320754715,
                "tf.expand_dims(input, axis)": 0.0047169811320754715,
                "tf.eye(num_rows)": 0.0047169811320754715,
                "tf.eye(num_rows, num_columns)": 0.0047169811320754715,
                "tf.eye(num_rows, dtype)": 0.0047169811320754715,
                "tf.fill(dims, value)": 0.0047169811320754715,
                "tf.gather(params, indices)": 0.0047169811320754715,
                "tf.gather(params, indices, axis, batch_dims)": 0.04245283018867924,
                "tf.gather_nd(params, indices)": 0.014150943396226415,
                "tf.gather_nd(params, indices, batch_dims)": 0.0047169811320754715,
                "tf.greater(x, y)": 0.0047169811320754715,
                "tf.greater_equal(x, y)": 0.0047169811320754715,
                "tf.math.bincount(arr)": 0.0047169811320754715,
                "tf.math.ceil(x)": 0.0047169811320754715,
                "tf.math.count_nonzero(input)": 0.0047169811320754715,
                "tf.math.count_nonzero(input, axis)": 0.0047169811320754715,
                "tf.math.cumsum(x, axis)": 0.0047169811320754715,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0047169811320754715,
                "tf.math.divide_no_nan(x, y)": 0.0047169811320754715,
                "tf.math.floor(x)": 0.0047169811320754715,
                "tf.math.log(x)": 0.0047169811320754715,
                "tf.math.logical_and(x, y)": 0.0047169811320754715,
                "tf.math.logical_not(x)": 0.0047169811320754715,
                "tf.math.logical_or(x, y)": 0.0047169811320754715,
                "tf.math.logical_xor(x, y)": 0.0047169811320754715,
                "tf.math.negative(x)": 0.0047169811320754715,
                "tf.math.reciprocal(x)": 0.0047169811320754715,
                "tf.math.reciprocal_no_nan(x)": 0.0047169811320754715,
                "tf.math.segment_max(data, segment_ids)": 0.0047169811320754715,
                "tf.math.segment_mean(data, segment_ids)": 0.0047169811320754715,
                "tf.math.segment_min(data, segment_ids)": 0.0047169811320754715,
                "tf.math.segment_prod(data, segment_ids)": 0.0047169811320754715,
                "tf.math.segment_sum(data, segment_ids)": 0.0047169811320754715,
                "tf.math.squared_difference(x, y)": 0.0047169811320754715,
                "tf.math.top_k(input, k)": 0.0047169811320754715,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0047169811320754715,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0047169811320754715,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0047169811320754715,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0047169811320754715,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0047169811320754715,
                "tf.matmul(a, b)": 0.0047169811320754715,
                "tf.maximum(x, y)": 0.0047169811320754715,
                "tf.minimum(x, y)": 0.0047169811320754715,
                "tf.multiply(x, y)": 0.0047169811320754715,
                "tf.not_equal(x, y)": 0.0047169811320754715,
                "tf.one_hot(indices, depth)": 0.0047169811320754715,
                "tf.ones(shape)": 0.0047169811320754715,
                "tf.ones_like(input)": 0.0047169811320754715,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0047169811320754715,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0047169811320754715,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0047169811320754715,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0047169811320754715,
                "tf.range(start)": 0.014150943396226415,
                "tf.range(start, limit, delta)": 0.0047169811320754715,
                "tf.reduce_any(input_tensor, axis)": 0.0047169811320754715,
                "tf.reduce_all(input_tensor, axis)": 0.0047169811320754715,
                "tf.reduce_max(input_tensor)": 0.0047169811320754715,
                "tf.reduce_max(input_tensor, axis)": 0.0047169811320754715,
                "tf.reduce_mean(input_tensor)": 0.0047169811320754715,
                "tf.reduce_mean(input_tensor, axis)": 0.0047169811320754715,
                "tf.reduce_min(input_tensor)": 0.0047169811320754715,
                "tf.reduce_min(input_tensor, axis)": 0.0047169811320754715,
                "tf.reduce_prod(input_tensor, axis)": 0.0047169811320754715,
                "tf.reduce_sum(input_tensor)": 0.0047169811320754715,
                "tf.reduce_sum(input_tensor, axis)": 0.0047169811320754715,
                "tf.repeat(input, repeats)": 0.0047169811320754715,
                "tf.repeat(input, repeats, axis)": 0.0047169811320754715,
                "tf.reshape(tensor, shape)": 0.0047169811320754715,
                "tf.reverse(tensor, axis)": 0.0047169811320754715,
                "tf.roll(input, shift, axis)": 0.0047169811320754715,
                "tf.round(x)": 0.0047169811320754715,
                "tf.scatter_nd(indices, updates, shape)": 0.0047169811320754715,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0047169811320754715,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0047169811320754715,
                "tf.sequence_mask(lengths)": 0.0047169811320754715,
                "tf.sequence_mask(lengths, maxlen)": 0.0047169811320754715,
                "tf.shape(input)": 0.014150943396226415,
                "tf.sign(x)": 0.0047169811320754715,
                "tf.sort(values, axis)": 0.0047169811320754715,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0047169811320754715,
                "tf.sqrt(x)": 0.0047169811320754715,
                "tf.square(x)": 0.0047169811320754715,
                "tf.squeeze(input)": 0.0047169811320754715,
                "tf.squeeze(input, axis)": 0.0047169811320754715,
                "tf.stack(values, axis)": 0.014150943396226415,
                "tf.subtract(x, y)": 0.0047169811320754715,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0047169811320754715,
                "tf.tensordot(a, b, axes)": 0.0047169811320754715,
                "tf.tile(input, multiples)": 0.0047169811320754715,
                "tf.transpose(a)": 0.0047169811320754715,
                "tf.transpose(a, perm)": 0.0047169811320754715,
                "tf.unique_with_counts(x)": 0.0047169811320754715,
                "tf.unstack(value, axis)": 0.0047169811320754715,
                "tf.where(condition)": 0.0047169811320754715,
                "tf.where(condition, x, y)": 0.0047169811320754715,
                "tf.zeros(shape)": 0.0047169811320754715,
                "tf.zeros_like(input)": 0.0047169811320754715,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0047169811320754715,
                "tf.sparse.add(a, b)": 0.0047169811320754715,
                "tf.sparse.concat(axis, sp_inputs)": 0.0047169811320754715,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0047169811320754715,
                "tf.sparse.from_dense(tensor)": 0.0047169811320754715,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0047169811320754715,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0047169811320754715,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0047169811320754715,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0047169811320754715,
                "tf.sparse.reset_shape(sp_input)": 0.0047169811320754715,
                "tf.sparse.reshape(sp_input, shape)": 0.0047169811320754715,
                "tf.sparse.retain(sp_input, to_retain)": 0.0047169811320754715,
                "tf.sparse.slice(sp_input, start, size)": 0.0047169811320754715,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0047169811320754715,
                "tf.sparse.to_dense(sp_input)": 0.0047169811320754715,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0047169811320754715,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0047169811320754715,
                "tf.sparse.transpose(sp_input)": 0.0047169811320754715,
                "tf.sparse.transpose(sp_input, perm)": 0.0047169811320754715,
                "IndexingAxis1Operation": 0.0047169811320754715,
                "IndexingOperation": 0.014150943396226415,
                "PairCreationOperation": 0.0047169811320754715,
                "SingletonTupleCreationOperation": 0.0047169811320754715,
                "SlicingAxis0BothOperation": 0.0047169811320754715,
                "SlicingAxis0LeftOperation": 0.0047169811320754715,
                "SlicingAxis0RightOperation": 0.0047169811320754715,
                "SlicingAxis1BothOperation": 0.0047169811320754715,
                "SlicingAxis1LeftOperation": 0.0047169811320754715,
                "SlicingAxis1RightOperation": 0.0047169811320754715,
                "TripleCreationOperation": 0.0047169811320754715,
                "PROVIDED_CONSTANT_WEIGHT": 0.0047169811320754715,
                "COMMON_CONSTANT_WEIGHT": 0.03773584905660377,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0047169811320754715,
                "INPUT_VARIABLE_WEIGHT": 0.10849056603773585,
                "AXIS_CONSTANT_WEIGHT": 0.04245283018867924,
                "SHAPE_CONSTANT_WEIGHT": 0.0047169811320754715,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0047169811320754715,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.009433962264150943,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0047169811320754715,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0047169811320754715,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0047169811320754715
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 5,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 6,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_29",
        "description": "place continuous values into buckets given bucket boundaries",
        "target_program": "tf.searchsorted(in1, in2, side='left')",
        "source": "https://stackoverflow.com/questions/54155085/bucketing-continous-value-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0],[0.1, -10, -0.1, 1.1, 0.41],]",
            "outputs": "[6, 0, 5, 11, 8]"
        },
        "completions": [
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2, side='left')\n",
            "return tf.searchsorted(in1, in2)",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')\n",
            "return tf.searchsorted(in1, in2, side='right')"
        ],
        "tf_operators": {
            "tf.searchsorted": 10
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005714285714285714,
                "tf.add(x, y)": 0.005714285714285714,
                "tf.add_n(inputs)": 0.005714285714285714,
                "tf.argmax(input, axis)": 0.005714285714285714,
                "tf.argmin(input, axis)": 0.005714285714285714,
                "tf.argsort(values, axis, stable=True)": 0.005714285714285714,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005714285714285714,
                "tf.boolean_mask(tensor, mask)": 0.005714285714285714,
                "tf.broadcast_to(input, shape)": 0.005714285714285714,
                "tf.cast(x, dtype)": 0.005714285714285714,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005714285714285714,
                "tf.concat(values, axis)": 0.005714285714285714,
                "tf.constant(value)": 0.005714285714285714,
                "tf.constant(value, dtype)": 0.005714285714285714,
                "tf.divide(x, y)": 0.005714285714285714,
                "tf.equal(x, y)": 0.005714285714285714,
                "tf.exp(x)": 0.005714285714285714,
                "tf.expand_dims(input, axis)": 0.005714285714285714,
                "tf.eye(num_rows)": 0.005714285714285714,
                "tf.eye(num_rows, num_columns)": 0.005714285714285714,
                "tf.eye(num_rows, dtype)": 0.005714285714285714,
                "tf.fill(dims, value)": 0.005714285714285714,
                "tf.gather(params, indices)": 0.005714285714285714,
                "tf.gather(params, indices, axis, batch_dims)": 0.005714285714285714,
                "tf.gather_nd(params, indices)": 0.005714285714285714,
                "tf.gather_nd(params, indices, batch_dims)": 0.005714285714285714,
                "tf.greater(x, y)": 0.005714285714285714,
                "tf.greater_equal(x, y)": 0.005714285714285714,
                "tf.math.bincount(arr)": 0.005714285714285714,
                "tf.math.ceil(x)": 0.005714285714285714,
                "tf.math.count_nonzero(input)": 0.005714285714285714,
                "tf.math.count_nonzero(input, axis)": 0.005714285714285714,
                "tf.math.cumsum(x, axis)": 0.005714285714285714,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005714285714285714,
                "tf.math.divide_no_nan(x, y)": 0.005714285714285714,
                "tf.math.floor(x)": 0.005714285714285714,
                "tf.math.log(x)": 0.005714285714285714,
                "tf.math.logical_and(x, y)": 0.005714285714285714,
                "tf.math.logical_not(x)": 0.005714285714285714,
                "tf.math.logical_or(x, y)": 0.005714285714285714,
                "tf.math.logical_xor(x, y)": 0.005714285714285714,
                "tf.math.negative(x)": 0.005714285714285714,
                "tf.math.reciprocal(x)": 0.005714285714285714,
                "tf.math.reciprocal_no_nan(x)": 0.005714285714285714,
                "tf.math.segment_max(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_mean(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_min(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_prod(data, segment_ids)": 0.005714285714285714,
                "tf.math.segment_sum(data, segment_ids)": 0.005714285714285714,
                "tf.math.squared_difference(x, y)": 0.005714285714285714,
                "tf.math.top_k(input, k)": 0.005714285714285714,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005714285714285714,
                "tf.matmul(a, b)": 0.005714285714285714,
                "tf.maximum(x, y)": 0.005714285714285714,
                "tf.minimum(x, y)": 0.005714285714285714,
                "tf.multiply(x, y)": 0.005714285714285714,
                "tf.not_equal(x, y)": 0.005714285714285714,
                "tf.one_hot(indices, depth)": 0.005714285714285714,
                "tf.ones(shape)": 0.005714285714285714,
                "tf.ones_like(input)": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005714285714285714,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005714285714285714,
                "tf.range(start)": 0.005714285714285714,
                "tf.range(start, limit, delta)": 0.005714285714285714,
                "tf.reduce_any(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_all(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_max(input_tensor)": 0.005714285714285714,
                "tf.reduce_max(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_mean(input_tensor)": 0.005714285714285714,
                "tf.reduce_mean(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_min(input_tensor)": 0.005714285714285714,
                "tf.reduce_min(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_prod(input_tensor, axis)": 0.005714285714285714,
                "tf.reduce_sum(input_tensor)": 0.005714285714285714,
                "tf.reduce_sum(input_tensor, axis)": 0.005714285714285714,
                "tf.repeat(input, repeats)": 0.005714285714285714,
                "tf.repeat(input, repeats, axis)": 0.005714285714285714,
                "tf.reshape(tensor, shape)": 0.005714285714285714,
                "tf.reverse(tensor, axis)": 0.005714285714285714,
                "tf.roll(input, shift, axis)": 0.005714285714285714,
                "tf.round(x)": 0.005714285714285714,
                "tf.scatter_nd(indices, updates, shape)": 0.005714285714285714,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005714285714285714,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005714285714285714,
                "tf.sequence_mask(lengths)": 0.005714285714285714,
                "tf.sequence_mask(lengths, maxlen)": 0.005714285714285714,
                "tf.shape(input)": 0.005714285714285714,
                "tf.sign(x)": 0.005714285714285714,
                "tf.sort(values, axis)": 0.005714285714285714,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005714285714285714,
                "tf.sqrt(x)": 0.005714285714285714,
                "tf.square(x)": 0.005714285714285714,
                "tf.squeeze(input)": 0.005714285714285714,
                "tf.squeeze(input, axis)": 0.005714285714285714,
                "tf.stack(values, axis)": 0.005714285714285714,
                "tf.subtract(x, y)": 0.005714285714285714,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005714285714285714,
                "tf.tensordot(a, b, axes)": 0.005714285714285714,
                "tf.tile(input, multiples)": 0.005714285714285714,
                "tf.transpose(a)": 0.005714285714285714,
                "tf.transpose(a, perm)": 0.005714285714285714,
                "tf.unique_with_counts(x)": 0.005714285714285714,
                "tf.unstack(value, axis)": 0.005714285714285714,
                "tf.where(condition)": 0.005714285714285714,
                "tf.where(condition, x, y)": 0.005714285714285714,
                "tf.zeros(shape)": 0.005714285714285714,
                "tf.zeros_like(input)": 0.005714285714285714,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005714285714285714,
                "tf.sparse.add(a, b)": 0.005714285714285714,
                "tf.sparse.concat(axis, sp_inputs)": 0.005714285714285714,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005714285714285714,
                "tf.sparse.from_dense(tensor)": 0.005714285714285714,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005714285714285714,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005714285714285714,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005714285714285714,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005714285714285714,
                "tf.sparse.reset_shape(sp_input)": 0.005714285714285714,
                "tf.sparse.reshape(sp_input, shape)": 0.005714285714285714,
                "tf.sparse.retain(sp_input, to_retain)": 0.005714285714285714,
                "tf.sparse.slice(sp_input, start, size)": 0.005714285714285714,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005714285714285714,
                "tf.sparse.to_dense(sp_input)": 0.005714285714285714,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005714285714285714,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005714285714285714,
                "tf.sparse.transpose(sp_input)": 0.005714285714285714,
                "tf.sparse.transpose(sp_input, perm)": 0.005714285714285714,
                "IndexingAxis1Operation": 0.005714285714285714,
                "IndexingOperation": 0.005714285714285714,
                "PairCreationOperation": 0.005714285714285714,
                "SingletonTupleCreationOperation": 0.005714285714285714,
                "SlicingAxis0BothOperation": 0.005714285714285714,
                "SlicingAxis0LeftOperation": 0.005714285714285714,
                "SlicingAxis0RightOperation": 0.005714285714285714,
                "SlicingAxis1BothOperation": 0.005714285714285714,
                "SlicingAxis1LeftOperation": 0.005714285714285714,
                "SlicingAxis1RightOperation": 0.005714285714285714,
                "TripleCreationOperation": 0.005714285714285714,
                "PROVIDED_CONSTANT_WEIGHT": 0.005714285714285714,
                "COMMON_CONSTANT_WEIGHT": 0.005714285714285714,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005714285714285714,
                "INPUT_VARIABLE_WEIGHT": 0.12,
                "AXIS_CONSTANT_WEIGHT": 0.005714285714285714,
                "SHAPE_CONSTANT_WEIGHT": 0.005714285714285714,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005714285714285714,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005714285714285714
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 7,
                "tf.add(x, y)": 7,
                "tf.add_n(inputs)": 7,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 7,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 7,
                "tf.broadcast_to(input, shape)": 7,
                "tf.cast(x, dtype)": 7,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 7,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 7,
                "tf.divide(x, y)": 7,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 7,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 7,
                "tf.eye(num_rows, num_columns)": 7,
                "tf.eye(num_rows, dtype)": 7,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 7,
                "tf.gather_nd(params, indices, batch_dims)": 7,
                "tf.greater(x, y)": 7,
                "tf.greater_equal(x, y)": 7,
                "tf.math.bincount(arr)": 7,
                "tf.math.ceil(x)": 7,
                "tf.math.count_nonzero(input)": 7,
                "tf.math.count_nonzero(input, axis)": 7,
                "tf.math.cumsum(x, axis)": 7,
                "tf.math.cumsum(x, axis, exclusive=True)": 7,
                "tf.math.divide_no_nan(x, y)": 7,
                "tf.math.floor(x)": 7,
                "tf.math.log(x)": 7,
                "tf.math.logical_and(x, y)": 7,
                "tf.math.logical_not(x)": 7,
                "tf.math.logical_or(x, y)": 7,
                "tf.math.logical_xor(x, y)": 7,
                "tf.math.negative(x)": 7,
                "tf.math.reciprocal(x)": 7,
                "tf.math.reciprocal_no_nan(x)": 7,
                "tf.math.segment_max(data, segment_ids)": 7,
                "tf.math.segment_mean(data, segment_ids)": 7,
                "tf.math.segment_min(data, segment_ids)": 7,
                "tf.math.segment_prod(data, segment_ids)": 7,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 7,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 7,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 7,
                "tf.maximum(x, y)": 7,
                "tf.minimum(x, y)": 7,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 7,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 7,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 7,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 7,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 7,
                "tf.range(start)": 7,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 7,
                "tf.reduce_all(input_tensor, axis)": 7,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 7,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 7,
                "tf.reduce_min(input_tensor)": 7,
                "tf.reduce_min(input_tensor, axis)": 7,
                "tf.reduce_prod(input_tensor, axis)": 7,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 7,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 7,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 7,
                "tf.roll(input, shift, axis)": 7,
                "tf.round(x)": 7,
                "tf.scatter_nd(indices, updates, shape)": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 7,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 7,
                "tf.sequence_mask(lengths)": 7,
                "tf.sequence_mask(lengths, maxlen)": 7,
                "tf.shape(input)": 7,
                "tf.sign(x)": 7,
                "tf.sort(values, axis)": 7,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 7,
                "tf.sqrt(x)": 7,
                "tf.square(x)": 7,
                "tf.squeeze(input)": 7,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 7,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 7,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 7,
                "tf.unique_with_counts(x)": 7,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 7,
                "tf.zeros_like(input)": 7,
                "tf.SparseTensor(indices, values, dense_shape)": 7,
                "tf.sparse.add(a, b)": 7,
                "tf.sparse.concat(axis, sp_inputs)": 7,
                "tf.sparse.expand_dims(sp_input, axis)": 7,
                "tf.sparse.from_dense(tensor)": 7,
                "tf.sparse.maximum(sp_a, sp_b)": 7,
                "tf.sparse.minimum(sp_a, sp_b)": 7,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 7,
                "tf.sparse.reset_shape(sp_input)": 7,
                "tf.sparse.reshape(sp_input, shape)": 7,
                "tf.sparse.retain(sp_input, to_retain)": 7,
                "tf.sparse.slice(sp_input, start, size)": 7,
                "tf.sparse.split(sp_input, num_split, axis)": 7,
                "tf.sparse.to_dense(sp_input)": 7,
                "tf.sparse.to_dense(sp_input, default_value)": 7,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 7,
                "tf.sparse.transpose(sp_input)": 7,
                "tf.sparse.transpose(sp_input, perm)": 7,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 7,
                "SlicingAxis0BothOperation": 7,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 7,
                "SlicingAxis1BothOperation": 7,
                "SlicingAxis1LeftOperation": 7,
                "SlicingAxis1RightOperation": 7,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 7,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 7,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 7,
                "SHAPE_CONSTANT_WEIGHT": 7,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_30",
        "description": "compute Euclidean distance between two tensors",
        "target_program": "tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
        "source": "https://stackoverflow.com/questions/54147780/tensorflow-how-to-calculate-the-euclidean-distance-between-two-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[1., 2.], [3., 4.], [5., 6.]],[[9., 4.], [8., 5.], [7., 6.]],]",
            "outputs": "[[math.sqrt(68), math.sqrt(58), math.sqrt(52)],    [math.sqrt(36), math.sqrt(26), math.sqrt(20)],    [math.sqrt(20), math.sqrt(10), math.sqrt(4)]]"
        },
        "completions": [
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))",
            "return tf.norm(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0), axis=2)\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))\n",
            "diff = tf.subtract(in1, in2)\nsquare_diff = tf.square(diff)\nsum_square_diff = tf.reduce_sum(square_diff, axis=1)\neuclidean_distance = tf.sqrt(sum_square_diff)\nreturn euclidean_distance\n"
        ],
        "tf_operators": {
            "tf.norm": 2,
            "tf.expand_dims": 9,
            "tf.square": 8,
            "tf.sqrt": 8,
            "tf.reduce_sum": 8,
            "tf.subtract": 4
        },
        "coverage_percentage": 100.0,
        "total_covered": 5,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 19,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 9,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004149377593360996,
                "tf.add(x, y)": 0.004149377593360996,
                "tf.add_n(inputs)": 0.004149377593360996,
                "tf.argmax(input, axis)": 0.004149377593360996,
                "tf.argmin(input, axis)": 0.004149377593360996,
                "tf.argsort(values, axis, stable=True)": 0.004149377593360996,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004149377593360996,
                "tf.boolean_mask(tensor, mask)": 0.004149377593360996,
                "tf.broadcast_to(input, shape)": 0.004149377593360996,
                "tf.cast(x, dtype)": 0.004149377593360996,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004149377593360996,
                "tf.concat(values, axis)": 0.004149377593360996,
                "tf.constant(value)": 0.004149377593360996,
                "tf.constant(value, dtype)": 0.004149377593360996,
                "tf.divide(x, y)": 0.004149377593360996,
                "tf.equal(x, y)": 0.004149377593360996,
                "tf.exp(x)": 0.004149377593360996,
                "tf.expand_dims(input, axis)": 0.07883817427385892,
                "tf.eye(num_rows)": 0.004149377593360996,
                "tf.eye(num_rows, num_columns)": 0.004149377593360996,
                "tf.eye(num_rows, dtype)": 0.004149377593360996,
                "tf.fill(dims, value)": 0.004149377593360996,
                "tf.gather(params, indices)": 0.004149377593360996,
                "tf.gather(params, indices, axis, batch_dims)": 0.004149377593360996,
                "tf.gather_nd(params, indices)": 0.004149377593360996,
                "tf.gather_nd(params, indices, batch_dims)": 0.004149377593360996,
                "tf.greater(x, y)": 0.004149377593360996,
                "tf.greater_equal(x, y)": 0.004149377593360996,
                "tf.math.bincount(arr)": 0.004149377593360996,
                "tf.math.ceil(x)": 0.004149377593360996,
                "tf.math.count_nonzero(input)": 0.004149377593360996,
                "tf.math.count_nonzero(input, axis)": 0.004149377593360996,
                "tf.math.cumsum(x, axis)": 0.004149377593360996,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004149377593360996,
                "tf.math.divide_no_nan(x, y)": 0.004149377593360996,
                "tf.math.floor(x)": 0.004149377593360996,
                "tf.math.log(x)": 0.004149377593360996,
                "tf.math.logical_and(x, y)": 0.004149377593360996,
                "tf.math.logical_not(x)": 0.004149377593360996,
                "tf.math.logical_or(x, y)": 0.004149377593360996,
                "tf.math.logical_xor(x, y)": 0.004149377593360996,
                "tf.math.negative(x)": 0.004149377593360996,
                "tf.math.reciprocal(x)": 0.004149377593360996,
                "tf.math.reciprocal_no_nan(x)": 0.004149377593360996,
                "tf.math.segment_max(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_mean(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_min(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_prod(data, segment_ids)": 0.004149377593360996,
                "tf.math.segment_sum(data, segment_ids)": 0.004149377593360996,
                "tf.math.squared_difference(x, y)": 0.004149377593360996,
                "tf.math.top_k(input, k)": 0.004149377593360996,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004149377593360996,
                "tf.matmul(a, b)": 0.004149377593360996,
                "tf.maximum(x, y)": 0.004149377593360996,
                "tf.minimum(x, y)": 0.004149377593360996,
                "tf.multiply(x, y)": 0.004149377593360996,
                "tf.not_equal(x, y)": 0.004149377593360996,
                "tf.one_hot(indices, depth)": 0.004149377593360996,
                "tf.ones(shape)": 0.004149377593360996,
                "tf.ones_like(input)": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004149377593360996,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004149377593360996,
                "tf.range(start)": 0.004149377593360996,
                "tf.range(start, limit, delta)": 0.004149377593360996,
                "tf.reduce_any(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_all(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_max(input_tensor)": 0.004149377593360996,
                "tf.reduce_max(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_mean(input_tensor)": 0.004149377593360996,
                "tf.reduce_mean(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_min(input_tensor)": 0.004149377593360996,
                "tf.reduce_min(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_prod(input_tensor, axis)": 0.004149377593360996,
                "tf.reduce_sum(input_tensor)": 0.004149377593360996,
                "tf.reduce_sum(input_tensor, axis)": 0.004149377593360996,
                "tf.repeat(input, repeats)": 0.004149377593360996,
                "tf.repeat(input, repeats, axis)": 0.004149377593360996,
                "tf.reshape(tensor, shape)": 0.004149377593360996,
                "tf.reverse(tensor, axis)": 0.004149377593360996,
                "tf.roll(input, shift, axis)": 0.004149377593360996,
                "tf.round(x)": 0.004149377593360996,
                "tf.scatter_nd(indices, updates, shape)": 0.004149377593360996,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004149377593360996,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004149377593360996,
                "tf.sequence_mask(lengths)": 0.004149377593360996,
                "tf.sequence_mask(lengths, maxlen)": 0.004149377593360996,
                "tf.shape(input)": 0.004149377593360996,
                "tf.sign(x)": 0.004149377593360996,
                "tf.sort(values, axis)": 0.004149377593360996,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004149377593360996,
                "tf.sqrt(x)": 0.03734439834024896,
                "tf.square(x)": 0.03734439834024896,
                "tf.squeeze(input)": 0.004149377593360996,
                "tf.squeeze(input, axis)": 0.004149377593360996,
                "tf.stack(values, axis)": 0.004149377593360996,
                "tf.subtract(x, y)": 0.02074688796680498,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004149377593360996,
                "tf.tensordot(a, b, axes)": 0.004149377593360996,
                "tf.tile(input, multiples)": 0.004149377593360996,
                "tf.transpose(a)": 0.004149377593360996,
                "tf.transpose(a, perm)": 0.004149377593360996,
                "tf.unique_with_counts(x)": 0.004149377593360996,
                "tf.unstack(value, axis)": 0.004149377593360996,
                "tf.where(condition)": 0.004149377593360996,
                "tf.where(condition, x, y)": 0.004149377593360996,
                "tf.zeros(shape)": 0.004149377593360996,
                "tf.zeros_like(input)": 0.004149377593360996,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004149377593360996,
                "tf.sparse.add(a, b)": 0.004149377593360996,
                "tf.sparse.concat(axis, sp_inputs)": 0.004149377593360996,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004149377593360996,
                "tf.sparse.from_dense(tensor)": 0.004149377593360996,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004149377593360996,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004149377593360996,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004149377593360996,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004149377593360996,
                "tf.sparse.reset_shape(sp_input)": 0.004149377593360996,
                "tf.sparse.reshape(sp_input, shape)": 0.004149377593360996,
                "tf.sparse.retain(sp_input, to_retain)": 0.004149377593360996,
                "tf.sparse.slice(sp_input, start, size)": 0.004149377593360996,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004149377593360996,
                "tf.sparse.to_dense(sp_input)": 0.004149377593360996,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004149377593360996,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004149377593360996,
                "tf.sparse.transpose(sp_input)": 0.004149377593360996,
                "tf.sparse.transpose(sp_input, perm)": 0.004149377593360996,
                "IndexingAxis1Operation": 0.004149377593360996,
                "IndexingOperation": 0.004149377593360996,
                "PairCreationOperation": 0.004149377593360996,
                "SingletonTupleCreationOperation": 0.004149377593360996,
                "SlicingAxis0BothOperation": 0.004149377593360996,
                "SlicingAxis0LeftOperation": 0.004149377593360996,
                "SlicingAxis0RightOperation": 0.004149377593360996,
                "SlicingAxis1BothOperation": 0.004149377593360996,
                "SlicingAxis1LeftOperation": 0.004149377593360996,
                "SlicingAxis1RightOperation": 0.004149377593360996,
                "TripleCreationOperation": 0.004149377593360996,
                "PROVIDED_CONSTANT_WEIGHT": 0.004149377593360996,
                "COMMON_CONSTANT_WEIGHT": 0.08298755186721991,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004149377593360996,
                "INPUT_VARIABLE_WEIGHT": 0.08713692946058091,
                "AXIS_CONSTANT_WEIGHT": 0.04149377593360996,
                "SHAPE_CONSTANT_WEIGHT": 0.004149377593360996,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004149377593360996,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004149377593360996
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 5,
                "tf.square(x)": 5,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 6,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_31",
        "description": "squared error between two tensors, one being a sparse tensor",
        "target_program": "tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))",
        "source": "https://stackoverflow.com/questions/45032668/tensorflow-how-to-compute-the-square-error-between-a-tensor-and-a-sparse-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "tf.SparseTensor(indices=[[0, 0], [0, 1], [1, 1]], values=[1.0, 1.5, -2.0], dense_shape=[2, 2]), [[3.0, 1.0], [0.2, -1.0]],",
            "outputs": "5.29"
        },
        "completions": [
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.math.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1,\ndefault_value=0.0), in2))",
            "return tf.reduce_mean(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n",
            "return tf.reduce_sum(tf.math.squared_difference(tf.sparse.to_dense(in1), in2))\n"
        ],
        "tf_operators": {
            "tf.math.squared_difference": 10,
            "tf.reduce_sum": 8,
            "tf.sparse.to_dense": 10,
            "tf.math.reduce_sum": 1,
            "tf.reduce_mean": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0049261083743842365,
                "tf.add(x, y)": 0.0049261083743842365,
                "tf.add_n(inputs)": 0.0049261083743842365,
                "tf.argmax(input, axis)": 0.0049261083743842365,
                "tf.argmin(input, axis)": 0.0049261083743842365,
                "tf.argsort(values, axis, stable=True)": 0.0049261083743842365,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0049261083743842365,
                "tf.boolean_mask(tensor, mask)": 0.0049261083743842365,
                "tf.broadcast_to(input, shape)": 0.0049261083743842365,
                "tf.cast(x, dtype)": 0.0049261083743842365,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0049261083743842365,
                "tf.concat(values, axis)": 0.0049261083743842365,
                "tf.constant(value)": 0.0049261083743842365,
                "tf.constant(value, dtype)": 0.0049261083743842365,
                "tf.divide(x, y)": 0.0049261083743842365,
                "tf.equal(x, y)": 0.0049261083743842365,
                "tf.exp(x)": 0.0049261083743842365,
                "tf.expand_dims(input, axis)": 0.0049261083743842365,
                "tf.eye(num_rows)": 0.0049261083743842365,
                "tf.eye(num_rows, num_columns)": 0.0049261083743842365,
                "tf.eye(num_rows, dtype)": 0.0049261083743842365,
                "tf.fill(dims, value)": 0.0049261083743842365,
                "tf.gather(params, indices)": 0.0049261083743842365,
                "tf.gather(params, indices, axis, batch_dims)": 0.0049261083743842365,
                "tf.gather_nd(params, indices)": 0.0049261083743842365,
                "tf.gather_nd(params, indices, batch_dims)": 0.0049261083743842365,
                "tf.greater(x, y)": 0.0049261083743842365,
                "tf.greater_equal(x, y)": 0.0049261083743842365,
                "tf.math.bincount(arr)": 0.0049261083743842365,
                "tf.math.ceil(x)": 0.0049261083743842365,
                "tf.math.count_nonzero(input)": 0.0049261083743842365,
                "tf.math.count_nonzero(input, axis)": 0.0049261083743842365,
                "tf.math.cumsum(x, axis)": 0.0049261083743842365,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0049261083743842365,
                "tf.math.divide_no_nan(x, y)": 0.0049261083743842365,
                "tf.math.floor(x)": 0.0049261083743842365,
                "tf.math.log(x)": 0.0049261083743842365,
                "tf.math.logical_and(x, y)": 0.0049261083743842365,
                "tf.math.logical_not(x)": 0.0049261083743842365,
                "tf.math.logical_or(x, y)": 0.0049261083743842365,
                "tf.math.logical_xor(x, y)": 0.0049261083743842365,
                "tf.math.negative(x)": 0.0049261083743842365,
                "tf.math.reciprocal(x)": 0.0049261083743842365,
                "tf.math.reciprocal_no_nan(x)": 0.0049261083743842365,
                "tf.math.segment_max(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_mean(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_min(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_prod(data, segment_ids)": 0.0049261083743842365,
                "tf.math.segment_sum(data, segment_ids)": 0.0049261083743842365,
                "tf.math.squared_difference(x, y)": 0.054187192118226604,
                "tf.math.top_k(input, k)": 0.0049261083743842365,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0049261083743842365,
                "tf.matmul(a, b)": 0.0049261083743842365,
                "tf.maximum(x, y)": 0.0049261083743842365,
                "tf.minimum(x, y)": 0.0049261083743842365,
                "tf.multiply(x, y)": 0.0049261083743842365,
                "tf.not_equal(x, y)": 0.0049261083743842365,
                "tf.one_hot(indices, depth)": 0.0049261083743842365,
                "tf.ones(shape)": 0.0049261083743842365,
                "tf.ones_like(input)": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0049261083743842365,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0049261083743842365,
                "tf.range(start)": 0.0049261083743842365,
                "tf.range(start, limit, delta)": 0.0049261083743842365,
                "tf.reduce_any(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_all(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_max(input_tensor)": 0.0049261083743842365,
                "tf.reduce_max(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_mean(input_tensor)": 0.009852216748768473,
                "tf.reduce_mean(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_min(input_tensor)": 0.0049261083743842365,
                "tf.reduce_min(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_prod(input_tensor, axis)": 0.0049261083743842365,
                "tf.reduce_sum(input_tensor)": 0.04433497536945813,
                "tf.reduce_sum(input_tensor, axis)": 0.0049261083743842365,
                "tf.repeat(input, repeats)": 0.0049261083743842365,
                "tf.repeat(input, repeats, axis)": 0.0049261083743842365,
                "tf.reshape(tensor, shape)": 0.0049261083743842365,
                "tf.reverse(tensor, axis)": 0.0049261083743842365,
                "tf.roll(input, shift, axis)": 0.0049261083743842365,
                "tf.round(x)": 0.0049261083743842365,
                "tf.scatter_nd(indices, updates, shape)": 0.0049261083743842365,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0049261083743842365,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0049261083743842365,
                "tf.sequence_mask(lengths)": 0.0049261083743842365,
                "tf.sequence_mask(lengths, maxlen)": 0.0049261083743842365,
                "tf.shape(input)": 0.0049261083743842365,
                "tf.sign(x)": 0.0049261083743842365,
                "tf.sort(values, axis)": 0.0049261083743842365,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0049261083743842365,
                "tf.sqrt(x)": 0.0049261083743842365,
                "tf.square(x)": 0.0049261083743842365,
                "tf.squeeze(input)": 0.0049261083743842365,
                "tf.squeeze(input, axis)": 0.0049261083743842365,
                "tf.stack(values, axis)": 0.0049261083743842365,
                "tf.subtract(x, y)": 0.0049261083743842365,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0049261083743842365,
                "tf.tensordot(a, b, axes)": 0.0049261083743842365,
                "tf.tile(input, multiples)": 0.0049261083743842365,
                "tf.transpose(a)": 0.0049261083743842365,
                "tf.transpose(a, perm)": 0.0049261083743842365,
                "tf.unique_with_counts(x)": 0.0049261083743842365,
                "tf.unstack(value, axis)": 0.0049261083743842365,
                "tf.where(condition)": 0.0049261083743842365,
                "tf.where(condition, x, y)": 0.0049261083743842365,
                "tf.zeros(shape)": 0.0049261083743842365,
                "tf.zeros_like(input)": 0.0049261083743842365,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0049261083743842365,
                "tf.sparse.add(a, b)": 0.0049261083743842365,
                "tf.sparse.concat(axis, sp_inputs)": 0.0049261083743842365,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0049261083743842365,
                "tf.sparse.from_dense(tensor)": 0.0049261083743842365,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0049261083743842365,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0049261083743842365,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0049261083743842365,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0049261083743842365,
                "tf.sparse.reset_shape(sp_input)": 0.0049261083743842365,
                "tf.sparse.reshape(sp_input, shape)": 0.0049261083743842365,
                "tf.sparse.retain(sp_input, to_retain)": 0.0049261083743842365,
                "tf.sparse.slice(sp_input, start, size)": 0.0049261083743842365,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0049261083743842365,
                "tf.sparse.to_dense(sp_input)": 0.04926108374384237,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0049261083743842365,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0049261083743842365,
                "tf.sparse.transpose(sp_input)": 0.0049261083743842365,
                "tf.sparse.transpose(sp_input, perm)": 0.0049261083743842365,
                "IndexingAxis1Operation": 0.0049261083743842365,
                "IndexingOperation": 0.0049261083743842365,
                "PairCreationOperation": 0.0049261083743842365,
                "SingletonTupleCreationOperation": 0.0049261083743842365,
                "SlicingAxis0BothOperation": 0.0049261083743842365,
                "SlicingAxis0LeftOperation": 0.0049261083743842365,
                "SlicingAxis0RightOperation": 0.0049261083743842365,
                "SlicingAxis1BothOperation": 0.0049261083743842365,
                "SlicingAxis1LeftOperation": 0.0049261083743842365,
                "SlicingAxis1RightOperation": 0.0049261083743842365,
                "TripleCreationOperation": 0.0049261083743842365,
                "PROVIDED_CONSTANT_WEIGHT": 0.0049261083743842365,
                "COMMON_CONSTANT_WEIGHT": 0.0049261083743842365,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0049261083743842365,
                "INPUT_VARIABLE_WEIGHT": 0.10344827586206896,
                "AXIS_CONSTANT_WEIGHT": 0.0049261083743842365,
                "SHAPE_CONSTANT_WEIGHT": 0.0049261083743842365,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0049261083743842365,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0049261083743842365
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 4,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 7,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 4,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 4,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_32",
        "description": "weighted sum across rows, where the column index is the weight",
        "target_program": "tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)",
        "source": "https://stackoverflow.com/questions/48659449/how-to-compute-the-weighted-sum-of-a-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]],]",
            "outputs": "[1.3, 1.5, 2.0]"
        },
        "completions": [
            "weights = tf.constant([[0, 1, 2, 3]], dtype=tf.float32)\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(in1.shape[1]), tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "weights = tf.range(tf.shape(in1)[1])\nreturn tf.reduce_sum(tf.multiply(in1, weights), axis=1)\n",
            "return tf.reduce_sum(tf.multiply(tf.cast(tf.range(tf.shape(in1)[1]), tf.float32), in1), axis=1)",
            "def transform(in1):\n    weighted_sum = tf.reduce_sum(in1 * tf.constant([[0], [1], [2], [3]]), axis=1)\n    return weighted_sum\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.range(1, tf.shape(in1)[1] + 1)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.reshape(tf.range(tf.shape(in1)[1], dtype=tf.float32), (1, -1))), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.constant([[0, 1, 2, 3]], dtype=tf.float32)), axis=1)",
            "return tf.reduce_sum(tf.multiply(in1, tf.cast(tf.range(tf.shape(in1)[-1]), in1.dtype)), axis=1)"
        ],
        "tf_operators": {
            "tf.float32": 5,
            "tf.reduce_sum": 10,
            "tf.constant": 3,
            "tf.multiply": 9,
            "tf.range": 7,
            "tf.cast": 3,
            "tf.shape": 6,
            "tf.reshape": 1
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                1,
                1,
                1,
                1
            ],
            [
                1,
                1,
                -1,
                1
            ],
            [
                0,
                1,
                2,
                3,
                1
            ],
            [
                -1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 1,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 16,
            "shape": 3,
            "tf_bool": 0,
            "provided": 0,
            "common": 28,
            "shape_tuple": 0,
            "tf_float32": 5,
            "axis": 3,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00411522633744856,
                "tf.add(x, y)": 0.00411522633744856,
                "tf.add_n(inputs)": 0.00411522633744856,
                "tf.argmax(input, axis)": 0.00411522633744856,
                "tf.argmin(input, axis)": 0.00411522633744856,
                "tf.argsort(values, axis, stable=True)": 0.00411522633744856,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.00411522633744856,
                "tf.boolean_mask(tensor, mask)": 0.00411522633744856,
                "tf.broadcast_to(input, shape)": 0.00411522633744856,
                "tf.cast(x, dtype)": 0.01646090534979424,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00411522633744856,
                "tf.concat(values, axis)": 0.00411522633744856,
                "tf.constant(value)": 0.00823045267489712,
                "tf.constant(value, dtype)": 0.00411522633744856,
                "tf.divide(x, y)": 0.00411522633744856,
                "tf.equal(x, y)": 0.00411522633744856,
                "tf.exp(x)": 0.00411522633744856,
                "tf.expand_dims(input, axis)": 0.00411522633744856,
                "tf.eye(num_rows)": 0.00411522633744856,
                "tf.eye(num_rows, num_columns)": 0.00411522633744856,
                "tf.eye(num_rows, dtype)": 0.00411522633744856,
                "tf.fill(dims, value)": 0.00411522633744856,
                "tf.gather(params, indices)": 0.00411522633744856,
                "tf.gather(params, indices, axis, batch_dims)": 0.00411522633744856,
                "tf.gather_nd(params, indices)": 0.00411522633744856,
                "tf.gather_nd(params, indices, batch_dims)": 0.00411522633744856,
                "tf.greater(x, y)": 0.00411522633744856,
                "tf.greater_equal(x, y)": 0.00411522633744856,
                "tf.math.bincount(arr)": 0.00411522633744856,
                "tf.math.ceil(x)": 0.00411522633744856,
                "tf.math.count_nonzero(input)": 0.00411522633744856,
                "tf.math.count_nonzero(input, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00411522633744856,
                "tf.math.divide_no_nan(x, y)": 0.00411522633744856,
                "tf.math.floor(x)": 0.00411522633744856,
                "tf.math.log(x)": 0.00411522633744856,
                "tf.math.logical_and(x, y)": 0.00411522633744856,
                "tf.math.logical_not(x)": 0.00411522633744856,
                "tf.math.logical_or(x, y)": 0.00411522633744856,
                "tf.math.logical_xor(x, y)": 0.00411522633744856,
                "tf.math.negative(x)": 0.00411522633744856,
                "tf.math.reciprocal(x)": 0.00411522633744856,
                "tf.math.reciprocal_no_nan(x)": 0.00411522633744856,
                "tf.math.segment_max(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_mean(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_min(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_prod(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_sum(data, segment_ids)": 0.00411522633744856,
                "tf.math.squared_difference(x, y)": 0.00411522633744856,
                "tf.math.top_k(input, k)": 0.00411522633744856,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.matmul(a, b)": 0.00411522633744856,
                "tf.maximum(x, y)": 0.00411522633744856,
                "tf.minimum(x, y)": 0.00411522633744856,
                "tf.multiply(x, y)": 0.0411522633744856,
                "tf.not_equal(x, y)": 0.00411522633744856,
                "tf.one_hot(indices, depth)": 0.00411522633744856,
                "tf.ones(shape)": 0.00411522633744856,
                "tf.ones_like(input)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.00411522633744856,
                "tf.range(start)": 0.0205761316872428,
                "tf.range(start, limit, delta)": 0.00823045267489712,
                "tf.reduce_any(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_all(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_max(input_tensor)": 0.00411522633744856,
                "tf.reduce_max(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_min(input_tensor)": 0.00411522633744856,
                "tf.reduce_min(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_prod(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor, axis)": 0.00411522633744856,
                "tf.repeat(input, repeats)": 0.00411522633744856,
                "tf.repeat(input, repeats, axis)": 0.00411522633744856,
                "tf.reshape(tensor, shape)": 0.00823045267489712,
                "tf.reverse(tensor, axis)": 0.00411522633744856,
                "tf.roll(input, shift, axis)": 0.00411522633744856,
                "tf.round(x)": 0.00411522633744856,
                "tf.scatter_nd(indices, updates, shape)": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.00411522633744856,
                "tf.sequence_mask(lengths)": 0.00411522633744856,
                "tf.sequence_mask(lengths, maxlen)": 0.00411522633744856,
                "tf.shape(input)": 0.02880658436213992,
                "tf.sign(x)": 0.00411522633744856,
                "tf.sort(values, axis)": 0.00411522633744856,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.00411522633744856,
                "tf.sqrt(x)": 0.00411522633744856,
                "tf.square(x)": 0.00411522633744856,
                "tf.squeeze(input)": 0.00411522633744856,
                "tf.squeeze(input, axis)": 0.00411522633744856,
                "tf.stack(values, axis)": 0.00411522633744856,
                "tf.subtract(x, y)": 0.00411522633744856,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00411522633744856,
                "tf.tensordot(a, b, axes)": 0.00411522633744856,
                "tf.tile(input, multiples)": 0.00411522633744856,
                "tf.transpose(a)": 0.00411522633744856,
                "tf.transpose(a, perm)": 0.00411522633744856,
                "tf.unique_with_counts(x)": 0.00411522633744856,
                "tf.unstack(value, axis)": 0.00411522633744856,
                "tf.where(condition)": 0.00411522633744856,
                "tf.where(condition, x, y)": 0.00411522633744856,
                "tf.zeros(shape)": 0.00411522633744856,
                "tf.zeros_like(input)": 0.00411522633744856,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00411522633744856,
                "tf.sparse.add(a, b)": 0.00411522633744856,
                "tf.sparse.concat(axis, sp_inputs)": 0.00411522633744856,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00411522633744856,
                "tf.sparse.from_dense(tensor)": 0.00411522633744856,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reset_shape(sp_input)": 0.00411522633744856,
                "tf.sparse.reshape(sp_input, shape)": 0.00411522633744856,
                "tf.sparse.retain(sp_input, to_retain)": 0.00411522633744856,
                "tf.sparse.slice(sp_input, start, size)": 0.00411522633744856,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00411522633744856,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input, perm)": 0.00411522633744856,
                "IndexingAxis1Operation": 0.00411522633744856,
                "IndexingOperation": 0.03292181069958848,
                "PairCreationOperation": 0.00823045267489712,
                "SingletonTupleCreationOperation": 0.00411522633744856,
                "SlicingAxis0BothOperation": 0.00411522633744856,
                "SlicingAxis0LeftOperation": 0.00411522633744856,
                "SlicingAxis0RightOperation": 0.00411522633744856,
                "SlicingAxis1BothOperation": 0.00411522633744856,
                "SlicingAxis1LeftOperation": 0.00411522633744856,
                "SlicingAxis1RightOperation": 0.00411522633744856,
                "TripleCreationOperation": 0.00411522633744856,
                "PROVIDED_CONSTANT_WEIGHT": 0.00411522633744856,
                "COMMON_CONSTANT_WEIGHT": 0.11934156378600823,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00411522633744856,
                "INPUT_VARIABLE_WEIGHT": 0.06995884773662552,
                "AXIS_CONSTANT_WEIGHT": 0.01646090534979424,
                "SHAPE_CONSTANT_WEIGHT": 0.01646090534979424,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.024691358024691357,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00411522633744856
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 5,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 7,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 6,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_33",
        "description": "find the minimum distance between two sets of points",
        "target_program": "tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)",
        "source": "https://stackoverflow.com/questions/40558251/computing-minimum-distance-for-each-element-in-a-tensor-relative-to-another-tens",
        "constants": "[]",
        "examples": {
            "inputs": "[[[.3, .1, .4], [.1, .5, .9], [.2, .6, .5], [.3, .5, .8],[.9, .7, .9]],[[.3, .2, .3], [.8, .4, .6], [.2, .6, .4], [.3, .3, .8]],]",
            "outputs": "[0.02, 0.19, 0.01, 0.04]"
        },
        "completions": [
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "distances = tf.reduce_min(tf.math.squared_difference(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0)), axis=2)\nreturn tf.sqrt(distances)\n",
            "dist = tf.reduce_min(tf.math.reduce_euclidean_distance(in1, in2), axis=1)\nreturn dist\n",
            "return tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2))\n",
            "distances = tf.reduce_min(tf.reduce_sum(tf.square(tf.expand_dims(in1, axis=1) - tf.expand_dims(in2, axis=0)), axis=2), axis=1)\nreturn distances\n",
            "return tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\n",
            "pairwise_dist = tf.reduce_min(tf.sqrt(tf.reduce_sum(tf.square(tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)), axis=2)), axis=1)\nreturn pairwise_dist\n",
            "dist = tf.expand_dims(in1, 1) - tf.expand_dims(in2, 0)\ndist = tf.reduce_min(tf.reduce_sum(tf.square(dist), axis=-1), axis=1)\nreturn dist\n"
        ],
        "tf_operators": {
            "tf.square": 8,
            "tf.sqrt": 7,
            "tf.reduce_sum": 8,
            "tf.expand_dims": 9,
            "tf.reduce_min": 8,
            "tf.math.squared_difference": 1,
            "tf.math.reduce_euclidean_distance": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                2,
                1
            ],
            [
                1,
                0,
                -1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 26,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 8,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00411522633744856,
                "tf.add(x, y)": 0.00411522633744856,
                "tf.add_n(inputs)": 0.00411522633744856,
                "tf.argmax(input, axis)": 0.00411522633744856,
                "tf.argmin(input, axis)": 0.00411522633744856,
                "tf.argsort(values, axis, stable=True)": 0.00411522633744856,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.00411522633744856,
                "tf.boolean_mask(tensor, mask)": 0.00411522633744856,
                "tf.broadcast_to(input, shape)": 0.00411522633744856,
                "tf.cast(x, dtype)": 0.00411522633744856,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00411522633744856,
                "tf.concat(values, axis)": 0.00411522633744856,
                "tf.constant(value)": 0.00411522633744856,
                "tf.constant(value, dtype)": 0.00411522633744856,
                "tf.divide(x, y)": 0.00411522633744856,
                "tf.equal(x, y)": 0.00411522633744856,
                "tf.exp(x)": 0.00411522633744856,
                "tf.expand_dims(input, axis)": 0.07818930041152264,
                "tf.eye(num_rows)": 0.00411522633744856,
                "tf.eye(num_rows, num_columns)": 0.00411522633744856,
                "tf.eye(num_rows, dtype)": 0.00411522633744856,
                "tf.fill(dims, value)": 0.00411522633744856,
                "tf.gather(params, indices)": 0.00411522633744856,
                "tf.gather(params, indices, axis, batch_dims)": 0.00411522633744856,
                "tf.gather_nd(params, indices)": 0.00411522633744856,
                "tf.gather_nd(params, indices, batch_dims)": 0.00411522633744856,
                "tf.greater(x, y)": 0.00411522633744856,
                "tf.greater_equal(x, y)": 0.00411522633744856,
                "tf.math.bincount(arr)": 0.00411522633744856,
                "tf.math.ceil(x)": 0.00411522633744856,
                "tf.math.count_nonzero(input)": 0.00411522633744856,
                "tf.math.count_nonzero(input, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis)": 0.00411522633744856,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00411522633744856,
                "tf.math.divide_no_nan(x, y)": 0.00411522633744856,
                "tf.math.floor(x)": 0.00411522633744856,
                "tf.math.log(x)": 0.00411522633744856,
                "tf.math.logical_and(x, y)": 0.00411522633744856,
                "tf.math.logical_not(x)": 0.00411522633744856,
                "tf.math.logical_or(x, y)": 0.00411522633744856,
                "tf.math.logical_xor(x, y)": 0.00411522633744856,
                "tf.math.negative(x)": 0.00411522633744856,
                "tf.math.reciprocal(x)": 0.00411522633744856,
                "tf.math.reciprocal_no_nan(x)": 0.00411522633744856,
                "tf.math.segment_max(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_mean(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_min(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_prod(data, segment_ids)": 0.00411522633744856,
                "tf.math.segment_sum(data, segment_ids)": 0.00411522633744856,
                "tf.math.squared_difference(x, y)": 0.00823045267489712,
                "tf.math.top_k(input, k)": 0.00411522633744856,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00411522633744856,
                "tf.matmul(a, b)": 0.00411522633744856,
                "tf.maximum(x, y)": 0.00411522633744856,
                "tf.minimum(x, y)": 0.00411522633744856,
                "tf.multiply(x, y)": 0.00411522633744856,
                "tf.not_equal(x, y)": 0.00411522633744856,
                "tf.one_hot(indices, depth)": 0.00411522633744856,
                "tf.ones(shape)": 0.00411522633744856,
                "tf.ones_like(input)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.00411522633744856,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.00411522633744856,
                "tf.range(start)": 0.00411522633744856,
                "tf.range(start, limit, delta)": 0.00411522633744856,
                "tf.reduce_any(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_all(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_max(input_tensor)": 0.00411522633744856,
                "tf.reduce_max(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor)": 0.00411522633744856,
                "tf.reduce_mean(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_min(input_tensor)": 0.00411522633744856,
                "tf.reduce_min(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_prod(input_tensor, axis)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor)": 0.00411522633744856,
                "tf.reduce_sum(input_tensor, axis)": 0.00411522633744856,
                "tf.repeat(input, repeats)": 0.00411522633744856,
                "tf.repeat(input, repeats, axis)": 0.00411522633744856,
                "tf.reshape(tensor, shape)": 0.00411522633744856,
                "tf.reverse(tensor, axis)": 0.00411522633744856,
                "tf.roll(input, shift, axis)": 0.00411522633744856,
                "tf.round(x)": 0.00411522633744856,
                "tf.scatter_nd(indices, updates, shape)": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.00411522633744856,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.00411522633744856,
                "tf.sequence_mask(lengths)": 0.00411522633744856,
                "tf.sequence_mask(lengths, maxlen)": 0.00411522633744856,
                "tf.shape(input)": 0.00411522633744856,
                "tf.sign(x)": 0.00411522633744856,
                "tf.sort(values, axis)": 0.00411522633744856,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.00411522633744856,
                "tf.sqrt(x)": 0.03292181069958848,
                "tf.square(x)": 0.037037037037037035,
                "tf.squeeze(input)": 0.00411522633744856,
                "tf.squeeze(input, axis)": 0.00411522633744856,
                "tf.stack(values, axis)": 0.00411522633744856,
                "tf.subtract(x, y)": 0.00411522633744856,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00411522633744856,
                "tf.tensordot(a, b, axes)": 0.00411522633744856,
                "tf.tile(input, multiples)": 0.00411522633744856,
                "tf.transpose(a)": 0.00411522633744856,
                "tf.transpose(a, perm)": 0.00411522633744856,
                "tf.unique_with_counts(x)": 0.00411522633744856,
                "tf.unstack(value, axis)": 0.00411522633744856,
                "tf.where(condition)": 0.00411522633744856,
                "tf.where(condition, x, y)": 0.00411522633744856,
                "tf.zeros(shape)": 0.00411522633744856,
                "tf.zeros_like(input)": 0.00411522633744856,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00411522633744856,
                "tf.sparse.add(a, b)": 0.00411522633744856,
                "tf.sparse.concat(axis, sp_inputs)": 0.00411522633744856,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00411522633744856,
                "tf.sparse.from_dense(tensor)": 0.00411522633744856,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00411522633744856,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00411522633744856,
                "tf.sparse.reset_shape(sp_input)": 0.00411522633744856,
                "tf.sparse.reshape(sp_input, shape)": 0.00411522633744856,
                "tf.sparse.retain(sp_input, to_retain)": 0.00411522633744856,
                "tf.sparse.slice(sp_input, start, size)": 0.00411522633744856,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input)": 0.00411522633744856,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00411522633744856,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input)": 0.00411522633744856,
                "tf.sparse.transpose(sp_input, perm)": 0.00411522633744856,
                "IndexingAxis1Operation": 0.00411522633744856,
                "IndexingOperation": 0.00411522633744856,
                "PairCreationOperation": 0.00411522633744856,
                "SingletonTupleCreationOperation": 0.00411522633744856,
                "SlicingAxis0BothOperation": 0.00411522633744856,
                "SlicingAxis0LeftOperation": 0.00411522633744856,
                "SlicingAxis0RightOperation": 0.00411522633744856,
                "SlicingAxis1BothOperation": 0.00411522633744856,
                "SlicingAxis1LeftOperation": 0.00411522633744856,
                "SlicingAxis1RightOperation": 0.00411522633744856,
                "TripleCreationOperation": 0.00411522633744856,
                "PROVIDED_CONSTANT_WEIGHT": 0.00411522633744856,
                "COMMON_CONSTANT_WEIGHT": 0.1111111111111111,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00411522633744856,
                "INPUT_VARIABLE_WEIGHT": 0.08641975308641975,
                "AXIS_CONSTANT_WEIGHT": 0.037037037037037035,
                "SHAPE_CONSTANT_WEIGHT": 0.00411522633744856,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00411522633744856,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00411522633744856
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 7,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 5,
                "tf.square(x)": 5,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_34",
        "description": "compute a weighted sum of tensors",
        "target_program": "tf.tensordot(in2, in1, 1)",
        "source": "https://stackoverflow.com/questions/49532371/compute-a-linear-combination-of-tensors-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1, 2], [3, 4]],[[5, 6], [7, 8]],[[10, 20], [30, 40]]],[3, 5, 10],]",
            "outputs": "[[128, 236], [344, 452]]"
        },
        "completions": [
            "result = tf.tensordot(in1, in2, axes=([0], [0]))\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, 1)), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "tf.reduce_sum(tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, axis=-1), axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)",
            "return tf.reduce_sum(in1 * tf.expand_dims(in2, axis=1), axis=0)",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, axis=-1)), axis=0)\n",
            "return tf.reduce_sum(tf.multiply(tf.tile(tf.expand_dims(in2, 1), [1, 2, 2]), in1), axis=0)"
        ],
        "tf_operators": {
            "tf.tensordot": 1,
            "tf.expand_dims": 9,
            "tf.reduce_sum": 9,
            "tf.multiply": 8,
            "tf.tile": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                0,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                -1,
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1,
                1,
                2,
                2,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 22,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 2,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004545454545454545,
                "tf.add(x, y)": 0.004545454545454545,
                "tf.add_n(inputs)": 0.004545454545454545,
                "tf.argmax(input, axis)": 0.004545454545454545,
                "tf.argmin(input, axis)": 0.004545454545454545,
                "tf.argsort(values, axis, stable=True)": 0.004545454545454545,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004545454545454545,
                "tf.boolean_mask(tensor, mask)": 0.004545454545454545,
                "tf.broadcast_to(input, shape)": 0.004545454545454545,
                "tf.cast(x, dtype)": 0.004545454545454545,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004545454545454545,
                "tf.concat(values, axis)": 0.004545454545454545,
                "tf.constant(value)": 0.004545454545454545,
                "tf.constant(value, dtype)": 0.004545454545454545,
                "tf.divide(x, y)": 0.004545454545454545,
                "tf.equal(x, y)": 0.004545454545454545,
                "tf.exp(x)": 0.004545454545454545,
                "tf.expand_dims(input, axis)": 0.05,
                "tf.eye(num_rows)": 0.004545454545454545,
                "tf.eye(num_rows, num_columns)": 0.004545454545454545,
                "tf.eye(num_rows, dtype)": 0.004545454545454545,
                "tf.fill(dims, value)": 0.004545454545454545,
                "tf.gather(params, indices)": 0.004545454545454545,
                "tf.gather(params, indices, axis, batch_dims)": 0.004545454545454545,
                "tf.gather_nd(params, indices)": 0.004545454545454545,
                "tf.gather_nd(params, indices, batch_dims)": 0.004545454545454545,
                "tf.greater(x, y)": 0.004545454545454545,
                "tf.greater_equal(x, y)": 0.004545454545454545,
                "tf.math.bincount(arr)": 0.004545454545454545,
                "tf.math.ceil(x)": 0.004545454545454545,
                "tf.math.count_nonzero(input)": 0.004545454545454545,
                "tf.math.count_nonzero(input, axis)": 0.004545454545454545,
                "tf.math.cumsum(x, axis)": 0.004545454545454545,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004545454545454545,
                "tf.math.divide_no_nan(x, y)": 0.004545454545454545,
                "tf.math.floor(x)": 0.004545454545454545,
                "tf.math.log(x)": 0.004545454545454545,
                "tf.math.logical_and(x, y)": 0.004545454545454545,
                "tf.math.logical_not(x)": 0.004545454545454545,
                "tf.math.logical_or(x, y)": 0.004545454545454545,
                "tf.math.logical_xor(x, y)": 0.004545454545454545,
                "tf.math.negative(x)": 0.004545454545454545,
                "tf.math.reciprocal(x)": 0.004545454545454545,
                "tf.math.reciprocal_no_nan(x)": 0.004545454545454545,
                "tf.math.segment_max(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_mean(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_min(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_prod(data, segment_ids)": 0.004545454545454545,
                "tf.math.segment_sum(data, segment_ids)": 0.004545454545454545,
                "tf.math.squared_difference(x, y)": 0.004545454545454545,
                "tf.math.top_k(input, k)": 0.004545454545454545,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004545454545454545,
                "tf.matmul(a, b)": 0.004545454545454545,
                "tf.maximum(x, y)": 0.004545454545454545,
                "tf.minimum(x, y)": 0.004545454545454545,
                "tf.multiply(x, y)": 0.04090909090909091,
                "tf.not_equal(x, y)": 0.004545454545454545,
                "tf.one_hot(indices, depth)": 0.004545454545454545,
                "tf.ones(shape)": 0.004545454545454545,
                "tf.ones_like(input)": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004545454545454545,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004545454545454545,
                "tf.range(start)": 0.004545454545454545,
                "tf.range(start, limit, delta)": 0.004545454545454545,
                "tf.reduce_any(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_all(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_max(input_tensor)": 0.004545454545454545,
                "tf.reduce_max(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_mean(input_tensor)": 0.004545454545454545,
                "tf.reduce_mean(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_min(input_tensor)": 0.004545454545454545,
                "tf.reduce_min(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_prod(input_tensor, axis)": 0.004545454545454545,
                "tf.reduce_sum(input_tensor)": 0.004545454545454545,
                "tf.reduce_sum(input_tensor, axis)": 0.004545454545454545,
                "tf.repeat(input, repeats)": 0.004545454545454545,
                "tf.repeat(input, repeats, axis)": 0.004545454545454545,
                "tf.reshape(tensor, shape)": 0.004545454545454545,
                "tf.reverse(tensor, axis)": 0.004545454545454545,
                "tf.roll(input, shift, axis)": 0.004545454545454545,
                "tf.round(x)": 0.004545454545454545,
                "tf.scatter_nd(indices, updates, shape)": 0.004545454545454545,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004545454545454545,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004545454545454545,
                "tf.sequence_mask(lengths)": 0.004545454545454545,
                "tf.sequence_mask(lengths, maxlen)": 0.004545454545454545,
                "tf.shape(input)": 0.004545454545454545,
                "tf.sign(x)": 0.004545454545454545,
                "tf.sort(values, axis)": 0.004545454545454545,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004545454545454545,
                "tf.sqrt(x)": 0.004545454545454545,
                "tf.square(x)": 0.004545454545454545,
                "tf.squeeze(input)": 0.004545454545454545,
                "tf.squeeze(input, axis)": 0.004545454545454545,
                "tf.stack(values, axis)": 0.004545454545454545,
                "tf.subtract(x, y)": 0.004545454545454545,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004545454545454545,
                "tf.tensordot(a, b, axes)": 0.00909090909090909,
                "tf.tile(input, multiples)": 0.00909090909090909,
                "tf.transpose(a)": 0.004545454545454545,
                "tf.transpose(a, perm)": 0.004545454545454545,
                "tf.unique_with_counts(x)": 0.004545454545454545,
                "tf.unstack(value, axis)": 0.004545454545454545,
                "tf.where(condition)": 0.004545454545454545,
                "tf.where(condition, x, y)": 0.004545454545454545,
                "tf.zeros(shape)": 0.004545454545454545,
                "tf.zeros_like(input)": 0.004545454545454545,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004545454545454545,
                "tf.sparse.add(a, b)": 0.004545454545454545,
                "tf.sparse.concat(axis, sp_inputs)": 0.004545454545454545,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004545454545454545,
                "tf.sparse.from_dense(tensor)": 0.004545454545454545,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004545454545454545,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004545454545454545,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004545454545454545,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004545454545454545,
                "tf.sparse.reset_shape(sp_input)": 0.004545454545454545,
                "tf.sparse.reshape(sp_input, shape)": 0.004545454545454545,
                "tf.sparse.retain(sp_input, to_retain)": 0.004545454545454545,
                "tf.sparse.slice(sp_input, start, size)": 0.004545454545454545,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004545454545454545,
                "tf.sparse.to_dense(sp_input)": 0.004545454545454545,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004545454545454545,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004545454545454545,
                "tf.sparse.transpose(sp_input)": 0.004545454545454545,
                "tf.sparse.transpose(sp_input, perm)": 0.004545454545454545,
                "IndexingAxis1Operation": 0.004545454545454545,
                "IndexingOperation": 0.004545454545454545,
                "PairCreationOperation": 0.00909090909090909,
                "SingletonTupleCreationOperation": 0.004545454545454545,
                "SlicingAxis0BothOperation": 0.004545454545454545,
                "SlicingAxis0LeftOperation": 0.004545454545454545,
                "SlicingAxis0RightOperation": 0.004545454545454545,
                "SlicingAxis1BothOperation": 0.004545454545454545,
                "SlicingAxis1LeftOperation": 0.004545454545454545,
                "SlicingAxis1RightOperation": 0.004545454545454545,
                "TripleCreationOperation": 0.004545454545454545,
                "PROVIDED_CONSTANT_WEIGHT": 0.004545454545454545,
                "COMMON_CONSTANT_WEIGHT": 0.10454545454545454,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004545454545454545,
                "INPUT_VARIABLE_WEIGHT": 0.09545454545454546,
                "AXIS_CONSTANT_WEIGHT": 0.013636363636363636,
                "SHAPE_CONSTANT_WEIGHT": 0.004545454545454545,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004545454545454545,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004545454545454545,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004545454545454545,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004545454545454545,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004545454545454545
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 5,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 7,
                "tf.tile(input, multiples)": 7,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_35",
        "description": "linear interpolation between two tensors",
        "target_program": "tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))",
        "source": "https://stackoverflow.com/questions/49643371/keras-compute-convex-combination-of-two-tensors",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10., 20.], [30., 40.], [50., 60.]]],[[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90., 80.], [70., 60.], [50., 40.]]],[0.1, 0.4, 0.8],]",
            "outputs": "[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]],    [[82., 74.], [54., 52.], [50., 56.]]]"
        },
        "completions": [
            "result = in1 + in3 * (in2 - in1)\n",
            "result = in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(in1, 1 - in3), tf.multiply(in2, in3))\n",
            "result = in1 * (1 - in3) + in2 * in3\n",
            "return in1 * (1 - in3) + in2 * in3\n",
            "return tf.add(tf.multiply(tf.subtract(1.0, in3), in1), tf.multiply(in3, in2))\n",
            "alpha = tf.expand_dims(in3, -1)\nreturn tf.add(tf.multiply(1 - alpha, in1), tf.multiply(alpha, in2))\n",
            "result = in1 + in3[:, None, None] * (in2 - in1)\nreturn result\n",
            "return in1 * (1 - in3) + in2 * in3\n"
        ],
        "tf_operators": {
            "tf.add": 3,
            "tf.multiply": 3,
            "tf.subtract": 1,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [],
            [
                -1,
                1
            ],
            [],
            [
                1
            ]
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 39,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 8,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004672897196261682,
                "tf.add(x, y)": 0.018691588785046728,
                "tf.add_n(inputs)": 0.004672897196261682,
                "tf.argmax(input, axis)": 0.004672897196261682,
                "tf.argmin(input, axis)": 0.004672897196261682,
                "tf.argsort(values, axis, stable=True)": 0.004672897196261682,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004672897196261682,
                "tf.boolean_mask(tensor, mask)": 0.004672897196261682,
                "tf.broadcast_to(input, shape)": 0.004672897196261682,
                "tf.cast(x, dtype)": 0.004672897196261682,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004672897196261682,
                "tf.concat(values, axis)": 0.004672897196261682,
                "tf.constant(value)": 0.004672897196261682,
                "tf.constant(value, dtype)": 0.004672897196261682,
                "tf.divide(x, y)": 0.004672897196261682,
                "tf.equal(x, y)": 0.004672897196261682,
                "tf.exp(x)": 0.004672897196261682,
                "tf.expand_dims(input, axis)": 0.009345794392523364,
                "tf.eye(num_rows)": 0.004672897196261682,
                "tf.eye(num_rows, num_columns)": 0.004672897196261682,
                "tf.eye(num_rows, dtype)": 0.004672897196261682,
                "tf.fill(dims, value)": 0.004672897196261682,
                "tf.gather(params, indices)": 0.004672897196261682,
                "tf.gather(params, indices, axis, batch_dims)": 0.004672897196261682,
                "tf.gather_nd(params, indices)": 0.004672897196261682,
                "tf.gather_nd(params, indices, batch_dims)": 0.004672897196261682,
                "tf.greater(x, y)": 0.004672897196261682,
                "tf.greater_equal(x, y)": 0.004672897196261682,
                "tf.math.bincount(arr)": 0.004672897196261682,
                "tf.math.ceil(x)": 0.004672897196261682,
                "tf.math.count_nonzero(input)": 0.004672897196261682,
                "tf.math.count_nonzero(input, axis)": 0.004672897196261682,
                "tf.math.cumsum(x, axis)": 0.004672897196261682,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004672897196261682,
                "tf.math.divide_no_nan(x, y)": 0.004672897196261682,
                "tf.math.floor(x)": 0.004672897196261682,
                "tf.math.log(x)": 0.004672897196261682,
                "tf.math.logical_and(x, y)": 0.004672897196261682,
                "tf.math.logical_not(x)": 0.004672897196261682,
                "tf.math.logical_or(x, y)": 0.004672897196261682,
                "tf.math.logical_xor(x, y)": 0.004672897196261682,
                "tf.math.negative(x)": 0.004672897196261682,
                "tf.math.reciprocal(x)": 0.004672897196261682,
                "tf.math.reciprocal_no_nan(x)": 0.004672897196261682,
                "tf.math.segment_max(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_mean(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_min(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_prod(data, segment_ids)": 0.004672897196261682,
                "tf.math.segment_sum(data, segment_ids)": 0.004672897196261682,
                "tf.math.squared_difference(x, y)": 0.004672897196261682,
                "tf.math.top_k(input, k)": 0.004672897196261682,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004672897196261682,
                "tf.matmul(a, b)": 0.004672897196261682,
                "tf.maximum(x, y)": 0.004672897196261682,
                "tf.minimum(x, y)": 0.004672897196261682,
                "tf.multiply(x, y)": 0.03271028037383177,
                "tf.not_equal(x, y)": 0.004672897196261682,
                "tf.one_hot(indices, depth)": 0.004672897196261682,
                "tf.ones(shape)": 0.004672897196261682,
                "tf.ones_like(input)": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004672897196261682,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004672897196261682,
                "tf.range(start)": 0.004672897196261682,
                "tf.range(start, limit, delta)": 0.004672897196261682,
                "tf.reduce_any(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_all(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_max(input_tensor)": 0.004672897196261682,
                "tf.reduce_max(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_mean(input_tensor)": 0.004672897196261682,
                "tf.reduce_mean(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_min(input_tensor)": 0.004672897196261682,
                "tf.reduce_min(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_prod(input_tensor, axis)": 0.004672897196261682,
                "tf.reduce_sum(input_tensor)": 0.004672897196261682,
                "tf.reduce_sum(input_tensor, axis)": 0.004672897196261682,
                "tf.repeat(input, repeats)": 0.004672897196261682,
                "tf.repeat(input, repeats, axis)": 0.004672897196261682,
                "tf.reshape(tensor, shape)": 0.004672897196261682,
                "tf.reverse(tensor, axis)": 0.004672897196261682,
                "tf.roll(input, shift, axis)": 0.004672897196261682,
                "tf.round(x)": 0.004672897196261682,
                "tf.scatter_nd(indices, updates, shape)": 0.004672897196261682,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004672897196261682,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004672897196261682,
                "tf.sequence_mask(lengths)": 0.004672897196261682,
                "tf.sequence_mask(lengths, maxlen)": 0.004672897196261682,
                "tf.shape(input)": 0.004672897196261682,
                "tf.sign(x)": 0.004672897196261682,
                "tf.sort(values, axis)": 0.004672897196261682,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004672897196261682,
                "tf.sqrt(x)": 0.004672897196261682,
                "tf.square(x)": 0.004672897196261682,
                "tf.squeeze(input)": 0.004672897196261682,
                "tf.squeeze(input, axis)": 0.004672897196261682,
                "tf.stack(values, axis)": 0.004672897196261682,
                "tf.subtract(x, y)": 0.009345794392523364,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004672897196261682,
                "tf.tensordot(a, b, axes)": 0.004672897196261682,
                "tf.tile(input, multiples)": 0.004672897196261682,
                "tf.transpose(a)": 0.004672897196261682,
                "tf.transpose(a, perm)": 0.004672897196261682,
                "tf.unique_with_counts(x)": 0.004672897196261682,
                "tf.unstack(value, axis)": 0.004672897196261682,
                "tf.where(condition)": 0.004672897196261682,
                "tf.where(condition, x, y)": 0.004672897196261682,
                "tf.zeros(shape)": 0.004672897196261682,
                "tf.zeros_like(input)": 0.004672897196261682,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004672897196261682,
                "tf.sparse.add(a, b)": 0.004672897196261682,
                "tf.sparse.concat(axis, sp_inputs)": 0.004672897196261682,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004672897196261682,
                "tf.sparse.from_dense(tensor)": 0.004672897196261682,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004672897196261682,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004672897196261682,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004672897196261682,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004672897196261682,
                "tf.sparse.reset_shape(sp_input)": 0.004672897196261682,
                "tf.sparse.reshape(sp_input, shape)": 0.004672897196261682,
                "tf.sparse.retain(sp_input, to_retain)": 0.004672897196261682,
                "tf.sparse.slice(sp_input, start, size)": 0.004672897196261682,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004672897196261682,
                "tf.sparse.to_dense(sp_input)": 0.004672897196261682,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004672897196261682,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004672897196261682,
                "tf.sparse.transpose(sp_input)": 0.004672897196261682,
                "tf.sparse.transpose(sp_input, perm)": 0.004672897196261682,
                "IndexingAxis1Operation": 0.004672897196261682,
                "IndexingOperation": 0.004672897196261682,
                "PairCreationOperation": 0.004672897196261682,
                "SingletonTupleCreationOperation": 0.004672897196261682,
                "SlicingAxis0BothOperation": 0.004672897196261682,
                "SlicingAxis0LeftOperation": 0.004672897196261682,
                "SlicingAxis0RightOperation": 0.004672897196261682,
                "SlicingAxis1BothOperation": 0.004672897196261682,
                "SlicingAxis1LeftOperation": 0.004672897196261682,
                "SlicingAxis1RightOperation": 0.004672897196261682,
                "TripleCreationOperation": 0.009345794392523364,
                "PROVIDED_CONSTANT_WEIGHT": 0.004672897196261682,
                "COMMON_CONSTANT_WEIGHT": 0.04205607476635514,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004672897196261682,
                "INPUT_VARIABLE_WEIGHT": 0.18691588785046728,
                "AXIS_CONSTANT_WEIGHT": 0.004672897196261682,
                "SHAPE_CONSTANT_WEIGHT": 0.004672897196261682,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004672897196261682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004672897196261682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004672897196261682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004672897196261682,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004672897196261682
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 6,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 5,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 7,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 2,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_36",
        "description": "divide each element by the column index",
        "target_program": "tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)",
        "source": "https://stackoverflow.com/questions/43306788/divide-elements-of-1-d-tensor-by-the-corrispondent-index",
        "constants": "[]",
        "examples": {
            "inputs": "[[1, 0, 1, 1, 0, 1, 0, 1],]",
            "outputs": "[1., 0., 0.333333, 0.25, 0., 0.166667, 0., 0.125]"
        },
        "completions": [
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0] + 1))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[-1] + 1), tf.float32))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "return tf.divide(tf.cast(in1, tf.float32), tf.range(1, tf.shape(in1)[0]+1))\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.range(1, tf.size(in1)+1, 1))\n",
            "def transform(in1):\n    result = tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n    return result\n",
            "def transform(in1):\n    return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0]+1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n",
            "return tf.divide(in1, tf.cast(tf.range(1, tf.shape(in1)[0] + 1), tf.float32))\n"
        ],
        "tf_operators": {
            "tf.shape": 9,
            "tf.float32": 9,
            "tf.range": 10,
            "tf.cast": 9,
            "tf.divide": 10,
            "tf.size": 1
        },
        "coverage_percentage": 80.0,
        "total_covered": 4,
        "total_in_target": 5,
        "parsed_constants": [
            [
                1,
                0,
                1
            ],
            [
                1,
                -1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ],
            [
                1,
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 30,
            "shape_tuple": 0,
            "tf_float32": 9,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.003968253968253968,
                "tf.add(x, y)": 0.003968253968253968,
                "tf.add_n(inputs)": 0.003968253968253968,
                "tf.argmax(input, axis)": 0.003968253968253968,
                "tf.argmin(input, axis)": 0.003968253968253968,
                "tf.argsort(values, axis, stable=True)": 0.003968253968253968,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.003968253968253968,
                "tf.boolean_mask(tensor, mask)": 0.003968253968253968,
                "tf.broadcast_to(input, shape)": 0.003968253968253968,
                "tf.cast(x, dtype)": 0.03968253968253968,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.003968253968253968,
                "tf.concat(values, axis)": 0.003968253968253968,
                "tf.constant(value)": 0.003968253968253968,
                "tf.constant(value, dtype)": 0.003968253968253968,
                "tf.divide(x, y)": 0.04365079365079365,
                "tf.equal(x, y)": 0.003968253968253968,
                "tf.exp(x)": 0.003968253968253968,
                "tf.expand_dims(input, axis)": 0.003968253968253968,
                "tf.eye(num_rows)": 0.003968253968253968,
                "tf.eye(num_rows, num_columns)": 0.003968253968253968,
                "tf.eye(num_rows, dtype)": 0.003968253968253968,
                "tf.fill(dims, value)": 0.003968253968253968,
                "tf.gather(params, indices)": 0.003968253968253968,
                "tf.gather(params, indices, axis, batch_dims)": 0.003968253968253968,
                "tf.gather_nd(params, indices)": 0.003968253968253968,
                "tf.gather_nd(params, indices, batch_dims)": 0.003968253968253968,
                "tf.greater(x, y)": 0.003968253968253968,
                "tf.greater_equal(x, y)": 0.003968253968253968,
                "tf.math.bincount(arr)": 0.003968253968253968,
                "tf.math.ceil(x)": 0.003968253968253968,
                "tf.math.count_nonzero(input)": 0.003968253968253968,
                "tf.math.count_nonzero(input, axis)": 0.003968253968253968,
                "tf.math.cumsum(x, axis)": 0.003968253968253968,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.003968253968253968,
                "tf.math.divide_no_nan(x, y)": 0.003968253968253968,
                "tf.math.floor(x)": 0.003968253968253968,
                "tf.math.log(x)": 0.003968253968253968,
                "tf.math.logical_and(x, y)": 0.003968253968253968,
                "tf.math.logical_not(x)": 0.003968253968253968,
                "tf.math.logical_or(x, y)": 0.003968253968253968,
                "tf.math.logical_xor(x, y)": 0.003968253968253968,
                "tf.math.negative(x)": 0.003968253968253968,
                "tf.math.reciprocal(x)": 0.003968253968253968,
                "tf.math.reciprocal_no_nan(x)": 0.003968253968253968,
                "tf.math.segment_max(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_mean(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_min(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_prod(data, segment_ids)": 0.003968253968253968,
                "tf.math.segment_sum(data, segment_ids)": 0.003968253968253968,
                "tf.math.squared_difference(x, y)": 0.003968253968253968,
                "tf.math.top_k(input, k)": 0.003968253968253968,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.003968253968253968,
                "tf.matmul(a, b)": 0.003968253968253968,
                "tf.maximum(x, y)": 0.003968253968253968,
                "tf.minimum(x, y)": 0.003968253968253968,
                "tf.multiply(x, y)": 0.003968253968253968,
                "tf.not_equal(x, y)": 0.003968253968253968,
                "tf.one_hot(indices, depth)": 0.003968253968253968,
                "tf.ones(shape)": 0.003968253968253968,
                "tf.ones_like(input)": 0.003968253968253968,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.003968253968253968,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.003968253968253968,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.003968253968253968,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.003968253968253968,
                "tf.range(start)": 0.003968253968253968,
                "tf.range(start, limit, delta)": 0.007936507936507936,
                "tf.reduce_any(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_all(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_max(input_tensor)": 0.003968253968253968,
                "tf.reduce_max(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_mean(input_tensor)": 0.003968253968253968,
                "tf.reduce_mean(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_min(input_tensor)": 0.003968253968253968,
                "tf.reduce_min(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_prod(input_tensor, axis)": 0.003968253968253968,
                "tf.reduce_sum(input_tensor)": 0.003968253968253968,
                "tf.reduce_sum(input_tensor, axis)": 0.003968253968253968,
                "tf.repeat(input, repeats)": 0.003968253968253968,
                "tf.repeat(input, repeats, axis)": 0.003968253968253968,
                "tf.reshape(tensor, shape)": 0.003968253968253968,
                "tf.reverse(tensor, axis)": 0.003968253968253968,
                "tf.roll(input, shift, axis)": 0.003968253968253968,
                "tf.round(x)": 0.003968253968253968,
                "tf.scatter_nd(indices, updates, shape)": 0.003968253968253968,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.003968253968253968,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.003968253968253968,
                "tf.sequence_mask(lengths)": 0.003968253968253968,
                "tf.sequence_mask(lengths, maxlen)": 0.003968253968253968,
                "tf.shape(input)": 0.03968253968253968,
                "tf.sign(x)": 0.003968253968253968,
                "tf.sort(values, axis)": 0.003968253968253968,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.003968253968253968,
                "tf.sqrt(x)": 0.003968253968253968,
                "tf.square(x)": 0.003968253968253968,
                "tf.squeeze(input)": 0.003968253968253968,
                "tf.squeeze(input, axis)": 0.003968253968253968,
                "tf.stack(values, axis)": 0.003968253968253968,
                "tf.subtract(x, y)": 0.003968253968253968,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.003968253968253968,
                "tf.tensordot(a, b, axes)": 0.003968253968253968,
                "tf.tile(input, multiples)": 0.003968253968253968,
                "tf.transpose(a)": 0.003968253968253968,
                "tf.transpose(a, perm)": 0.003968253968253968,
                "tf.unique_with_counts(x)": 0.003968253968253968,
                "tf.unstack(value, axis)": 0.003968253968253968,
                "tf.where(condition)": 0.003968253968253968,
                "tf.where(condition, x, y)": 0.003968253968253968,
                "tf.zeros(shape)": 0.003968253968253968,
                "tf.zeros_like(input)": 0.003968253968253968,
                "tf.SparseTensor(indices, values, dense_shape)": 0.003968253968253968,
                "tf.sparse.add(a, b)": 0.003968253968253968,
                "tf.sparse.concat(axis, sp_inputs)": 0.003968253968253968,
                "tf.sparse.expand_dims(sp_input, axis)": 0.003968253968253968,
                "tf.sparse.from_dense(tensor)": 0.003968253968253968,
                "tf.sparse.maximum(sp_a, sp_b)": 0.003968253968253968,
                "tf.sparse.minimum(sp_a, sp_b)": 0.003968253968253968,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.003968253968253968,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.003968253968253968,
                "tf.sparse.reset_shape(sp_input)": 0.003968253968253968,
                "tf.sparse.reshape(sp_input, shape)": 0.003968253968253968,
                "tf.sparse.retain(sp_input, to_retain)": 0.003968253968253968,
                "tf.sparse.slice(sp_input, start, size)": 0.003968253968253968,
                "tf.sparse.split(sp_input, num_split, axis)": 0.003968253968253968,
                "tf.sparse.to_dense(sp_input)": 0.003968253968253968,
                "tf.sparse.to_dense(sp_input, default_value)": 0.003968253968253968,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.003968253968253968,
                "tf.sparse.transpose(sp_input)": 0.003968253968253968,
                "tf.sparse.transpose(sp_input, perm)": 0.003968253968253968,
                "IndexingAxis1Operation": 0.003968253968253968,
                "IndexingOperation": 0.03968253968253968,
                "PairCreationOperation": 0.003968253968253968,
                "SingletonTupleCreationOperation": 0.003968253968253968,
                "SlicingAxis0BothOperation": 0.003968253968253968,
                "SlicingAxis0LeftOperation": 0.003968253968253968,
                "SlicingAxis0RightOperation": 0.003968253968253968,
                "SlicingAxis1BothOperation": 0.003968253968253968,
                "SlicingAxis1LeftOperation": 0.003968253968253968,
                "SlicingAxis1RightOperation": 0.003968253968253968,
                "TripleCreationOperation": 0.003968253968253968,
                "PROVIDED_CONSTANT_WEIGHT": 0.003968253968253968,
                "COMMON_CONSTANT_WEIGHT": 0.12301587301587301,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.003968253968253968,
                "INPUT_VARIABLE_WEIGHT": 0.08333333333333333,
                "AXIS_CONSTANT_WEIGHT": 0.003968253968253968,
                "SHAPE_CONSTANT_WEIGHT": 0.003968253968253968,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.003968253968253968,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.003968253968253968,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.03968253968253968,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.003968253968253968,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.003968253968253968
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 5,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 7,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_37",
        "description": "dot product a vector with last dimension of a tensor",
        "target_program": "tf.tensordot(in1, in2, 1)",
        "source": "https://stackoverflow.com/questions/49206051/multiply-4-d-tensor-with-1-d-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],  [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]],[0.5, 1.0, 2.0],]",
            "outputs": "[[[8.5, 19.0], [15.2, 28.9]]]"
        },
        "completions": [
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "return tf.reduce_sum(tf.multiply(in1, tf.expand_dims(in2, -1)), axis=-1)\n",
            "return tf.tensordot(in1, in2, axes=[[-1], [0]])\n",
            "return tf.tensordot(in1, in2, axes=1)\n",
            "result = tf.tensordot(in1, in2, axes=1)\nreturn result\n",
            "return tf.tensordot(in1, in2, axes=(-1, 0))",
            "return tf.tensordot(in1, in2, axes=(-1,0))\n"
        ],
        "tf_operators": {
            "tf.tensordot": 9,
            "tf.expand_dims": 1,
            "tf.reduce_sum": 1,
            "tf.multiply": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 1,
        "total_in_target": 1,
        "parsed_constants": [
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                -1,
                -1
            ],
            [
                -1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1,
                0
            ],
            [
                -1,
                0
            ]
        ],
        "all_constants": [
            0,
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 12,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0049504950495049506,
                "tf.add(x, y)": 0.0049504950495049506,
                "tf.add_n(inputs)": 0.0049504950495049506,
                "tf.argmax(input, axis)": 0.0049504950495049506,
                "tf.argmin(input, axis)": 0.0049504950495049506,
                "tf.argsort(values, axis, stable=True)": 0.0049504950495049506,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0049504950495049506,
                "tf.boolean_mask(tensor, mask)": 0.0049504950495049506,
                "tf.broadcast_to(input, shape)": 0.0049504950495049506,
                "tf.cast(x, dtype)": 0.0049504950495049506,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0049504950495049506,
                "tf.concat(values, axis)": 0.0049504950495049506,
                "tf.constant(value)": 0.0049504950495049506,
                "tf.constant(value, dtype)": 0.0049504950495049506,
                "tf.divide(x, y)": 0.0049504950495049506,
                "tf.equal(x, y)": 0.0049504950495049506,
                "tf.exp(x)": 0.0049504950495049506,
                "tf.expand_dims(input, axis)": 0.009900990099009901,
                "tf.eye(num_rows)": 0.0049504950495049506,
                "tf.eye(num_rows, num_columns)": 0.0049504950495049506,
                "tf.eye(num_rows, dtype)": 0.0049504950495049506,
                "tf.fill(dims, value)": 0.0049504950495049506,
                "tf.gather(params, indices)": 0.0049504950495049506,
                "tf.gather(params, indices, axis, batch_dims)": 0.0049504950495049506,
                "tf.gather_nd(params, indices)": 0.0049504950495049506,
                "tf.gather_nd(params, indices, batch_dims)": 0.0049504950495049506,
                "tf.greater(x, y)": 0.0049504950495049506,
                "tf.greater_equal(x, y)": 0.0049504950495049506,
                "tf.math.bincount(arr)": 0.0049504950495049506,
                "tf.math.ceil(x)": 0.0049504950495049506,
                "tf.math.count_nonzero(input)": 0.0049504950495049506,
                "tf.math.count_nonzero(input, axis)": 0.0049504950495049506,
                "tf.math.cumsum(x, axis)": 0.0049504950495049506,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0049504950495049506,
                "tf.math.divide_no_nan(x, y)": 0.0049504950495049506,
                "tf.math.floor(x)": 0.0049504950495049506,
                "tf.math.log(x)": 0.0049504950495049506,
                "tf.math.logical_and(x, y)": 0.0049504950495049506,
                "tf.math.logical_not(x)": 0.0049504950495049506,
                "tf.math.logical_or(x, y)": 0.0049504950495049506,
                "tf.math.logical_xor(x, y)": 0.0049504950495049506,
                "tf.math.negative(x)": 0.0049504950495049506,
                "tf.math.reciprocal(x)": 0.0049504950495049506,
                "tf.math.reciprocal_no_nan(x)": 0.0049504950495049506,
                "tf.math.segment_max(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_mean(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_min(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_prod(data, segment_ids)": 0.0049504950495049506,
                "tf.math.segment_sum(data, segment_ids)": 0.0049504950495049506,
                "tf.math.squared_difference(x, y)": 0.0049504950495049506,
                "tf.math.top_k(input, k)": 0.0049504950495049506,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0049504950495049506,
                "tf.matmul(a, b)": 0.0049504950495049506,
                "tf.maximum(x, y)": 0.0049504950495049506,
                "tf.minimum(x, y)": 0.0049504950495049506,
                "tf.multiply(x, y)": 0.009900990099009901,
                "tf.not_equal(x, y)": 0.0049504950495049506,
                "tf.one_hot(indices, depth)": 0.0049504950495049506,
                "tf.ones(shape)": 0.0049504950495049506,
                "tf.ones_like(input)": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0049504950495049506,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0049504950495049506,
                "tf.range(start)": 0.0049504950495049506,
                "tf.range(start, limit, delta)": 0.0049504950495049506,
                "tf.reduce_any(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_all(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_max(input_tensor)": 0.0049504950495049506,
                "tf.reduce_max(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_mean(input_tensor)": 0.0049504950495049506,
                "tf.reduce_mean(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_min(input_tensor)": 0.0049504950495049506,
                "tf.reduce_min(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_prod(input_tensor, axis)": 0.0049504950495049506,
                "tf.reduce_sum(input_tensor)": 0.0049504950495049506,
                "tf.reduce_sum(input_tensor, axis)": 0.0049504950495049506,
                "tf.repeat(input, repeats)": 0.0049504950495049506,
                "tf.repeat(input, repeats, axis)": 0.0049504950495049506,
                "tf.reshape(tensor, shape)": 0.0049504950495049506,
                "tf.reverse(tensor, axis)": 0.0049504950495049506,
                "tf.roll(input, shift, axis)": 0.0049504950495049506,
                "tf.round(x)": 0.0049504950495049506,
                "tf.scatter_nd(indices, updates, shape)": 0.0049504950495049506,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0049504950495049506,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0049504950495049506,
                "tf.sequence_mask(lengths)": 0.0049504950495049506,
                "tf.sequence_mask(lengths, maxlen)": 0.0049504950495049506,
                "tf.shape(input)": 0.0049504950495049506,
                "tf.sign(x)": 0.0049504950495049506,
                "tf.sort(values, axis)": 0.0049504950495049506,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0049504950495049506,
                "tf.sqrt(x)": 0.0049504950495049506,
                "tf.square(x)": 0.0049504950495049506,
                "tf.squeeze(input)": 0.0049504950495049506,
                "tf.squeeze(input, axis)": 0.0049504950495049506,
                "tf.stack(values, axis)": 0.0049504950495049506,
                "tf.subtract(x, y)": 0.0049504950495049506,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0049504950495049506,
                "tf.tensordot(a, b, axes)": 0.04950495049504951,
                "tf.tile(input, multiples)": 0.0049504950495049506,
                "tf.transpose(a)": 0.0049504950495049506,
                "tf.transpose(a, perm)": 0.0049504950495049506,
                "tf.unique_with_counts(x)": 0.0049504950495049506,
                "tf.unstack(value, axis)": 0.0049504950495049506,
                "tf.where(condition)": 0.0049504950495049506,
                "tf.where(condition, x, y)": 0.0049504950495049506,
                "tf.zeros(shape)": 0.0049504950495049506,
                "tf.zeros_like(input)": 0.0049504950495049506,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0049504950495049506,
                "tf.sparse.add(a, b)": 0.0049504950495049506,
                "tf.sparse.concat(axis, sp_inputs)": 0.0049504950495049506,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0049504950495049506,
                "tf.sparse.from_dense(tensor)": 0.0049504950495049506,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0049504950495049506,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0049504950495049506,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0049504950495049506,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0049504950495049506,
                "tf.sparse.reset_shape(sp_input)": 0.0049504950495049506,
                "tf.sparse.reshape(sp_input, shape)": 0.0049504950495049506,
                "tf.sparse.retain(sp_input, to_retain)": 0.0049504950495049506,
                "tf.sparse.slice(sp_input, start, size)": 0.0049504950495049506,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0049504950495049506,
                "tf.sparse.to_dense(sp_input)": 0.0049504950495049506,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0049504950495049506,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0049504950495049506,
                "tf.sparse.transpose(sp_input)": 0.0049504950495049506,
                "tf.sparse.transpose(sp_input, perm)": 0.0049504950495049506,
                "IndexingAxis1Operation": 0.0049504950495049506,
                "IndexingOperation": 0.0049504950495049506,
                "PairCreationOperation": 0.024752475247524754,
                "SingletonTupleCreationOperation": 0.0049504950495049506,
                "SlicingAxis0BothOperation": 0.0049504950495049506,
                "SlicingAxis0LeftOperation": 0.0049504950495049506,
                "SlicingAxis0RightOperation": 0.0049504950495049506,
                "SlicingAxis1BothOperation": 0.0049504950495049506,
                "SlicingAxis1LeftOperation": 0.0049504950495049506,
                "SlicingAxis1RightOperation": 0.0049504950495049506,
                "TripleCreationOperation": 0.0049504950495049506,
                "PROVIDED_CONSTANT_WEIGHT": 0.0049504950495049506,
                "COMMON_CONSTANT_WEIGHT": 0.06435643564356436,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0049504950495049506,
                "INPUT_VARIABLE_WEIGHT": 0.10396039603960396,
                "AXIS_CONSTANT_WEIGHT": 0.0049504950495049506,
                "SHAPE_CONSTANT_WEIGHT": 0.0049504950495049506,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0049504950495049506,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.0049504950495049506,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0049504950495049506,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.0049504950495049506,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0049504950495049506
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 4,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_38",
        "description": "compute the product of marked elements",
        "target_program": "tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)",
        "source": "https://stackoverflow.com/questions/49511529/tensorflow-compute-multiplication-by-binary-matrix",
        "constants": "[]",
        "examples": {
            "inputs": "[[9, 2, 5, 3, 7, 4],[[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]],]",
            "outputs": "[35, 9, 120]"
        },
        "completions": [
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "def transform(in1, in2):\n    marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n    result = tf.reduce_prod(marked_elements, axis=1)\n    return result\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)\n",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "return tf.reduce_prod(tf.boolean_mask(in1, tf.cast(in2, tf.bool)), axis=1)",
            "marked_elements = tf.boolean_mask(in1, tf.cast(in2, tf.bool))\nresult = tf.reduce_prod(marked_elements, axis=1)\nreturn result\n"
        ],
        "tf_operators": {
            "tf.boolean_mask": 10,
            "tf.cast": 10,
            "tf.reduce_prod": 10,
            "tf.bool": 10
        },
        "coverage_percentage": 25.0,
        "total_covered": 1,
        "total_in_target": 4,
        "parsed_constants": [
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 10,
            "provided": 0,
            "common": 14,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004366812227074236,
                "tf.add(x, y)": 0.004366812227074236,
                "tf.add_n(inputs)": 0.004366812227074236,
                "tf.argmax(input, axis)": 0.004366812227074236,
                "tf.argmin(input, axis)": 0.004366812227074236,
                "tf.argsort(values, axis, stable=True)": 0.004366812227074236,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004366812227074236,
                "tf.boolean_mask(tensor, mask)": 0.048034934497816595,
                "tf.broadcast_to(input, shape)": 0.004366812227074236,
                "tf.cast(x, dtype)": 0.048034934497816595,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004366812227074236,
                "tf.concat(values, axis)": 0.004366812227074236,
                "tf.constant(value)": 0.004366812227074236,
                "tf.constant(value, dtype)": 0.004366812227074236,
                "tf.divide(x, y)": 0.004366812227074236,
                "tf.equal(x, y)": 0.004366812227074236,
                "tf.exp(x)": 0.004366812227074236,
                "tf.expand_dims(input, axis)": 0.004366812227074236,
                "tf.eye(num_rows)": 0.004366812227074236,
                "tf.eye(num_rows, num_columns)": 0.004366812227074236,
                "tf.eye(num_rows, dtype)": 0.004366812227074236,
                "tf.fill(dims, value)": 0.004366812227074236,
                "tf.gather(params, indices)": 0.004366812227074236,
                "tf.gather(params, indices, axis, batch_dims)": 0.004366812227074236,
                "tf.gather_nd(params, indices)": 0.004366812227074236,
                "tf.gather_nd(params, indices, batch_dims)": 0.004366812227074236,
                "tf.greater(x, y)": 0.004366812227074236,
                "tf.greater_equal(x, y)": 0.004366812227074236,
                "tf.math.bincount(arr)": 0.004366812227074236,
                "tf.math.ceil(x)": 0.004366812227074236,
                "tf.math.count_nonzero(input)": 0.004366812227074236,
                "tf.math.count_nonzero(input, axis)": 0.004366812227074236,
                "tf.math.cumsum(x, axis)": 0.004366812227074236,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004366812227074236,
                "tf.math.divide_no_nan(x, y)": 0.004366812227074236,
                "tf.math.floor(x)": 0.004366812227074236,
                "tf.math.log(x)": 0.004366812227074236,
                "tf.math.logical_and(x, y)": 0.004366812227074236,
                "tf.math.logical_not(x)": 0.004366812227074236,
                "tf.math.logical_or(x, y)": 0.004366812227074236,
                "tf.math.logical_xor(x, y)": 0.004366812227074236,
                "tf.math.negative(x)": 0.004366812227074236,
                "tf.math.reciprocal(x)": 0.004366812227074236,
                "tf.math.reciprocal_no_nan(x)": 0.004366812227074236,
                "tf.math.segment_max(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_mean(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_min(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_prod(data, segment_ids)": 0.004366812227074236,
                "tf.math.segment_sum(data, segment_ids)": 0.004366812227074236,
                "tf.math.squared_difference(x, y)": 0.004366812227074236,
                "tf.math.top_k(input, k)": 0.004366812227074236,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004366812227074236,
                "tf.matmul(a, b)": 0.004366812227074236,
                "tf.maximum(x, y)": 0.004366812227074236,
                "tf.minimum(x, y)": 0.004366812227074236,
                "tf.multiply(x, y)": 0.004366812227074236,
                "tf.not_equal(x, y)": 0.004366812227074236,
                "tf.one_hot(indices, depth)": 0.004366812227074236,
                "tf.ones(shape)": 0.004366812227074236,
                "tf.ones_like(input)": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004366812227074236,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004366812227074236,
                "tf.range(start)": 0.004366812227074236,
                "tf.range(start, limit, delta)": 0.004366812227074236,
                "tf.reduce_any(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_all(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_max(input_tensor)": 0.004366812227074236,
                "tf.reduce_max(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_mean(input_tensor)": 0.004366812227074236,
                "tf.reduce_mean(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_min(input_tensor)": 0.004366812227074236,
                "tf.reduce_min(input_tensor, axis)": 0.004366812227074236,
                "tf.reduce_prod(input_tensor, axis)": 0.048034934497816595,
                "tf.reduce_sum(input_tensor)": 0.004366812227074236,
                "tf.reduce_sum(input_tensor, axis)": 0.004366812227074236,
                "tf.repeat(input, repeats)": 0.004366812227074236,
                "tf.repeat(input, repeats, axis)": 0.004366812227074236,
                "tf.reshape(tensor, shape)": 0.004366812227074236,
                "tf.reverse(tensor, axis)": 0.004366812227074236,
                "tf.roll(input, shift, axis)": 0.004366812227074236,
                "tf.round(x)": 0.004366812227074236,
                "tf.scatter_nd(indices, updates, shape)": 0.004366812227074236,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004366812227074236,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004366812227074236,
                "tf.sequence_mask(lengths)": 0.004366812227074236,
                "tf.sequence_mask(lengths, maxlen)": 0.004366812227074236,
                "tf.shape(input)": 0.004366812227074236,
                "tf.sign(x)": 0.004366812227074236,
                "tf.sort(values, axis)": 0.004366812227074236,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004366812227074236,
                "tf.sqrt(x)": 0.004366812227074236,
                "tf.square(x)": 0.004366812227074236,
                "tf.squeeze(input)": 0.004366812227074236,
                "tf.squeeze(input, axis)": 0.004366812227074236,
                "tf.stack(values, axis)": 0.004366812227074236,
                "tf.subtract(x, y)": 0.004366812227074236,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004366812227074236,
                "tf.tensordot(a, b, axes)": 0.004366812227074236,
                "tf.tile(input, multiples)": 0.004366812227074236,
                "tf.transpose(a)": 0.004366812227074236,
                "tf.transpose(a, perm)": 0.004366812227074236,
                "tf.unique_with_counts(x)": 0.004366812227074236,
                "tf.unstack(value, axis)": 0.004366812227074236,
                "tf.where(condition)": 0.004366812227074236,
                "tf.where(condition, x, y)": 0.004366812227074236,
                "tf.zeros(shape)": 0.004366812227074236,
                "tf.zeros_like(input)": 0.004366812227074236,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004366812227074236,
                "tf.sparse.add(a, b)": 0.004366812227074236,
                "tf.sparse.concat(axis, sp_inputs)": 0.004366812227074236,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004366812227074236,
                "tf.sparse.from_dense(tensor)": 0.004366812227074236,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004366812227074236,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004366812227074236,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004366812227074236,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004366812227074236,
                "tf.sparse.reset_shape(sp_input)": 0.004366812227074236,
                "tf.sparse.reshape(sp_input, shape)": 0.004366812227074236,
                "tf.sparse.retain(sp_input, to_retain)": 0.004366812227074236,
                "tf.sparse.slice(sp_input, start, size)": 0.004366812227074236,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004366812227074236,
                "tf.sparse.to_dense(sp_input)": 0.004366812227074236,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004366812227074236,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004366812227074236,
                "tf.sparse.transpose(sp_input)": 0.004366812227074236,
                "tf.sparse.transpose(sp_input, perm)": 0.004366812227074236,
                "IndexingAxis1Operation": 0.004366812227074236,
                "IndexingOperation": 0.004366812227074236,
                "PairCreationOperation": 0.004366812227074236,
                "SingletonTupleCreationOperation": 0.004366812227074236,
                "SlicingAxis0BothOperation": 0.004366812227074236,
                "SlicingAxis0LeftOperation": 0.004366812227074236,
                "SlicingAxis0RightOperation": 0.004366812227074236,
                "SlicingAxis1BothOperation": 0.004366812227074236,
                "SlicingAxis1LeftOperation": 0.004366812227074236,
                "SlicingAxis1RightOperation": 0.004366812227074236,
                "TripleCreationOperation": 0.004366812227074236,
                "PROVIDED_CONSTANT_WEIGHT": 0.004366812227074236,
                "COMMON_CONSTANT_WEIGHT": 0.06550218340611354,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004366812227074236,
                "INPUT_VARIABLE_WEIGHT": 0.09170305676855896,
                "AXIS_CONSTANT_WEIGHT": 0.004366812227074236,
                "SHAPE_CONSTANT_WEIGHT": 0.004366812227074236,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004366812227074236,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.048034934497816595,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004366812227074236
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 4,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 4,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 4,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 4,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_39",
        "description": "(\\'set to 0 the elements with absolute value less than 1, and square the other elements\\')",
        "target_program": "tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))",
        "source": "https://stackoverflow.com/questions/37912161/how-can-i-compute-element-wise-conditionals-on-batches-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]],]",
            "outputs": "[[2.25, 1.0, 0.0, 4.0],    [1.21, 0.0, 0.0, 0.0],    [1.0, 0.0, 1.21, 6.25]]"
        },
        "completions": [
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.where(tf.greater_equal(tf.abs(in1), 1), tf.square(in1), tf.zeros_like(in1))",
            "return tf.where(tf.less(tf.abs(in1), 1), tf.zeros_like(in1), tf.square(in1))\n",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), tf.float32), tf.square(in1))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "return tf.multiply(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1), tf.square(tf.cast(tf.greater_equal(tf.abs(in1), 1), in1)))\n",
            "return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))",
            "def transform(in1):\n    return tf.where(tf.abs(in1) < 1, tf.zeros_like(in1), tf.square(in1))\n",
            "def transform(in1):\n    mask = tf.cast(tf.abs(in1) < 1, tf.float32)\n    return tf.multiply(tf.square(in1), 1 - mask)\n"
        ],
        "tf_operators": {
            "tf.where": 7,
            "tf.zeros_like": 7,
            "tf.abs": 10,
            "tf.square": 10,
            "tf.greater_equal": 3,
            "tf.less": 1,
            "tf.multiply": 3,
            "tf.float32": 2,
            "tf.cast": 3
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 4,
        "total_in_target": 6,
        "parsed_constants": [
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1,
                1
            ]
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 1,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 29,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 12,
            "shape_tuple": 0,
            "tf_float32": 2,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.04918032786885246,
                "tf.add(x, y)": 0.004098360655737705,
                "tf.add_n(inputs)": 0.004098360655737705,
                "tf.argmax(input, axis)": 0.004098360655737705,
                "tf.argmin(input, axis)": 0.004098360655737705,
                "tf.argsort(values, axis, stable=True)": 0.004098360655737705,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004098360655737705,
                "tf.boolean_mask(tensor, mask)": 0.004098360655737705,
                "tf.broadcast_to(input, shape)": 0.004098360655737705,
                "tf.cast(x, dtype)": 0.020491803278688523,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004098360655737705,
                "tf.concat(values, axis)": 0.004098360655737705,
                "tf.constant(value)": 0.004098360655737705,
                "tf.constant(value, dtype)": 0.004098360655737705,
                "tf.divide(x, y)": 0.004098360655737705,
                "tf.equal(x, y)": 0.004098360655737705,
                "tf.exp(x)": 0.004098360655737705,
                "tf.expand_dims(input, axis)": 0.004098360655737705,
                "tf.eye(num_rows)": 0.004098360655737705,
                "tf.eye(num_rows, num_columns)": 0.004098360655737705,
                "tf.eye(num_rows, dtype)": 0.004098360655737705,
                "tf.fill(dims, value)": 0.004098360655737705,
                "tf.gather(params, indices)": 0.004098360655737705,
                "tf.gather(params, indices, axis, batch_dims)": 0.004098360655737705,
                "tf.gather_nd(params, indices)": 0.004098360655737705,
                "tf.gather_nd(params, indices, batch_dims)": 0.004098360655737705,
                "tf.greater(x, y)": 0.004098360655737705,
                "tf.greater_equal(x, y)": 0.020491803278688523,
                "tf.math.bincount(arr)": 0.004098360655737705,
                "tf.math.ceil(x)": 0.004098360655737705,
                "tf.math.count_nonzero(input)": 0.004098360655737705,
                "tf.math.count_nonzero(input, axis)": 0.004098360655737705,
                "tf.math.cumsum(x, axis)": 0.004098360655737705,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004098360655737705,
                "tf.math.divide_no_nan(x, y)": 0.004098360655737705,
                "tf.math.floor(x)": 0.004098360655737705,
                "tf.math.log(x)": 0.004098360655737705,
                "tf.math.logical_and(x, y)": 0.004098360655737705,
                "tf.math.logical_not(x)": 0.004098360655737705,
                "tf.math.logical_or(x, y)": 0.004098360655737705,
                "tf.math.logical_xor(x, y)": 0.004098360655737705,
                "tf.math.negative(x)": 0.004098360655737705,
                "tf.math.reciprocal(x)": 0.004098360655737705,
                "tf.math.reciprocal_no_nan(x)": 0.004098360655737705,
                "tf.math.segment_max(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_mean(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_min(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_prod(data, segment_ids)": 0.004098360655737705,
                "tf.math.segment_sum(data, segment_ids)": 0.004098360655737705,
                "tf.math.squared_difference(x, y)": 0.004098360655737705,
                "tf.math.top_k(input, k)": 0.004098360655737705,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004098360655737705,
                "tf.matmul(a, b)": 0.004098360655737705,
                "tf.maximum(x, y)": 0.004098360655737705,
                "tf.minimum(x, y)": 0.004098360655737705,
                "tf.multiply(x, y)": 0.01639344262295082,
                "tf.not_equal(x, y)": 0.004098360655737705,
                "tf.one_hot(indices, depth)": 0.004098360655737705,
                "tf.ones(shape)": 0.004098360655737705,
                "tf.ones_like(input)": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004098360655737705,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004098360655737705,
                "tf.range(start)": 0.004098360655737705,
                "tf.range(start, limit, delta)": 0.004098360655737705,
                "tf.reduce_any(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_all(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_max(input_tensor)": 0.004098360655737705,
                "tf.reduce_max(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_mean(input_tensor)": 0.004098360655737705,
                "tf.reduce_mean(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_min(input_tensor)": 0.004098360655737705,
                "tf.reduce_min(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_prod(input_tensor, axis)": 0.004098360655737705,
                "tf.reduce_sum(input_tensor)": 0.004098360655737705,
                "tf.reduce_sum(input_tensor, axis)": 0.004098360655737705,
                "tf.repeat(input, repeats)": 0.004098360655737705,
                "tf.repeat(input, repeats, axis)": 0.004098360655737705,
                "tf.reshape(tensor, shape)": 0.004098360655737705,
                "tf.reverse(tensor, axis)": 0.004098360655737705,
                "tf.roll(input, shift, axis)": 0.004098360655737705,
                "tf.round(x)": 0.004098360655737705,
                "tf.scatter_nd(indices, updates, shape)": 0.004098360655737705,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004098360655737705,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004098360655737705,
                "tf.sequence_mask(lengths)": 0.004098360655737705,
                "tf.sequence_mask(lengths, maxlen)": 0.004098360655737705,
                "tf.shape(input)": 0.004098360655737705,
                "tf.sign(x)": 0.004098360655737705,
                "tf.sort(values, axis)": 0.004098360655737705,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004098360655737705,
                "tf.sqrt(x)": 0.004098360655737705,
                "tf.square(x)": 0.045081967213114756,
                "tf.squeeze(input)": 0.004098360655737705,
                "tf.squeeze(input, axis)": 0.004098360655737705,
                "tf.stack(values, axis)": 0.004098360655737705,
                "tf.subtract(x, y)": 0.004098360655737705,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004098360655737705,
                "tf.tensordot(a, b, axes)": 0.004098360655737705,
                "tf.tile(input, multiples)": 0.004098360655737705,
                "tf.transpose(a)": 0.004098360655737705,
                "tf.transpose(a, perm)": 0.004098360655737705,
                "tf.unique_with_counts(x)": 0.004098360655737705,
                "tf.unstack(value, axis)": 0.004098360655737705,
                "tf.where(condition)": 0.004098360655737705,
                "tf.where(condition, x, y)": 0.03278688524590164,
                "tf.zeros(shape)": 0.004098360655737705,
                "tf.zeros_like(input)": 0.03278688524590164,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004098360655737705,
                "tf.sparse.add(a, b)": 0.004098360655737705,
                "tf.sparse.concat(axis, sp_inputs)": 0.004098360655737705,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004098360655737705,
                "tf.sparse.from_dense(tensor)": 0.004098360655737705,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004098360655737705,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004098360655737705,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004098360655737705,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004098360655737705,
                "tf.sparse.reset_shape(sp_input)": 0.004098360655737705,
                "tf.sparse.reshape(sp_input, shape)": 0.004098360655737705,
                "tf.sparse.retain(sp_input, to_retain)": 0.004098360655737705,
                "tf.sparse.slice(sp_input, start, size)": 0.004098360655737705,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004098360655737705,
                "tf.sparse.to_dense(sp_input)": 0.004098360655737705,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004098360655737705,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004098360655737705,
                "tf.sparse.transpose(sp_input)": 0.004098360655737705,
                "tf.sparse.transpose(sp_input, perm)": 0.004098360655737705,
                "IndexingAxis1Operation": 0.004098360655737705,
                "IndexingOperation": 0.004098360655737705,
                "PairCreationOperation": 0.004098360655737705,
                "SingletonTupleCreationOperation": 0.004098360655737705,
                "SlicingAxis0BothOperation": 0.004098360655737705,
                "SlicingAxis0LeftOperation": 0.004098360655737705,
                "SlicingAxis0RightOperation": 0.004098360655737705,
                "SlicingAxis1BothOperation": 0.004098360655737705,
                "SlicingAxis1LeftOperation": 0.004098360655737705,
                "SlicingAxis1RightOperation": 0.004098360655737705,
                "TripleCreationOperation": 0.004098360655737705,
                "PROVIDED_CONSTANT_WEIGHT": 0.004098360655737705,
                "COMMON_CONSTANT_WEIGHT": 0.05327868852459016,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004098360655737705,
                "INPUT_VARIABLE_WEIGHT": 0.12295081967213115,
                "AXIS_CONSTANT_WEIGHT": 0.004098360655737705,
                "SHAPE_CONSTANT_WEIGHT": 0.004098360655737705,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004098360655737705,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004098360655737705,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.012295081967213115,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004098360655737705,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004098360655737705
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 4,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 6,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 6,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 4,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 5,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 5,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_40",
        "description": "use the output of tf.nn.top_k to make a sparse tensor",
        "target_program": "tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))",
        "source": "https://stackoverflow.com/questions/43996831/make-a-sparse-tensor-based-on-the-output-of-tf-nn-top-k",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 5, 2, 7, 8, 6],[[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]],]",
            "outputs": "[[0, 0, 4, 0, 5],[0, 2, 0, 7, 0],[8, 0, 0, 6, 0]]"
        },
        "completions": [
            "return tf.sparse.SparseTensor(tf.cast(in2, tf.int64), in1, [3, 5])",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in2, axis=0) + 1)",
            "values = in1\nindices = in2\nreturn tf.scatter_nd(indices, values, shape=(3, 5))\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "values, indices = tf.unstack(in2, axis=1)\nreturn tf.sparse.SparseTensor(indices, values, dense_shape=tf.constant([3, 5]))\n",
            "values = in1\nindices = in2\nreturn tf.cast(tf.scatter_nd(indices, values, shape=[3, 5]), tf.int32)\n",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=[3, 5])",
            "return tf.sparse.SparseTensor(indices=in2, values=in1, dense_shape=(3, 5))",
            "return tf.scatter_nd(in2, in1, tf.reduce_max(in1) + 1)"
        ],
        "tf_operators": {
            "tf.sparse.SparseTensor": 6,
            "tf.cast": 2,
            "tf.int64": 1,
            "tf.reduce_max": 2,
            "tf.scatter_nd": 4,
            "tf.constant": 1,
            "tf.unstack": 1,
            "tf.int32": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                3,
                5
            ],
            [
                0,
                1
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1,
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                3,
                5
            ],
            [
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            5
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 1,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 1
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 26,
            "shape": 0,
            "tf_bool": 0,
            "provided": 10,
            "common": 4,
            "shape_tuple": 3,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 1,
            "tf_int32": 1
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004694835680751174,
                "tf.add(x, y)": 0.004694835680751174,
                "tf.add_n(inputs)": 0.004694835680751174,
                "tf.argmax(input, axis)": 0.004694835680751174,
                "tf.argmin(input, axis)": 0.004694835680751174,
                "tf.argsort(values, axis, stable=True)": 0.004694835680751174,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004694835680751174,
                "tf.boolean_mask(tensor, mask)": 0.004694835680751174,
                "tf.broadcast_to(input, shape)": 0.004694835680751174,
                "tf.cast(x, dtype)": 0.014084507042253521,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004694835680751174,
                "tf.concat(values, axis)": 0.004694835680751174,
                "tf.constant(value)": 0.009389671361502348,
                "tf.constant(value, dtype)": 0.004694835680751174,
                "tf.divide(x, y)": 0.004694835680751174,
                "tf.equal(x, y)": 0.004694835680751174,
                "tf.exp(x)": 0.004694835680751174,
                "tf.expand_dims(input, axis)": 0.004694835680751174,
                "tf.eye(num_rows)": 0.004694835680751174,
                "tf.eye(num_rows, num_columns)": 0.004694835680751174,
                "tf.eye(num_rows, dtype)": 0.004694835680751174,
                "tf.fill(dims, value)": 0.004694835680751174,
                "tf.gather(params, indices)": 0.004694835680751174,
                "tf.gather(params, indices, axis, batch_dims)": 0.004694835680751174,
                "tf.gather_nd(params, indices)": 0.004694835680751174,
                "tf.gather_nd(params, indices, batch_dims)": 0.004694835680751174,
                "tf.greater(x, y)": 0.004694835680751174,
                "tf.greater_equal(x, y)": 0.004694835680751174,
                "tf.math.bincount(arr)": 0.004694835680751174,
                "tf.math.ceil(x)": 0.004694835680751174,
                "tf.math.count_nonzero(input)": 0.004694835680751174,
                "tf.math.count_nonzero(input, axis)": 0.004694835680751174,
                "tf.math.cumsum(x, axis)": 0.004694835680751174,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004694835680751174,
                "tf.math.divide_no_nan(x, y)": 0.004694835680751174,
                "tf.math.floor(x)": 0.004694835680751174,
                "tf.math.log(x)": 0.004694835680751174,
                "tf.math.logical_and(x, y)": 0.004694835680751174,
                "tf.math.logical_not(x)": 0.004694835680751174,
                "tf.math.logical_or(x, y)": 0.004694835680751174,
                "tf.math.logical_xor(x, y)": 0.004694835680751174,
                "tf.math.negative(x)": 0.004694835680751174,
                "tf.math.reciprocal(x)": 0.004694835680751174,
                "tf.math.reciprocal_no_nan(x)": 0.004694835680751174,
                "tf.math.segment_max(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_mean(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_min(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_prod(data, segment_ids)": 0.004694835680751174,
                "tf.math.segment_sum(data, segment_ids)": 0.004694835680751174,
                "tf.math.squared_difference(x, y)": 0.004694835680751174,
                "tf.math.top_k(input, k)": 0.004694835680751174,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004694835680751174,
                "tf.matmul(a, b)": 0.004694835680751174,
                "tf.maximum(x, y)": 0.004694835680751174,
                "tf.minimum(x, y)": 0.004694835680751174,
                "tf.multiply(x, y)": 0.004694835680751174,
                "tf.not_equal(x, y)": 0.004694835680751174,
                "tf.one_hot(indices, depth)": 0.004694835680751174,
                "tf.ones(shape)": 0.004694835680751174,
                "tf.ones_like(input)": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004694835680751174,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004694835680751174,
                "tf.range(start)": 0.004694835680751174,
                "tf.range(start, limit, delta)": 0.004694835680751174,
                "tf.reduce_any(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_all(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_max(input_tensor)": 0.009389671361502348,
                "tf.reduce_max(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_mean(input_tensor)": 0.004694835680751174,
                "tf.reduce_mean(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_min(input_tensor)": 0.004694835680751174,
                "tf.reduce_min(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_prod(input_tensor, axis)": 0.004694835680751174,
                "tf.reduce_sum(input_tensor)": 0.004694835680751174,
                "tf.reduce_sum(input_tensor, axis)": 0.004694835680751174,
                "tf.repeat(input, repeats)": 0.004694835680751174,
                "tf.repeat(input, repeats, axis)": 0.004694835680751174,
                "tf.reshape(tensor, shape)": 0.004694835680751174,
                "tf.reverse(tensor, axis)": 0.004694835680751174,
                "tf.roll(input, shift, axis)": 0.004694835680751174,
                "tf.round(x)": 0.004694835680751174,
                "tf.scatter_nd(indices, updates, shape)": 0.023474178403755867,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004694835680751174,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004694835680751174,
                "tf.sequence_mask(lengths)": 0.004694835680751174,
                "tf.sequence_mask(lengths, maxlen)": 0.004694835680751174,
                "tf.shape(input)": 0.004694835680751174,
                "tf.sign(x)": 0.004694835680751174,
                "tf.sort(values, axis)": 0.004694835680751174,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004694835680751174,
                "tf.sqrt(x)": 0.004694835680751174,
                "tf.square(x)": 0.004694835680751174,
                "tf.squeeze(input)": 0.004694835680751174,
                "tf.squeeze(input, axis)": 0.004694835680751174,
                "tf.stack(values, axis)": 0.004694835680751174,
                "tf.subtract(x, y)": 0.004694835680751174,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004694835680751174,
                "tf.tensordot(a, b, axes)": 0.004694835680751174,
                "tf.tile(input, multiples)": 0.004694835680751174,
                "tf.transpose(a)": 0.004694835680751174,
                "tf.transpose(a, perm)": 0.004694835680751174,
                "tf.unique_with_counts(x)": 0.004694835680751174,
                "tf.unstack(value, axis)": 0.009389671361502348,
                "tf.where(condition)": 0.004694835680751174,
                "tf.where(condition, x, y)": 0.004694835680751174,
                "tf.zeros(shape)": 0.004694835680751174,
                "tf.zeros_like(input)": 0.004694835680751174,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004694835680751174,
                "tf.sparse.add(a, b)": 0.004694835680751174,
                "tf.sparse.concat(axis, sp_inputs)": 0.004694835680751174,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004694835680751174,
                "tf.sparse.from_dense(tensor)": 0.004694835680751174,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004694835680751174,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004694835680751174,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004694835680751174,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004694835680751174,
                "tf.sparse.reset_shape(sp_input)": 0.004694835680751174,
                "tf.sparse.reshape(sp_input, shape)": 0.004694835680751174,
                "tf.sparse.retain(sp_input, to_retain)": 0.004694835680751174,
                "tf.sparse.slice(sp_input, start, size)": 0.004694835680751174,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004694835680751174,
                "tf.sparse.to_dense(sp_input)": 0.004694835680751174,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004694835680751174,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004694835680751174,
                "tf.sparse.transpose(sp_input)": 0.004694835680751174,
                "tf.sparse.transpose(sp_input, perm)": 0.004694835680751174,
                "IndexingAxis1Operation": 0.004694835680751174,
                "IndexingOperation": 0.004694835680751174,
                "PairCreationOperation": 0.023474178403755867,
                "SingletonTupleCreationOperation": 0.004694835680751174,
                "SlicingAxis0BothOperation": 0.004694835680751174,
                "SlicingAxis0LeftOperation": 0.004694835680751174,
                "SlicingAxis0RightOperation": 0.004694835680751174,
                "SlicingAxis1BothOperation": 0.004694835680751174,
                "SlicingAxis1LeftOperation": 0.004694835680751174,
                "SlicingAxis1RightOperation": 0.004694835680751174,
                "TripleCreationOperation": 0.004694835680751174,
                "PROVIDED_CONSTANT_WEIGHT": 0.051643192488262914,
                "COMMON_CONSTANT_WEIGHT": 0.023474178403755867,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004694835680751174,
                "INPUT_VARIABLE_WEIGHT": 0.1267605633802817,
                "AXIS_CONSTANT_WEIGHT": 0.004694835680751174,
                "SHAPE_CONSTANT_WEIGHT": 0.004694835680751174,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.018779342723004695,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.009389671361502348,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004694835680751174,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004694835680751174,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.009389671361502348
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 7,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 5,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 5,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 7
            }
        }
    },
    {
        "name": "stackoverflow_41",
        "description": "copy all elements except at the given index",
        "target_program": "tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))",
        "source": "https://stackoverflow.com/questions/54499051/elegant-way-to-access-python-list-and-tensor-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1],3,]",
            "outputs": "[5, 2, 8, 4, 1, 1, 0, 2, 1]"
        },
        "completions": [
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.gather(in1, tf.where(tf.not_equal(tf.range(tf.shape(in1)[0]), in2))[:, 0])\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "def transform(in1, in2):\n    return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.size(in1)), in2))",
            "return tf.concat([in1[:in2], in1[in2+1:]], axis=0)\n",
            "return tf.boolean_mask(in1, tf.not_equal(tf.range(tf.shape(in1)[0]), in2))"
        ],
        "tf_operators": {
            "tf.boolean_mask": 7,
            "tf.not_equal": 8,
            "tf.shape": 6,
            "tf.range": 8,
            "tf.where": 1,
            "tf.gather": 1,
            "tf.concat": 2,
            "tf.size": 2
        },
        "coverage_percentage": 75.0,
        "total_covered": 3,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0,
                0
            ],
            [
                0
            ],
            [
                1,
                0
            ],
            [
                0
            ],
            [],
            [
                0
            ],
            [],
            [
                1,
                0
            ],
            [
                0
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 4,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 32,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 10,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004132231404958678,
                "tf.add(x, y)": 0.004132231404958678,
                "tf.add_n(inputs)": 0.004132231404958678,
                "tf.argmax(input, axis)": 0.004132231404958678,
                "tf.argmin(input, axis)": 0.004132231404958678,
                "tf.argsort(values, axis, stable=True)": 0.004132231404958678,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004132231404958678,
                "tf.boolean_mask(tensor, mask)": 0.03305785123966942,
                "tf.broadcast_to(input, shape)": 0.004132231404958678,
                "tf.cast(x, dtype)": 0.004132231404958678,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004132231404958678,
                "tf.concat(values, axis)": 0.012396694214876033,
                "tf.constant(value)": 0.004132231404958678,
                "tf.constant(value, dtype)": 0.004132231404958678,
                "tf.divide(x, y)": 0.004132231404958678,
                "tf.equal(x, y)": 0.004132231404958678,
                "tf.exp(x)": 0.004132231404958678,
                "tf.expand_dims(input, axis)": 0.004132231404958678,
                "tf.eye(num_rows)": 0.004132231404958678,
                "tf.eye(num_rows, num_columns)": 0.004132231404958678,
                "tf.eye(num_rows, dtype)": 0.004132231404958678,
                "tf.fill(dims, value)": 0.004132231404958678,
                "tf.gather(params, indices)": 0.008264462809917356,
                "tf.gather(params, indices, axis, batch_dims)": 0.004132231404958678,
                "tf.gather_nd(params, indices)": 0.004132231404958678,
                "tf.gather_nd(params, indices, batch_dims)": 0.004132231404958678,
                "tf.greater(x, y)": 0.004132231404958678,
                "tf.greater_equal(x, y)": 0.004132231404958678,
                "tf.math.bincount(arr)": 0.004132231404958678,
                "tf.math.ceil(x)": 0.004132231404958678,
                "tf.math.count_nonzero(input)": 0.004132231404958678,
                "tf.math.count_nonzero(input, axis)": 0.004132231404958678,
                "tf.math.cumsum(x, axis)": 0.004132231404958678,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004132231404958678,
                "tf.math.divide_no_nan(x, y)": 0.004132231404958678,
                "tf.math.floor(x)": 0.004132231404958678,
                "tf.math.log(x)": 0.004132231404958678,
                "tf.math.logical_and(x, y)": 0.004132231404958678,
                "tf.math.logical_not(x)": 0.004132231404958678,
                "tf.math.logical_or(x, y)": 0.004132231404958678,
                "tf.math.logical_xor(x, y)": 0.004132231404958678,
                "tf.math.negative(x)": 0.004132231404958678,
                "tf.math.reciprocal(x)": 0.004132231404958678,
                "tf.math.reciprocal_no_nan(x)": 0.004132231404958678,
                "tf.math.segment_max(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_mean(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_min(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_prod(data, segment_ids)": 0.004132231404958678,
                "tf.math.segment_sum(data, segment_ids)": 0.004132231404958678,
                "tf.math.squared_difference(x, y)": 0.004132231404958678,
                "tf.math.top_k(input, k)": 0.004132231404958678,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004132231404958678,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004132231404958678,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004132231404958678,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004132231404958678,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004132231404958678,
                "tf.matmul(a, b)": 0.004132231404958678,
                "tf.maximum(x, y)": 0.004132231404958678,
                "tf.minimum(x, y)": 0.004132231404958678,
                "tf.multiply(x, y)": 0.004132231404958678,
                "tf.not_equal(x, y)": 0.0371900826446281,
                "tf.one_hot(indices, depth)": 0.004132231404958678,
                "tf.ones(shape)": 0.004132231404958678,
                "tf.ones_like(input)": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004132231404958678,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004132231404958678,
                "tf.range(start)": 0.0371900826446281,
                "tf.range(start, limit, delta)": 0.004132231404958678,
                "tf.reduce_any(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_all(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_max(input_tensor)": 0.004132231404958678,
                "tf.reduce_max(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_mean(input_tensor)": 0.004132231404958678,
                "tf.reduce_mean(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_min(input_tensor)": 0.004132231404958678,
                "tf.reduce_min(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_prod(input_tensor, axis)": 0.004132231404958678,
                "tf.reduce_sum(input_tensor)": 0.004132231404958678,
                "tf.reduce_sum(input_tensor, axis)": 0.004132231404958678,
                "tf.repeat(input, repeats)": 0.004132231404958678,
                "tf.repeat(input, repeats, axis)": 0.004132231404958678,
                "tf.reshape(tensor, shape)": 0.004132231404958678,
                "tf.reverse(tensor, axis)": 0.004132231404958678,
                "tf.roll(input, shift, axis)": 0.004132231404958678,
                "tf.round(x)": 0.004132231404958678,
                "tf.scatter_nd(indices, updates, shape)": 0.004132231404958678,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004132231404958678,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004132231404958678,
                "tf.sequence_mask(lengths)": 0.004132231404958678,
                "tf.sequence_mask(lengths, maxlen)": 0.004132231404958678,
                "tf.shape(input)": 0.028925619834710745,
                "tf.sign(x)": 0.004132231404958678,
                "tf.sort(values, axis)": 0.004132231404958678,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004132231404958678,
                "tf.sqrt(x)": 0.004132231404958678,
                "tf.square(x)": 0.004132231404958678,
                "tf.squeeze(input)": 0.004132231404958678,
                "tf.squeeze(input, axis)": 0.004132231404958678,
                "tf.stack(values, axis)": 0.004132231404958678,
                "tf.subtract(x, y)": 0.004132231404958678,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004132231404958678,
                "tf.tensordot(a, b, axes)": 0.004132231404958678,
                "tf.tile(input, multiples)": 0.004132231404958678,
                "tf.transpose(a)": 0.004132231404958678,
                "tf.transpose(a, perm)": 0.004132231404958678,
                "tf.unique_with_counts(x)": 0.004132231404958678,
                "tf.unstack(value, axis)": 0.004132231404958678,
                "tf.where(condition)": 0.008264462809917356,
                "tf.where(condition, x, y)": 0.004132231404958678,
                "tf.zeros(shape)": 0.004132231404958678,
                "tf.zeros_like(input)": 0.004132231404958678,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004132231404958678,
                "tf.sparse.add(a, b)": 0.004132231404958678,
                "tf.sparse.concat(axis, sp_inputs)": 0.004132231404958678,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004132231404958678,
                "tf.sparse.from_dense(tensor)": 0.004132231404958678,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004132231404958678,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004132231404958678,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004132231404958678,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004132231404958678,
                "tf.sparse.reset_shape(sp_input)": 0.004132231404958678,
                "tf.sparse.reshape(sp_input, shape)": 0.004132231404958678,
                "tf.sparse.retain(sp_input, to_retain)": 0.004132231404958678,
                "tf.sparse.slice(sp_input, start, size)": 0.004132231404958678,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004132231404958678,
                "tf.sparse.to_dense(sp_input)": 0.004132231404958678,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004132231404958678,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004132231404958678,
                "tf.sparse.transpose(sp_input)": 0.004132231404958678,
                "tf.sparse.transpose(sp_input, perm)": 0.004132231404958678,
                "IndexingAxis1Operation": 0.008264462809917356,
                "IndexingOperation": 0.028925619834710745,
                "PairCreationOperation": 0.008264462809917356,
                "SingletonTupleCreationOperation": 0.004132231404958678,
                "SlicingAxis0BothOperation": 0.004132231404958678,
                "SlicingAxis0LeftOperation": 0.012396694214876033,
                "SlicingAxis0RightOperation": 0.012396694214876033,
                "SlicingAxis1BothOperation": 0.004132231404958678,
                "SlicingAxis1LeftOperation": 0.004132231404958678,
                "SlicingAxis1RightOperation": 0.004132231404958678,
                "TripleCreationOperation": 0.004132231404958678,
                "PROVIDED_CONSTANT_WEIGHT": 0.004132231404958678,
                "COMMON_CONSTANT_WEIGHT": 0.045454545454545456,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004132231404958678,
                "INPUT_VARIABLE_WEIGHT": 0.13636363636363635,
                "AXIS_CONSTANT_WEIGHT": 0.004132231404958678,
                "SHAPE_CONSTANT_WEIGHT": 0.004132231404958678,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004132231404958678,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004132231404958678
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 5,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 6,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 7,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 5,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 7,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 6,
                "SlicingAxis0RightOperation": 6,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_42",
        "description": "create a binary vector where the max element is 1",
        "target_program": "tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
        "source": "https://stackoverflow.com/questions/54493814/binary-vector-of-max",
        "constants": "[]",
        "examples": {
            "inputs": "[[4, 6, 2, 6, 7, 3, -3],]",
            "outputs": "[0, 0, 0, 0, 1, 0, 0]"
        },
        "completions": [
            "return tf.equal(in1, tf.reduce_max(in1))",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)\n",
            "def transform(in1):\n    return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.one_hot(tf.argmax(in1), depth=tf.size(in1), dtype=tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "return tf.equal(in1, tf.reduce_max(in1))\n",
            "return tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    return tf.cast(tf.equal(in1, max_val), tf.int32)\n",
            "def transform(in1):\n    max_val = tf.reduce_max(in1)\n    binary_vector = tf.cast(tf.equal(in1, max_val), tf.int32)\n    return binary_vector\n"
        ],
        "tf_operators": {
            "tf.reduce_max": 9,
            "tf.equal": 9,
            "tf.cast": 6,
            "tf.int32": 7,
            "tf.one_hot": 1,
            "tf.argmax": 1,
            "tf.size": 1
        },
        "coverage_percentage": 100.0,
        "total_covered": 4,
        "total_in_target": 4,
        "parsed_constants": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 0,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 7
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004807692307692308,
                "tf.add(x, y)": 0.004807692307692308,
                "tf.add_n(inputs)": 0.004807692307692308,
                "tf.argmax(input, axis)": 0.009615384615384616,
                "tf.argmin(input, axis)": 0.004807692307692308,
                "tf.argsort(values, axis, stable=True)": 0.004807692307692308,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004807692307692308,
                "tf.boolean_mask(tensor, mask)": 0.004807692307692308,
                "tf.broadcast_to(input, shape)": 0.004807692307692308,
                "tf.cast(x, dtype)": 0.03365384615384615,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004807692307692308,
                "tf.concat(values, axis)": 0.004807692307692308,
                "tf.constant(value)": 0.004807692307692308,
                "tf.constant(value, dtype)": 0.004807692307692308,
                "tf.divide(x, y)": 0.004807692307692308,
                "tf.equal(x, y)": 0.04807692307692308,
                "tf.exp(x)": 0.004807692307692308,
                "tf.expand_dims(input, axis)": 0.004807692307692308,
                "tf.eye(num_rows)": 0.004807692307692308,
                "tf.eye(num_rows, num_columns)": 0.004807692307692308,
                "tf.eye(num_rows, dtype)": 0.004807692307692308,
                "tf.fill(dims, value)": 0.004807692307692308,
                "tf.gather(params, indices)": 0.004807692307692308,
                "tf.gather(params, indices, axis, batch_dims)": 0.004807692307692308,
                "tf.gather_nd(params, indices)": 0.004807692307692308,
                "tf.gather_nd(params, indices, batch_dims)": 0.004807692307692308,
                "tf.greater(x, y)": 0.004807692307692308,
                "tf.greater_equal(x, y)": 0.004807692307692308,
                "tf.math.bincount(arr)": 0.004807692307692308,
                "tf.math.ceil(x)": 0.004807692307692308,
                "tf.math.count_nonzero(input)": 0.004807692307692308,
                "tf.math.count_nonzero(input, axis)": 0.004807692307692308,
                "tf.math.cumsum(x, axis)": 0.004807692307692308,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004807692307692308,
                "tf.math.divide_no_nan(x, y)": 0.004807692307692308,
                "tf.math.floor(x)": 0.004807692307692308,
                "tf.math.log(x)": 0.004807692307692308,
                "tf.math.logical_and(x, y)": 0.004807692307692308,
                "tf.math.logical_not(x)": 0.004807692307692308,
                "tf.math.logical_or(x, y)": 0.004807692307692308,
                "tf.math.logical_xor(x, y)": 0.004807692307692308,
                "tf.math.negative(x)": 0.004807692307692308,
                "tf.math.reciprocal(x)": 0.004807692307692308,
                "tf.math.reciprocal_no_nan(x)": 0.004807692307692308,
                "tf.math.segment_max(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_mean(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_min(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_prod(data, segment_ids)": 0.004807692307692308,
                "tf.math.segment_sum(data, segment_ids)": 0.004807692307692308,
                "tf.math.squared_difference(x, y)": 0.004807692307692308,
                "tf.math.top_k(input, k)": 0.004807692307692308,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004807692307692308,
                "tf.matmul(a, b)": 0.004807692307692308,
                "tf.maximum(x, y)": 0.004807692307692308,
                "tf.minimum(x, y)": 0.004807692307692308,
                "tf.multiply(x, y)": 0.004807692307692308,
                "tf.not_equal(x, y)": 0.004807692307692308,
                "tf.one_hot(indices, depth)": 0.009615384615384616,
                "tf.ones(shape)": 0.004807692307692308,
                "tf.ones_like(input)": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004807692307692308,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004807692307692308,
                "tf.range(start)": 0.004807692307692308,
                "tf.range(start, limit, delta)": 0.004807692307692308,
                "tf.reduce_any(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_all(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_max(input_tensor)": 0.04807692307692308,
                "tf.reduce_max(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_mean(input_tensor)": 0.004807692307692308,
                "tf.reduce_mean(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_min(input_tensor)": 0.004807692307692308,
                "tf.reduce_min(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_prod(input_tensor, axis)": 0.004807692307692308,
                "tf.reduce_sum(input_tensor)": 0.004807692307692308,
                "tf.reduce_sum(input_tensor, axis)": 0.004807692307692308,
                "tf.repeat(input, repeats)": 0.004807692307692308,
                "tf.repeat(input, repeats, axis)": 0.004807692307692308,
                "tf.reshape(tensor, shape)": 0.004807692307692308,
                "tf.reverse(tensor, axis)": 0.004807692307692308,
                "tf.roll(input, shift, axis)": 0.004807692307692308,
                "tf.round(x)": 0.004807692307692308,
                "tf.scatter_nd(indices, updates, shape)": 0.004807692307692308,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004807692307692308,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004807692307692308,
                "tf.sequence_mask(lengths)": 0.004807692307692308,
                "tf.sequence_mask(lengths, maxlen)": 0.004807692307692308,
                "tf.shape(input)": 0.004807692307692308,
                "tf.sign(x)": 0.004807692307692308,
                "tf.sort(values, axis)": 0.004807692307692308,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004807692307692308,
                "tf.sqrt(x)": 0.004807692307692308,
                "tf.square(x)": 0.004807692307692308,
                "tf.squeeze(input)": 0.004807692307692308,
                "tf.squeeze(input, axis)": 0.004807692307692308,
                "tf.stack(values, axis)": 0.004807692307692308,
                "tf.subtract(x, y)": 0.004807692307692308,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004807692307692308,
                "tf.tensordot(a, b, axes)": 0.004807692307692308,
                "tf.tile(input, multiples)": 0.004807692307692308,
                "tf.transpose(a)": 0.004807692307692308,
                "tf.transpose(a, perm)": 0.004807692307692308,
                "tf.unique_with_counts(x)": 0.004807692307692308,
                "tf.unstack(value, axis)": 0.004807692307692308,
                "tf.where(condition)": 0.004807692307692308,
                "tf.where(condition, x, y)": 0.004807692307692308,
                "tf.zeros(shape)": 0.004807692307692308,
                "tf.zeros_like(input)": 0.004807692307692308,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004807692307692308,
                "tf.sparse.add(a, b)": 0.004807692307692308,
                "tf.sparse.concat(axis, sp_inputs)": 0.004807692307692308,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004807692307692308,
                "tf.sparse.from_dense(tensor)": 0.004807692307692308,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004807692307692308,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004807692307692308,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004807692307692308,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004807692307692308,
                "tf.sparse.reset_shape(sp_input)": 0.004807692307692308,
                "tf.sparse.reshape(sp_input, shape)": 0.004807692307692308,
                "tf.sparse.retain(sp_input, to_retain)": 0.004807692307692308,
                "tf.sparse.slice(sp_input, start, size)": 0.004807692307692308,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004807692307692308,
                "tf.sparse.to_dense(sp_input)": 0.004807692307692308,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004807692307692308,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004807692307692308,
                "tf.sparse.transpose(sp_input)": 0.004807692307692308,
                "tf.sparse.transpose(sp_input, perm)": 0.004807692307692308,
                "IndexingAxis1Operation": 0.004807692307692308,
                "IndexingOperation": 0.004807692307692308,
                "PairCreationOperation": 0.004807692307692308,
                "SingletonTupleCreationOperation": 0.004807692307692308,
                "SlicingAxis0BothOperation": 0.004807692307692308,
                "SlicingAxis0LeftOperation": 0.004807692307692308,
                "SlicingAxis0RightOperation": 0.004807692307692308,
                "SlicingAxis1BothOperation": 0.004807692307692308,
                "SlicingAxis1LeftOperation": 0.004807692307692308,
                "SlicingAxis1RightOperation": 0.004807692307692308,
                "TripleCreationOperation": 0.004807692307692308,
                "PROVIDED_CONSTANT_WEIGHT": 0.004807692307692308,
                "COMMON_CONSTANT_WEIGHT": 0.004807692307692308,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004807692307692308,
                "INPUT_VARIABLE_WEIGHT": 0.10096153846153846,
                "AXIS_CONSTANT_WEIGHT": 0.004807692307692308,
                "SHAPE_CONSTANT_WEIGHT": 0.004807692307692308,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004807692307692308,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.038461538461538464,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004807692307692308,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004807692307692308,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004807692307692308
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 7,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 4,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 7,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 4,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 8,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 5,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_43",
        "description": "extract elements of a tensor given row indices",
        "target_program": "tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)",
        "source": "https://stackoverflow.com/questions/54455169/better-way-to-access-individual-elements-in-a-tensor",
        "constants": "[]",
        "examples": {
            "inputs": "[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]],[0, 1, 1, 0, 2, 0],]",
            "outputs": "[12, 88, 77, 78, -5, 10]"
        },
        "completions": [
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(params=in1, indices=in2)\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.range(tf.size(in2))], axis=1))\n",
            "return tf.gather(in1, in2)",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(params=in1, indices=in2, axis=0)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather(in1, in2)\n",
            "return tf.gather_nd(in1, tf.stack([tf.range(tf.shape(in2)[0]), in2], axis=1))\n"
        ],
        "tf_operators": {
            "tf.gather": 8,
            "tf.size": 1,
            "tf.range": 2,
            "tf.gather_nd": 2,
            "tf.stack": 2,
            "tf.shape": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [],
            [],
            [],
            [
                1
            ],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 22,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 4,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.00510204081632653,
                "tf.add(x, y)": 0.00510204081632653,
                "tf.add_n(inputs)": 0.00510204081632653,
                "tf.argmax(input, axis)": 0.00510204081632653,
                "tf.argmin(input, axis)": 0.00510204081632653,
                "tf.argsort(values, axis, stable=True)": 0.00510204081632653,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.00510204081632653,
                "tf.boolean_mask(tensor, mask)": 0.00510204081632653,
                "tf.broadcast_to(input, shape)": 0.00510204081632653,
                "tf.cast(x, dtype)": 0.00510204081632653,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.00510204081632653,
                "tf.concat(values, axis)": 0.00510204081632653,
                "tf.constant(value)": 0.00510204081632653,
                "tf.constant(value, dtype)": 0.00510204081632653,
                "tf.divide(x, y)": 0.00510204081632653,
                "tf.equal(x, y)": 0.00510204081632653,
                "tf.exp(x)": 0.00510204081632653,
                "tf.expand_dims(input, axis)": 0.00510204081632653,
                "tf.eye(num_rows)": 0.00510204081632653,
                "tf.eye(num_rows, num_columns)": 0.00510204081632653,
                "tf.eye(num_rows, dtype)": 0.00510204081632653,
                "tf.fill(dims, value)": 0.00510204081632653,
                "tf.gather(params, indices)": 0.03571428571428571,
                "tf.gather(params, indices, axis, batch_dims)": 0.01020408163265306,
                "tf.gather_nd(params, indices)": 0.015306122448979591,
                "tf.gather_nd(params, indices, batch_dims)": 0.00510204081632653,
                "tf.greater(x, y)": 0.00510204081632653,
                "tf.greater_equal(x, y)": 0.00510204081632653,
                "tf.math.bincount(arr)": 0.00510204081632653,
                "tf.math.ceil(x)": 0.00510204081632653,
                "tf.math.count_nonzero(input)": 0.00510204081632653,
                "tf.math.count_nonzero(input, axis)": 0.00510204081632653,
                "tf.math.cumsum(x, axis)": 0.00510204081632653,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.00510204081632653,
                "tf.math.divide_no_nan(x, y)": 0.00510204081632653,
                "tf.math.floor(x)": 0.00510204081632653,
                "tf.math.log(x)": 0.00510204081632653,
                "tf.math.logical_and(x, y)": 0.00510204081632653,
                "tf.math.logical_not(x)": 0.00510204081632653,
                "tf.math.logical_or(x, y)": 0.00510204081632653,
                "tf.math.logical_xor(x, y)": 0.00510204081632653,
                "tf.math.negative(x)": 0.00510204081632653,
                "tf.math.reciprocal(x)": 0.00510204081632653,
                "tf.math.reciprocal_no_nan(x)": 0.00510204081632653,
                "tf.math.segment_max(data, segment_ids)": 0.00510204081632653,
                "tf.math.segment_mean(data, segment_ids)": 0.00510204081632653,
                "tf.math.segment_min(data, segment_ids)": 0.00510204081632653,
                "tf.math.segment_prod(data, segment_ids)": 0.00510204081632653,
                "tf.math.segment_sum(data, segment_ids)": 0.00510204081632653,
                "tf.math.squared_difference(x, y)": 0.00510204081632653,
                "tf.math.top_k(input, k)": 0.00510204081632653,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.00510204081632653,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.00510204081632653,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.00510204081632653,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.00510204081632653,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.00510204081632653,
                "tf.matmul(a, b)": 0.00510204081632653,
                "tf.maximum(x, y)": 0.00510204081632653,
                "tf.minimum(x, y)": 0.00510204081632653,
                "tf.multiply(x, y)": 0.00510204081632653,
                "tf.not_equal(x, y)": 0.00510204081632653,
                "tf.one_hot(indices, depth)": 0.00510204081632653,
                "tf.ones(shape)": 0.00510204081632653,
                "tf.ones_like(input)": 0.00510204081632653,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.00510204081632653,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.00510204081632653,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.00510204081632653,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.00510204081632653,
                "tf.range(start)": 0.015306122448979591,
                "tf.range(start, limit, delta)": 0.00510204081632653,
                "tf.reduce_any(input_tensor, axis)": 0.00510204081632653,
                "tf.reduce_all(input_tensor, axis)": 0.00510204081632653,
                "tf.reduce_max(input_tensor)": 0.00510204081632653,
                "tf.reduce_max(input_tensor, axis)": 0.00510204081632653,
                "tf.reduce_mean(input_tensor)": 0.00510204081632653,
                "tf.reduce_mean(input_tensor, axis)": 0.00510204081632653,
                "tf.reduce_min(input_tensor)": 0.00510204081632653,
                "tf.reduce_min(input_tensor, axis)": 0.00510204081632653,
                "tf.reduce_prod(input_tensor, axis)": 0.00510204081632653,
                "tf.reduce_sum(input_tensor)": 0.00510204081632653,
                "tf.reduce_sum(input_tensor, axis)": 0.00510204081632653,
                "tf.repeat(input, repeats)": 0.00510204081632653,
                "tf.repeat(input, repeats, axis)": 0.00510204081632653,
                "tf.reshape(tensor, shape)": 0.00510204081632653,
                "tf.reverse(tensor, axis)": 0.00510204081632653,
                "tf.roll(input, shift, axis)": 0.00510204081632653,
                "tf.round(x)": 0.00510204081632653,
                "tf.scatter_nd(indices, updates, shape)": 0.00510204081632653,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.00510204081632653,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.00510204081632653,
                "tf.sequence_mask(lengths)": 0.00510204081632653,
                "tf.sequence_mask(lengths, maxlen)": 0.00510204081632653,
                "tf.shape(input)": 0.01020408163265306,
                "tf.sign(x)": 0.00510204081632653,
                "tf.sort(values, axis)": 0.00510204081632653,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.00510204081632653,
                "tf.sqrt(x)": 0.00510204081632653,
                "tf.square(x)": 0.00510204081632653,
                "tf.squeeze(input)": 0.00510204081632653,
                "tf.squeeze(input, axis)": 0.00510204081632653,
                "tf.stack(values, axis)": 0.015306122448979591,
                "tf.subtract(x, y)": 0.00510204081632653,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.00510204081632653,
                "tf.tensordot(a, b, axes)": 0.00510204081632653,
                "tf.tile(input, multiples)": 0.00510204081632653,
                "tf.transpose(a)": 0.00510204081632653,
                "tf.transpose(a, perm)": 0.00510204081632653,
                "tf.unique_with_counts(x)": 0.00510204081632653,
                "tf.unstack(value, axis)": 0.00510204081632653,
                "tf.where(condition)": 0.00510204081632653,
                "tf.where(condition, x, y)": 0.00510204081632653,
                "tf.zeros(shape)": 0.00510204081632653,
                "tf.zeros_like(input)": 0.00510204081632653,
                "tf.SparseTensor(indices, values, dense_shape)": 0.00510204081632653,
                "tf.sparse.add(a, b)": 0.00510204081632653,
                "tf.sparse.concat(axis, sp_inputs)": 0.00510204081632653,
                "tf.sparse.expand_dims(sp_input, axis)": 0.00510204081632653,
                "tf.sparse.from_dense(tensor)": 0.00510204081632653,
                "tf.sparse.maximum(sp_a, sp_b)": 0.00510204081632653,
                "tf.sparse.minimum(sp_a, sp_b)": 0.00510204081632653,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.00510204081632653,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.00510204081632653,
                "tf.sparse.reset_shape(sp_input)": 0.00510204081632653,
                "tf.sparse.reshape(sp_input, shape)": 0.00510204081632653,
                "tf.sparse.retain(sp_input, to_retain)": 0.00510204081632653,
                "tf.sparse.slice(sp_input, start, size)": 0.00510204081632653,
                "tf.sparse.split(sp_input, num_split, axis)": 0.00510204081632653,
                "tf.sparse.to_dense(sp_input)": 0.00510204081632653,
                "tf.sparse.to_dense(sp_input, default_value)": 0.00510204081632653,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.00510204081632653,
                "tf.sparse.transpose(sp_input)": 0.00510204081632653,
                "tf.sparse.transpose(sp_input, perm)": 0.00510204081632653,
                "IndexingAxis1Operation": 0.00510204081632653,
                "IndexingOperation": 0.01020408163265306,
                "PairCreationOperation": 0.00510204081632653,
                "SingletonTupleCreationOperation": 0.00510204081632653,
                "SlicingAxis0BothOperation": 0.00510204081632653,
                "SlicingAxis0LeftOperation": 0.00510204081632653,
                "SlicingAxis0RightOperation": 0.00510204081632653,
                "SlicingAxis1BothOperation": 0.00510204081632653,
                "SlicingAxis1LeftOperation": 0.00510204081632653,
                "SlicingAxis1RightOperation": 0.00510204081632653,
                "TripleCreationOperation": 0.00510204081632653,
                "PROVIDED_CONSTANT_WEIGHT": 0.00510204081632653,
                "COMMON_CONSTANT_WEIGHT": 0.025510204081632654,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.00510204081632653,
                "INPUT_VARIABLE_WEIGHT": 0.11734693877551021,
                "AXIS_CONSTANT_WEIGHT": 0.00510204081632653,
                "SHAPE_CONSTANT_WEIGHT": 0.00510204081632653,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.00510204081632653,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.00510204081632653,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.00510204081632653,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.00510204081632653,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.00510204081632653
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 5,
                "tf.gather(params, indices, axis, batch_dims)": 7,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_44",
        "description": "sum across columns for pairs of consecutive rows",
        "target_program": "tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))",
        "source": "https://stackoverflow.com/questions/54402389/sum-the-columns-for-each-two-consecutive-rows-of-a-tensor-of-3-dimensions",
        "constants": "[2]",
        "examples": {
            "inputs": "[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]],]",
            "outputs": "[[9, 7, 5],    [8, 4, 6],    [-2, 8, 9],    [14, 25, 36]]"
        },
        "completions": [
            "return tf.reduce_sum(tf.stack([in1[::2], in1[1::2]], axis=0), axis=0)\n  ",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, tf.shape(in1)[0], 2)], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, tf.shape(in1)[1])), axis=1)\n",
            "return tf.math.segment_sum(in1, tf.range(tf.shape(in1)[0]) // 2)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=2)\n",
            "return tf.reduce_sum(tf.reshape(in1, (-1, 2, 3)), axis=1)",
            "return tf.reduce_sum(tf.concat([in1[i:i+2] for i in range(0, len(in1), 2)], axis=1), axis=1)\n",
            "return tf.reduce_sum(tf.stack([in1[i:i+2] for i in range(0, in1.shape[0], 2)], axis=2), axis=1)\n",
            "return tf.reduce_sum(tf.reshape(in1, (4, 2, 3)), axis=1)",
            "return tf.math.unsorted_segment_sum(in1, tf.repeat(tf.range(4), 2), 4)\n"
        ],
        "tf_operators": {
            "tf.reduce_sum": 8,
            "tf.stack": 4,
            "tf.shape": 3,
            "tf.reshape": 3,
            "tf.range": 2,
            "tf.math.segment_sum": 1,
            "tf.concat": 1,
            "tf.repeat": 1,
            "tf.math.unsorted_segment_sum": 1
        },
        "coverage_percentage": 66.66666666666666,
        "total_covered": 2,
        "total_in_target": 3,
        "parsed_constants": [
            [
                2,
                1,
                2,
                0,
                0
            ],
            [
                2,
                0,
                0,
                2,
                1,
                1
            ],
            [
                -1,
                2,
                1,
                1
            ],
            [
                0,
                2
            ],
            [
                2,
                0,
                0,
                2,
                2,
                2
            ],
            [
                -1,
                2,
                3,
                1
            ],
            [
                2,
                0,
                2,
                1,
                1
            ],
            [
                2,
                0,
                0,
                2,
                2,
                1
            ],
            [
                4,
                2,
                3,
                1
            ],
            [
                4,
                2,
                4
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            4,
            -1
        ],
        "constant_counts": [
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 4,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 3,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 1,
                "shape": 0,
                "provided": 2,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 15,
            "shape": 0,
            "tf_bool": 0,
            "provided": 2,
            "common": 22,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 15,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004201680672268907,
                "tf.add(x, y)": 0.004201680672268907,
                "tf.add_n(inputs)": 0.004201680672268907,
                "tf.argmax(input, axis)": 0.004201680672268907,
                "tf.argmin(input, axis)": 0.004201680672268907,
                "tf.argsort(values, axis, stable=True)": 0.004201680672268907,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004201680672268907,
                "tf.boolean_mask(tensor, mask)": 0.004201680672268907,
                "tf.broadcast_to(input, shape)": 0.004201680672268907,
                "tf.cast(x, dtype)": 0.004201680672268907,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004201680672268907,
                "tf.concat(values, axis)": 0.008403361344537815,
                "tf.constant(value)": 0.004201680672268907,
                "tf.constant(value, dtype)": 0.004201680672268907,
                "tf.divide(x, y)": 0.004201680672268907,
                "tf.equal(x, y)": 0.004201680672268907,
                "tf.exp(x)": 0.004201680672268907,
                "tf.expand_dims(input, axis)": 0.004201680672268907,
                "tf.eye(num_rows)": 0.004201680672268907,
                "tf.eye(num_rows, num_columns)": 0.004201680672268907,
                "tf.eye(num_rows, dtype)": 0.004201680672268907,
                "tf.fill(dims, value)": 0.004201680672268907,
                "tf.gather(params, indices)": 0.004201680672268907,
                "tf.gather(params, indices, axis, batch_dims)": 0.004201680672268907,
                "tf.gather_nd(params, indices)": 0.004201680672268907,
                "tf.gather_nd(params, indices, batch_dims)": 0.004201680672268907,
                "tf.greater(x, y)": 0.004201680672268907,
                "tf.greater_equal(x, y)": 0.004201680672268907,
                "tf.math.bincount(arr)": 0.004201680672268907,
                "tf.math.ceil(x)": 0.004201680672268907,
                "tf.math.count_nonzero(input)": 0.004201680672268907,
                "tf.math.count_nonzero(input, axis)": 0.004201680672268907,
                "tf.math.cumsum(x, axis)": 0.004201680672268907,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004201680672268907,
                "tf.math.divide_no_nan(x, y)": 0.004201680672268907,
                "tf.math.floor(x)": 0.004201680672268907,
                "tf.math.log(x)": 0.004201680672268907,
                "tf.math.logical_and(x, y)": 0.004201680672268907,
                "tf.math.logical_not(x)": 0.004201680672268907,
                "tf.math.logical_or(x, y)": 0.004201680672268907,
                "tf.math.logical_xor(x, y)": 0.004201680672268907,
                "tf.math.negative(x)": 0.004201680672268907,
                "tf.math.reciprocal(x)": 0.004201680672268907,
                "tf.math.reciprocal_no_nan(x)": 0.004201680672268907,
                "tf.math.segment_max(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_mean(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_min(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_prod(data, segment_ids)": 0.004201680672268907,
                "tf.math.segment_sum(data, segment_ids)": 0.008403361344537815,
                "tf.math.squared_difference(x, y)": 0.004201680672268907,
                "tf.math.top_k(input, k)": 0.004201680672268907,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004201680672268907,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.008403361344537815,
                "tf.matmul(a, b)": 0.004201680672268907,
                "tf.maximum(x, y)": 0.004201680672268907,
                "tf.minimum(x, y)": 0.004201680672268907,
                "tf.multiply(x, y)": 0.004201680672268907,
                "tf.not_equal(x, y)": 0.004201680672268907,
                "tf.one_hot(indices, depth)": 0.004201680672268907,
                "tf.ones(shape)": 0.004201680672268907,
                "tf.ones_like(input)": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004201680672268907,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004201680672268907,
                "tf.range(start)": 0.012605042016806723,
                "tf.range(start, limit, delta)": 0.004201680672268907,
                "tf.reduce_any(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_all(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_max(input_tensor)": 0.004201680672268907,
                "tf.reduce_max(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_mean(input_tensor)": 0.004201680672268907,
                "tf.reduce_mean(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_min(input_tensor)": 0.004201680672268907,
                "tf.reduce_min(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_prod(input_tensor, axis)": 0.004201680672268907,
                "tf.reduce_sum(input_tensor)": 0.004201680672268907,
                "tf.reduce_sum(input_tensor, axis)": 0.004201680672268907,
                "tf.repeat(input, repeats)": 0.008403361344537815,
                "tf.repeat(input, repeats, axis)": 0.004201680672268907,
                "tf.reshape(tensor, shape)": 0.01680672268907563,
                "tf.reverse(tensor, axis)": 0.004201680672268907,
                "tf.roll(input, shift, axis)": 0.004201680672268907,
                "tf.round(x)": 0.004201680672268907,
                "tf.scatter_nd(indices, updates, shape)": 0.004201680672268907,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004201680672268907,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004201680672268907,
                "tf.sequence_mask(lengths)": 0.004201680672268907,
                "tf.sequence_mask(lengths, maxlen)": 0.004201680672268907,
                "tf.shape(input)": 0.01680672268907563,
                "tf.sign(x)": 0.004201680672268907,
                "tf.sort(values, axis)": 0.004201680672268907,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004201680672268907,
                "tf.sqrt(x)": 0.004201680672268907,
                "tf.square(x)": 0.004201680672268907,
                "tf.squeeze(input)": 0.004201680672268907,
                "tf.squeeze(input, axis)": 0.004201680672268907,
                "tf.stack(values, axis)": 0.02100840336134454,
                "tf.subtract(x, y)": 0.004201680672268907,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004201680672268907,
                "tf.tensordot(a, b, axes)": 0.004201680672268907,
                "tf.tile(input, multiples)": 0.004201680672268907,
                "tf.transpose(a)": 0.004201680672268907,
                "tf.transpose(a, perm)": 0.004201680672268907,
                "tf.unique_with_counts(x)": 0.004201680672268907,
                "tf.unstack(value, axis)": 0.004201680672268907,
                "tf.where(condition)": 0.004201680672268907,
                "tf.where(condition, x, y)": 0.004201680672268907,
                "tf.zeros(shape)": 0.004201680672268907,
                "tf.zeros_like(input)": 0.004201680672268907,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004201680672268907,
                "tf.sparse.add(a, b)": 0.004201680672268907,
                "tf.sparse.concat(axis, sp_inputs)": 0.004201680672268907,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004201680672268907,
                "tf.sparse.from_dense(tensor)": 0.004201680672268907,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004201680672268907,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004201680672268907,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004201680672268907,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004201680672268907,
                "tf.sparse.reset_shape(sp_input)": 0.004201680672268907,
                "tf.sparse.reshape(sp_input, shape)": 0.004201680672268907,
                "tf.sparse.retain(sp_input, to_retain)": 0.004201680672268907,
                "tf.sparse.slice(sp_input, start, size)": 0.004201680672268907,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004201680672268907,
                "tf.sparse.to_dense(sp_input)": 0.004201680672268907,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004201680672268907,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004201680672268907,
                "tf.sparse.transpose(sp_input)": 0.004201680672268907,
                "tf.sparse.transpose(sp_input, perm)": 0.004201680672268907,
                "IndexingAxis1Operation": 0.004201680672268907,
                "IndexingOperation": 0.025210084033613446,
                "PairCreationOperation": 0.004201680672268907,
                "SingletonTupleCreationOperation": 0.004201680672268907,
                "SlicingAxis0BothOperation": 0.02100840336134454,
                "SlicingAxis0LeftOperation": 0.008403361344537815,
                "SlicingAxis0RightOperation": 0.004201680672268907,
                "SlicingAxis1BothOperation": 0.004201680672268907,
                "SlicingAxis1LeftOperation": 0.004201680672268907,
                "SlicingAxis1RightOperation": 0.004201680672268907,
                "TripleCreationOperation": 0.01680672268907563,
                "PROVIDED_CONSTANT_WEIGHT": 0.012605042016806723,
                "COMMON_CONSTANT_WEIGHT": 0.09663865546218488,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004201680672268907,
                "INPUT_VARIABLE_WEIGHT": 0.06722689075630252,
                "AXIS_CONSTANT_WEIGHT": 0.06722689075630252,
                "SHAPE_CONSTANT_WEIGHT": 0.004201680672268907,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004201680672268907,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004201680672268907
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 7,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 7,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 6,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 7,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 6,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 6,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 6,
                "SlicingAxis0LeftOperation": 7,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 6,
                "PROVIDED_CONSTANT_WEIGHT": 6,
                "COMMON_CONSTANT_WEIGHT": 3,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 4,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_45",
        "description": "reverse the order in the marked rows",
        "target_program": "tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)",
        "source": "https://stackoverflow.com/questions/54337925/reverse-order-of-some-elements-in-tensorflow",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]],[1, 0, 1, 0, 1],]",
            "outputs": "[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]]"
        },
        "completions": [
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-2])",
            "result = tf.reverse(in1, axis=[1])\nmask = tf.equal(in2, 0)\nindices = tf.where(mask)\nreturn tf.tensor_scatter_nd_update(result, indices, tf.reverse(tf.gather_nd(in1, indices), axis=[2]))\n",
            "def transform(in1, in2):\n    return tf.reverse(in1, axis=[1])[0, in2]\n",
            "marked_rows = tf.where(in2)\nreversed_rows = tf.reverse(in1, axis=[1])\nresult = tf.tensor_scatter_nd_update(in1, marked_rows, reversed_rows)\nreturn result\n",
            "return tf.gather_nd(in1, tf.stack([in2, tf.argsort(in2)], axis=1))",
            "def transform(in1, in2):\n    return tf.reverse(tf.boolean_mask(in1, in2, axis=2), axis=[2])\n",
            "return tf.reverse(tf.boolean_mask(in1, tf.cast(in2, tf.bool), axis=1), axis=[-1])",
            "return tf.stack([tf.reverse(row, axis=[-1]) if mark == 1 else row for row, mark in zip(tf.squeeze(in1, 0), in2)])",
            "return tf.where(in2, tf.reverse(in1, [-1]), in1)",
            "return tf.stack([tf.reverse(row, axis=[0]) if mark else row for row, mark in zip(tf.unstack(in1, axis=1), tf.unstack(in2))], axis=1)"
        ],
        "tf_operators": {
            "tf.reverse": 9,
            "tf.cast": 2,
            "tf.boolean_mask": 3,
            "tf.bool": 2,
            "tf.where": 3,
            "tf.tensor_scatter_nd_update": 2,
            "tf.equal": 1,
            "tf.gather_nd": 2,
            "tf.argsort": 1,
            "tf.stack": 3,
            "tf.squeeze": 1,
            "tf.unstack": 1
        },
        "coverage_percentage": 33.33333333333333,
        "total_covered": 1,
        "total_in_target": 3,
        "parsed_constants": [
            [
                1,
                -2
            ],
            [
                1,
                0,
                2
            ],
            [
                1,
                0
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2,
                2
            ],
            [
                1,
                -1
            ],
            [
                1,
                -1,
                0
            ],
            [
                -1
            ],
            [
                0,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            -1,
            -2
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 6,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 2,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 26,
            "shape": 0,
            "tf_bool": 2,
            "provided": 1,
            "common": 15,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 3,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004273504273504274,
                "tf.add(x, y)": 0.004273504273504274,
                "tf.add_n(inputs)": 0.004273504273504274,
                "tf.argmax(input, axis)": 0.004273504273504274,
                "tf.argmin(input, axis)": 0.004273504273504274,
                "tf.argsort(values, axis, stable=True)": 0.004273504273504274,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004273504273504274,
                "tf.boolean_mask(tensor, mask)": 0.017094017094017096,
                "tf.broadcast_to(input, shape)": 0.004273504273504274,
                "tf.cast(x, dtype)": 0.01282051282051282,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004273504273504274,
                "tf.concat(values, axis)": 0.004273504273504274,
                "tf.constant(value)": 0.004273504273504274,
                "tf.constant(value, dtype)": 0.004273504273504274,
                "tf.divide(x, y)": 0.004273504273504274,
                "tf.equal(x, y)": 0.008547008547008548,
                "tf.exp(x)": 0.004273504273504274,
                "tf.expand_dims(input, axis)": 0.004273504273504274,
                "tf.eye(num_rows)": 0.004273504273504274,
                "tf.eye(num_rows, num_columns)": 0.004273504273504274,
                "tf.eye(num_rows, dtype)": 0.004273504273504274,
                "tf.fill(dims, value)": 0.004273504273504274,
                "tf.gather(params, indices)": 0.004273504273504274,
                "tf.gather(params, indices, axis, batch_dims)": 0.004273504273504274,
                "tf.gather_nd(params, indices)": 0.01282051282051282,
                "tf.gather_nd(params, indices, batch_dims)": 0.004273504273504274,
                "tf.greater(x, y)": 0.004273504273504274,
                "tf.greater_equal(x, y)": 0.004273504273504274,
                "tf.math.bincount(arr)": 0.004273504273504274,
                "tf.math.ceil(x)": 0.004273504273504274,
                "tf.math.count_nonzero(input)": 0.004273504273504274,
                "tf.math.count_nonzero(input, axis)": 0.004273504273504274,
                "tf.math.cumsum(x, axis)": 0.004273504273504274,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004273504273504274,
                "tf.math.divide_no_nan(x, y)": 0.004273504273504274,
                "tf.math.floor(x)": 0.004273504273504274,
                "tf.math.log(x)": 0.004273504273504274,
                "tf.math.logical_and(x, y)": 0.004273504273504274,
                "tf.math.logical_not(x)": 0.004273504273504274,
                "tf.math.logical_or(x, y)": 0.004273504273504274,
                "tf.math.logical_xor(x, y)": 0.004273504273504274,
                "tf.math.negative(x)": 0.004273504273504274,
                "tf.math.reciprocal(x)": 0.004273504273504274,
                "tf.math.reciprocal_no_nan(x)": 0.004273504273504274,
                "tf.math.segment_max(data, segment_ids)": 0.004273504273504274,
                "tf.math.segment_mean(data, segment_ids)": 0.004273504273504274,
                "tf.math.segment_min(data, segment_ids)": 0.004273504273504274,
                "tf.math.segment_prod(data, segment_ids)": 0.004273504273504274,
                "tf.math.segment_sum(data, segment_ids)": 0.004273504273504274,
                "tf.math.squared_difference(x, y)": 0.004273504273504274,
                "tf.math.top_k(input, k)": 0.004273504273504274,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004273504273504274,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004273504273504274,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004273504273504274,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004273504273504274,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004273504273504274,
                "tf.matmul(a, b)": 0.004273504273504274,
                "tf.maximum(x, y)": 0.004273504273504274,
                "tf.minimum(x, y)": 0.004273504273504274,
                "tf.multiply(x, y)": 0.004273504273504274,
                "tf.not_equal(x, y)": 0.004273504273504274,
                "tf.one_hot(indices, depth)": 0.004273504273504274,
                "tf.ones(shape)": 0.004273504273504274,
                "tf.ones_like(input)": 0.004273504273504274,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004273504273504274,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004273504273504274,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004273504273504274,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004273504273504274,
                "tf.range(start)": 0.004273504273504274,
                "tf.range(start, limit, delta)": 0.004273504273504274,
                "tf.reduce_any(input_tensor, axis)": 0.004273504273504274,
                "tf.reduce_all(input_tensor, axis)": 0.004273504273504274,
                "tf.reduce_max(input_tensor)": 0.004273504273504274,
                "tf.reduce_max(input_tensor, axis)": 0.004273504273504274,
                "tf.reduce_mean(input_tensor)": 0.004273504273504274,
                "tf.reduce_mean(input_tensor, axis)": 0.004273504273504274,
                "tf.reduce_min(input_tensor)": 0.004273504273504274,
                "tf.reduce_min(input_tensor, axis)": 0.004273504273504274,
                "tf.reduce_prod(input_tensor, axis)": 0.004273504273504274,
                "tf.reduce_sum(input_tensor)": 0.004273504273504274,
                "tf.reduce_sum(input_tensor, axis)": 0.004273504273504274,
                "tf.repeat(input, repeats)": 0.004273504273504274,
                "tf.repeat(input, repeats, axis)": 0.004273504273504274,
                "tf.reshape(tensor, shape)": 0.004273504273504274,
                "tf.reverse(tensor, axis)": 0.04700854700854701,
                "tf.roll(input, shift, axis)": 0.004273504273504274,
                "tf.round(x)": 0.004273504273504274,
                "tf.scatter_nd(indices, updates, shape)": 0.004273504273504274,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004273504273504274,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004273504273504274,
                "tf.sequence_mask(lengths)": 0.004273504273504274,
                "tf.sequence_mask(lengths, maxlen)": 0.004273504273504274,
                "tf.shape(input)": 0.004273504273504274,
                "tf.sign(x)": 0.004273504273504274,
                "tf.sort(values, axis)": 0.004273504273504274,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004273504273504274,
                "tf.sqrt(x)": 0.004273504273504274,
                "tf.square(x)": 0.004273504273504274,
                "tf.squeeze(input)": 0.004273504273504274,
                "tf.squeeze(input, axis)": 0.008547008547008548,
                "tf.stack(values, axis)": 0.017094017094017096,
                "tf.subtract(x, y)": 0.004273504273504274,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.01282051282051282,
                "tf.tensordot(a, b, axes)": 0.004273504273504274,
                "tf.tile(input, multiples)": 0.004273504273504274,
                "tf.transpose(a)": 0.004273504273504274,
                "tf.transpose(a, perm)": 0.004273504273504274,
                "tf.unique_with_counts(x)": 0.004273504273504274,
                "tf.unstack(value, axis)": 0.01282051282051282,
                "tf.where(condition)": 0.01282051282051282,
                "tf.where(condition, x, y)": 0.008547008547008548,
                "tf.zeros(shape)": 0.004273504273504274,
                "tf.zeros_like(input)": 0.004273504273504274,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004273504273504274,
                "tf.sparse.add(a, b)": 0.004273504273504274,
                "tf.sparse.concat(axis, sp_inputs)": 0.004273504273504274,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004273504273504274,
                "tf.sparse.from_dense(tensor)": 0.004273504273504274,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004273504273504274,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004273504273504274,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004273504273504274,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004273504273504274,
                "tf.sparse.reset_shape(sp_input)": 0.004273504273504274,
                "tf.sparse.reshape(sp_input, shape)": 0.004273504273504274,
                "tf.sparse.retain(sp_input, to_retain)": 0.004273504273504274,
                "tf.sparse.slice(sp_input, start, size)": 0.004273504273504274,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004273504273504274,
                "tf.sparse.to_dense(sp_input)": 0.004273504273504274,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004273504273504274,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004273504273504274,
                "tf.sparse.transpose(sp_input)": 0.004273504273504274,
                "tf.sparse.transpose(sp_input, perm)": 0.004273504273504274,
                "IndexingAxis1Operation": 0.004273504273504274,
                "IndexingOperation": 0.004273504273504274,
                "PairCreationOperation": 0.017094017094017096,
                "SingletonTupleCreationOperation": 0.004273504273504274,
                "SlicingAxis0BothOperation": 0.004273504273504274,
                "SlicingAxis0LeftOperation": 0.004273504273504274,
                "SlicingAxis0RightOperation": 0.004273504273504274,
                "SlicingAxis1BothOperation": 0.004273504273504274,
                "SlicingAxis1LeftOperation": 0.004273504273504274,
                "SlicingAxis1RightOperation": 0.004273504273504274,
                "TripleCreationOperation": 0.004273504273504274,
                "PROVIDED_CONSTANT_WEIGHT": 0.008547008547008548,
                "COMMON_CONSTANT_WEIGHT": 0.06837606837606838,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004273504273504274,
                "INPUT_VARIABLE_WEIGHT": 0.11538461538461539,
                "AXIS_CONSTANT_WEIGHT": 0.017094017094017096,
                "SHAPE_CONSTANT_WEIGHT": 0.004273504273504274,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004273504273504274,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004273504273504274,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004273504273504274,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.01282051282051282,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004273504273504274
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 6,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 6,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 4,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 7,
                "tf.stack(values, axis)": 6,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 6,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 6,
                "tf.where(condition)": 6,
                "tf.where(condition, x, y)": 7,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 7,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 6,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_46",
        "description": "convert segment lengths to segment ids",
        "target_program": "tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)",
        "source": "https://stackoverflow.com/questions/58652161/how-to-convert-2-3-4-to-0-0-1-1-1-2-2-2-2-to-utilize-tf-math-segment-sum",
        "constants": "[]",
        "examples": {
            "inputs": "[[3, 4, 1],]",
            "outputs": "[0, 0, 0, 1, 1, 1, 1, 2]"
        },
        "completions": [
            "return tf.concat([tf.fill([length], i) for i, length in enumerate(in1)], axis=0)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "return tf.argsort(tf.repeat(tf.range(tf.reduce_sum(in1)), tf.unstack(in1)), stable=True)",
            "def transform(in1):\n    segment_lengths = tf.cast(in1, tf.int32)\n    segment_ids = tf.cumsum(tf.ones_like(segment_lengths), exclusive=True)\n    return tf.repeat(segment_ids, segment_lengths)\n",
            "def transform(in1):\n    segment_lengths = in1\n    segment_ids = tf.repeat(tf.range(tf.size(segment_lengths)), segment_lengths)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.shape(in1)[0]), in1)",
            "def transform(in1):\n    segment_ids = tf.repeat(tf.range(tf.size(in1)), in1)\n    return segment_ids\n",
            "return tf.repeat(tf.range(tf.size(in1)), in1)",
            "return tf.expand_dims(tf.cast(tf.repeat(tf.range(tf.shape(in1)[0]), in1), tf.int32), 1)"
        ],
        "tf_operators": {
            "tf.concat": 1,
            "tf.fill": 1,
            "tf.range": 8,
            "tf.shape": 4,
            "tf.repeat": 9,
            "tf.unstack": 1,
            "tf.reduce_sum": 1,
            "tf.argsort": 1,
            "tf.ones_like": 1,
            "tf.cast": 2,
            "tf.int32": 2,
            "tf.cumsum": 1,
            "tf.size": 3,
            "tf.expand_dims": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 2,
        "total_in_target": 4,
        "parsed_constants": [
            [
                0
            ],
            [
                0
            ],
            [
                0
            ],
            [],
            [],
            [],
            [
                0
            ],
            [],
            [],
            [
                0,
                1
            ]
        ],
        "all_constants": [
            0,
            1
        ],
        "constant_counts": [
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 17,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 8,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 2
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004608294930875576,
                "tf.add(x, y)": 0.004608294930875576,
                "tf.add_n(inputs)": 0.004608294930875576,
                "tf.argmax(input, axis)": 0.004608294930875576,
                "tf.argmin(input, axis)": 0.004608294930875576,
                "tf.argsort(values, axis, stable=True)": 0.009216589861751152,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004608294930875576,
                "tf.boolean_mask(tensor, mask)": 0.004608294930875576,
                "tf.broadcast_to(input, shape)": 0.004608294930875576,
                "tf.cast(x, dtype)": 0.013824884792626729,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004608294930875576,
                "tf.concat(values, axis)": 0.009216589861751152,
                "tf.constant(value)": 0.004608294930875576,
                "tf.constant(value, dtype)": 0.004608294930875576,
                "tf.divide(x, y)": 0.004608294930875576,
                "tf.equal(x, y)": 0.004608294930875576,
                "tf.exp(x)": 0.004608294930875576,
                "tf.expand_dims(input, axis)": 0.009216589861751152,
                "tf.eye(num_rows)": 0.004608294930875576,
                "tf.eye(num_rows, num_columns)": 0.004608294930875576,
                "tf.eye(num_rows, dtype)": 0.004608294930875576,
                "tf.fill(dims, value)": 0.009216589861751152,
                "tf.gather(params, indices)": 0.004608294930875576,
                "tf.gather(params, indices, axis, batch_dims)": 0.004608294930875576,
                "tf.gather_nd(params, indices)": 0.004608294930875576,
                "tf.gather_nd(params, indices, batch_dims)": 0.004608294930875576,
                "tf.greater(x, y)": 0.004608294930875576,
                "tf.greater_equal(x, y)": 0.004608294930875576,
                "tf.math.bincount(arr)": 0.004608294930875576,
                "tf.math.ceil(x)": 0.004608294930875576,
                "tf.math.count_nonzero(input)": 0.004608294930875576,
                "tf.math.count_nonzero(input, axis)": 0.004608294930875576,
                "tf.math.cumsum(x, axis)": 0.004608294930875576,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004608294930875576,
                "tf.math.divide_no_nan(x, y)": 0.004608294930875576,
                "tf.math.floor(x)": 0.004608294930875576,
                "tf.math.log(x)": 0.004608294930875576,
                "tf.math.logical_and(x, y)": 0.004608294930875576,
                "tf.math.logical_not(x)": 0.004608294930875576,
                "tf.math.logical_or(x, y)": 0.004608294930875576,
                "tf.math.logical_xor(x, y)": 0.004608294930875576,
                "tf.math.negative(x)": 0.004608294930875576,
                "tf.math.reciprocal(x)": 0.004608294930875576,
                "tf.math.reciprocal_no_nan(x)": 0.004608294930875576,
                "tf.math.segment_max(data, segment_ids)": 0.004608294930875576,
                "tf.math.segment_mean(data, segment_ids)": 0.004608294930875576,
                "tf.math.segment_min(data, segment_ids)": 0.004608294930875576,
                "tf.math.segment_prod(data, segment_ids)": 0.004608294930875576,
                "tf.math.segment_sum(data, segment_ids)": 0.004608294930875576,
                "tf.math.squared_difference(x, y)": 0.004608294930875576,
                "tf.math.top_k(input, k)": 0.004608294930875576,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004608294930875576,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004608294930875576,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004608294930875576,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004608294930875576,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004608294930875576,
                "tf.matmul(a, b)": 0.004608294930875576,
                "tf.maximum(x, y)": 0.004608294930875576,
                "tf.minimum(x, y)": 0.004608294930875576,
                "tf.multiply(x, y)": 0.004608294930875576,
                "tf.not_equal(x, y)": 0.004608294930875576,
                "tf.one_hot(indices, depth)": 0.004608294930875576,
                "tf.ones(shape)": 0.004608294930875576,
                "tf.ones_like(input)": 0.009216589861751152,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004608294930875576,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004608294930875576,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004608294930875576,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004608294930875576,
                "tf.range(start)": 0.041474654377880185,
                "tf.range(start, limit, delta)": 0.004608294930875576,
                "tf.reduce_any(input_tensor, axis)": 0.004608294930875576,
                "tf.reduce_all(input_tensor, axis)": 0.004608294930875576,
                "tf.reduce_max(input_tensor)": 0.004608294930875576,
                "tf.reduce_max(input_tensor, axis)": 0.004608294930875576,
                "tf.reduce_mean(input_tensor)": 0.004608294930875576,
                "tf.reduce_mean(input_tensor, axis)": 0.004608294930875576,
                "tf.reduce_min(input_tensor)": 0.004608294930875576,
                "tf.reduce_min(input_tensor, axis)": 0.004608294930875576,
                "tf.reduce_prod(input_tensor, axis)": 0.004608294930875576,
                "tf.reduce_sum(input_tensor)": 0.009216589861751152,
                "tf.reduce_sum(input_tensor, axis)": 0.004608294930875576,
                "tf.repeat(input, repeats)": 0.04608294930875576,
                "tf.repeat(input, repeats, axis)": 0.004608294930875576,
                "tf.reshape(tensor, shape)": 0.004608294930875576,
                "tf.reverse(tensor, axis)": 0.004608294930875576,
                "tf.roll(input, shift, axis)": 0.004608294930875576,
                "tf.round(x)": 0.004608294930875576,
                "tf.scatter_nd(indices, updates, shape)": 0.004608294930875576,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004608294930875576,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004608294930875576,
                "tf.sequence_mask(lengths)": 0.004608294930875576,
                "tf.sequence_mask(lengths, maxlen)": 0.004608294930875576,
                "tf.shape(input)": 0.02304147465437788,
                "tf.sign(x)": 0.004608294930875576,
                "tf.sort(values, axis)": 0.004608294930875576,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004608294930875576,
                "tf.sqrt(x)": 0.004608294930875576,
                "tf.square(x)": 0.004608294930875576,
                "tf.squeeze(input)": 0.004608294930875576,
                "tf.squeeze(input, axis)": 0.004608294930875576,
                "tf.stack(values, axis)": 0.004608294930875576,
                "tf.subtract(x, y)": 0.004608294930875576,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004608294930875576,
                "tf.tensordot(a, b, axes)": 0.004608294930875576,
                "tf.tile(input, multiples)": 0.004608294930875576,
                "tf.transpose(a)": 0.004608294930875576,
                "tf.transpose(a, perm)": 0.004608294930875576,
                "tf.unique_with_counts(x)": 0.004608294930875576,
                "tf.unstack(value, axis)": 0.009216589861751152,
                "tf.where(condition)": 0.004608294930875576,
                "tf.where(condition, x, y)": 0.004608294930875576,
                "tf.zeros(shape)": 0.004608294930875576,
                "tf.zeros_like(input)": 0.004608294930875576,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004608294930875576,
                "tf.sparse.add(a, b)": 0.004608294930875576,
                "tf.sparse.concat(axis, sp_inputs)": 0.004608294930875576,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004608294930875576,
                "tf.sparse.from_dense(tensor)": 0.004608294930875576,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004608294930875576,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004608294930875576,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004608294930875576,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004608294930875576,
                "tf.sparse.reset_shape(sp_input)": 0.004608294930875576,
                "tf.sparse.reshape(sp_input, shape)": 0.004608294930875576,
                "tf.sparse.retain(sp_input, to_retain)": 0.004608294930875576,
                "tf.sparse.slice(sp_input, start, size)": 0.004608294930875576,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004608294930875576,
                "tf.sparse.to_dense(sp_input)": 0.004608294930875576,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004608294930875576,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004608294930875576,
                "tf.sparse.transpose(sp_input)": 0.004608294930875576,
                "tf.sparse.transpose(sp_input, perm)": 0.004608294930875576,
                "IndexingAxis1Operation": 0.004608294930875576,
                "IndexingOperation": 0.02304147465437788,
                "PairCreationOperation": 0.009216589861751152,
                "SingletonTupleCreationOperation": 0.004608294930875576,
                "SlicingAxis0BothOperation": 0.004608294930875576,
                "SlicingAxis0LeftOperation": 0.004608294930875576,
                "SlicingAxis0RightOperation": 0.004608294930875576,
                "SlicingAxis1BothOperation": 0.004608294930875576,
                "SlicingAxis1LeftOperation": 0.004608294930875576,
                "SlicingAxis1RightOperation": 0.004608294930875576,
                "TripleCreationOperation": 0.004608294930875576,
                "PROVIDED_CONSTANT_WEIGHT": 0.004608294930875576,
                "COMMON_CONSTANT_WEIGHT": 0.041474654377880185,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004608294930875576,
                "INPUT_VARIABLE_WEIGHT": 0.08294930875576037,
                "AXIS_CONSTANT_WEIGHT": 0.004608294930875576,
                "SHAPE_CONSTANT_WEIGHT": 0.004608294930875576,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004608294930875576,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.013824884792626729,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004608294930875576,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004608294930875576,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004608294930875576
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 7,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 6,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 7,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 7,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 7,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 5,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 7,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 4,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 5,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 7,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 5,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_47",
        "description": "put given values into a sequence mask",
        "target_program": "tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)",
        "source": "https://stackoverflow.com/questions/58641546/how-can-i-put-the-sequential-values-to-the-sequence-mask",
        "constants": "[]",
        "examples": {
            "inputs": "[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],[[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]],]",
            "outputs": "[[0, 1, 2, 0, 0],    [3, 4, 0, 0, 0],    [5, 6, 7, 8, 9],    [10, 11, 12, 13, 0],    [14, 0, 0, 0, 0],    [15, 16, 0, 0, 0]]"
        },
        "completions": [
            "return tf.boolean_mask(in1, tf.cast(in2, tf.bool))\n",
            "return tf.boolean_mask(in1, in2)*tf.cast(in2, tf.int32)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, tf.sequence_mask(tf.reduce_sum(in2, axis=1), maxlen=tf.shape(in1)[1]))\n",
            "return tf.boolean_mask(in1, tf.transpose(in2))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.where(in2, in1, tf.zeros_like(in1))\n",
            "return tf.boolean_mask(in1, in2)\n",
            "return tf.multiply(tf.cast(in1, tf.int32), tf.cast(in2, tf.int32))"
        ],
        "tf_operators": {
            "tf.boolean_mask": 6,
            "tf.cast": 3,
            "tf.bool": 1,
            "tf.int32": 2,
            "tf.where": 3,
            "tf.zeros_like": 3,
            "tf.reduce_sum": 1,
            "tf.sequence_mask": 1,
            "tf.shape": 1,
            "tf.transpose": 1,
            "tf.multiply": 1
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [],
            [],
            [],
            [
                1,
                1
            ],
            [],
            [],
            [],
            [],
            [],
            []
        ],
        "all_constants": [
            1
        ],
        "constant_counts": [
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 1,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 1,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 2,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 25,
            "shape": 0,
            "tf_bool": 1,
            "provided": 0,
            "common": 2,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 3
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.0048543689320388345,
                "tf.add(x, y)": 0.0048543689320388345,
                "tf.add_n(inputs)": 0.0048543689320388345,
                "tf.argmax(input, axis)": 0.0048543689320388345,
                "tf.argmin(input, axis)": 0.0048543689320388345,
                "tf.argsort(values, axis, stable=True)": 0.0048543689320388345,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.0048543689320388345,
                "tf.boolean_mask(tensor, mask)": 0.03398058252427184,
                "tf.broadcast_to(input, shape)": 0.0048543689320388345,
                "tf.cast(x, dtype)": 0.024271844660194174,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.0048543689320388345,
                "tf.concat(values, axis)": 0.0048543689320388345,
                "tf.constant(value)": 0.0048543689320388345,
                "tf.constant(value, dtype)": 0.0048543689320388345,
                "tf.divide(x, y)": 0.0048543689320388345,
                "tf.equal(x, y)": 0.0048543689320388345,
                "tf.exp(x)": 0.0048543689320388345,
                "tf.expand_dims(input, axis)": 0.0048543689320388345,
                "tf.eye(num_rows)": 0.0048543689320388345,
                "tf.eye(num_rows, num_columns)": 0.0048543689320388345,
                "tf.eye(num_rows, dtype)": 0.0048543689320388345,
                "tf.fill(dims, value)": 0.0048543689320388345,
                "tf.gather(params, indices)": 0.0048543689320388345,
                "tf.gather(params, indices, axis, batch_dims)": 0.0048543689320388345,
                "tf.gather_nd(params, indices)": 0.0048543689320388345,
                "tf.gather_nd(params, indices, batch_dims)": 0.0048543689320388345,
                "tf.greater(x, y)": 0.0048543689320388345,
                "tf.greater_equal(x, y)": 0.0048543689320388345,
                "tf.math.bincount(arr)": 0.0048543689320388345,
                "tf.math.ceil(x)": 0.0048543689320388345,
                "tf.math.count_nonzero(input)": 0.0048543689320388345,
                "tf.math.count_nonzero(input, axis)": 0.0048543689320388345,
                "tf.math.cumsum(x, axis)": 0.0048543689320388345,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.0048543689320388345,
                "tf.math.divide_no_nan(x, y)": 0.0048543689320388345,
                "tf.math.floor(x)": 0.0048543689320388345,
                "tf.math.log(x)": 0.0048543689320388345,
                "tf.math.logical_and(x, y)": 0.0048543689320388345,
                "tf.math.logical_not(x)": 0.0048543689320388345,
                "tf.math.logical_or(x, y)": 0.0048543689320388345,
                "tf.math.logical_xor(x, y)": 0.0048543689320388345,
                "tf.math.negative(x)": 0.0048543689320388345,
                "tf.math.reciprocal(x)": 0.0048543689320388345,
                "tf.math.reciprocal_no_nan(x)": 0.0048543689320388345,
                "tf.math.segment_max(data, segment_ids)": 0.0048543689320388345,
                "tf.math.segment_mean(data, segment_ids)": 0.0048543689320388345,
                "tf.math.segment_min(data, segment_ids)": 0.0048543689320388345,
                "tf.math.segment_prod(data, segment_ids)": 0.0048543689320388345,
                "tf.math.segment_sum(data, segment_ids)": 0.0048543689320388345,
                "tf.math.squared_difference(x, y)": 0.0048543689320388345,
                "tf.math.top_k(input, k)": 0.0048543689320388345,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.0048543689320388345,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.0048543689320388345,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.0048543689320388345,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.0048543689320388345,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.0048543689320388345,
                "tf.matmul(a, b)": 0.0048543689320388345,
                "tf.maximum(x, y)": 0.0048543689320388345,
                "tf.minimum(x, y)": 0.0048543689320388345,
                "tf.multiply(x, y)": 0.009708737864077669,
                "tf.not_equal(x, y)": 0.0048543689320388345,
                "tf.one_hot(indices, depth)": 0.0048543689320388345,
                "tf.ones(shape)": 0.0048543689320388345,
                "tf.ones_like(input)": 0.0048543689320388345,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.0048543689320388345,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.0048543689320388345,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.0048543689320388345,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.0048543689320388345,
                "tf.range(start)": 0.0048543689320388345,
                "tf.range(start, limit, delta)": 0.0048543689320388345,
                "tf.reduce_any(input_tensor, axis)": 0.0048543689320388345,
                "tf.reduce_all(input_tensor, axis)": 0.0048543689320388345,
                "tf.reduce_max(input_tensor)": 0.0048543689320388345,
                "tf.reduce_max(input_tensor, axis)": 0.0048543689320388345,
                "tf.reduce_mean(input_tensor)": 0.0048543689320388345,
                "tf.reduce_mean(input_tensor, axis)": 0.0048543689320388345,
                "tf.reduce_min(input_tensor)": 0.0048543689320388345,
                "tf.reduce_min(input_tensor, axis)": 0.0048543689320388345,
                "tf.reduce_prod(input_tensor, axis)": 0.0048543689320388345,
                "tf.reduce_sum(input_tensor)": 0.0048543689320388345,
                "tf.reduce_sum(input_tensor, axis)": 0.0048543689320388345,
                "tf.repeat(input, repeats)": 0.0048543689320388345,
                "tf.repeat(input, repeats, axis)": 0.0048543689320388345,
                "tf.reshape(tensor, shape)": 0.0048543689320388345,
                "tf.reverse(tensor, axis)": 0.0048543689320388345,
                "tf.roll(input, shift, axis)": 0.0048543689320388345,
                "tf.round(x)": 0.0048543689320388345,
                "tf.scatter_nd(indices, updates, shape)": 0.0048543689320388345,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.0048543689320388345,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.0048543689320388345,
                "tf.sequence_mask(lengths)": 0.0048543689320388345,
                "tf.sequence_mask(lengths, maxlen)": 0.0048543689320388345,
                "tf.shape(input)": 0.009708737864077669,
                "tf.sign(x)": 0.0048543689320388345,
                "tf.sort(values, axis)": 0.0048543689320388345,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.0048543689320388345,
                "tf.sqrt(x)": 0.0048543689320388345,
                "tf.square(x)": 0.0048543689320388345,
                "tf.squeeze(input)": 0.0048543689320388345,
                "tf.squeeze(input, axis)": 0.0048543689320388345,
                "tf.stack(values, axis)": 0.0048543689320388345,
                "tf.subtract(x, y)": 0.0048543689320388345,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.0048543689320388345,
                "tf.tensordot(a, b, axes)": 0.0048543689320388345,
                "tf.tile(input, multiples)": 0.0048543689320388345,
                "tf.transpose(a)": 0.009708737864077669,
                "tf.transpose(a, perm)": 0.0048543689320388345,
                "tf.unique_with_counts(x)": 0.0048543689320388345,
                "tf.unstack(value, axis)": 0.0048543689320388345,
                "tf.where(condition)": 0.0048543689320388345,
                "tf.where(condition, x, y)": 0.019417475728155338,
                "tf.zeros(shape)": 0.0048543689320388345,
                "tf.zeros_like(input)": 0.019417475728155338,
                "tf.SparseTensor(indices, values, dense_shape)": 0.0048543689320388345,
                "tf.sparse.add(a, b)": 0.0048543689320388345,
                "tf.sparse.concat(axis, sp_inputs)": 0.0048543689320388345,
                "tf.sparse.expand_dims(sp_input, axis)": 0.0048543689320388345,
                "tf.sparse.from_dense(tensor)": 0.0048543689320388345,
                "tf.sparse.maximum(sp_a, sp_b)": 0.0048543689320388345,
                "tf.sparse.minimum(sp_a, sp_b)": 0.0048543689320388345,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.0048543689320388345,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.0048543689320388345,
                "tf.sparse.reset_shape(sp_input)": 0.0048543689320388345,
                "tf.sparse.reshape(sp_input, shape)": 0.0048543689320388345,
                "tf.sparse.retain(sp_input, to_retain)": 0.0048543689320388345,
                "tf.sparse.slice(sp_input, start, size)": 0.0048543689320388345,
                "tf.sparse.split(sp_input, num_split, axis)": 0.0048543689320388345,
                "tf.sparse.to_dense(sp_input)": 0.0048543689320388345,
                "tf.sparse.to_dense(sp_input, default_value)": 0.0048543689320388345,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.0048543689320388345,
                "tf.sparse.transpose(sp_input)": 0.0048543689320388345,
                "tf.sparse.transpose(sp_input, perm)": 0.0048543689320388345,
                "IndexingAxis1Operation": 0.0048543689320388345,
                "IndexingOperation": 0.009708737864077669,
                "PairCreationOperation": 0.0048543689320388345,
                "SingletonTupleCreationOperation": 0.0048543689320388345,
                "SlicingAxis0BothOperation": 0.0048543689320388345,
                "SlicingAxis0LeftOperation": 0.0048543689320388345,
                "SlicingAxis0RightOperation": 0.0048543689320388345,
                "SlicingAxis1BothOperation": 0.0048543689320388345,
                "SlicingAxis1LeftOperation": 0.0048543689320388345,
                "SlicingAxis1RightOperation": 0.0048543689320388345,
                "TripleCreationOperation": 0.0048543689320388345,
                "PROVIDED_CONSTANT_WEIGHT": 0.0048543689320388345,
                "COMMON_CONSTANT_WEIGHT": 0.014563106796116505,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.0048543689320388345,
                "INPUT_VARIABLE_WEIGHT": 0.1262135922330097,
                "AXIS_CONSTANT_WEIGHT": 0.0048543689320388345,
                "SHAPE_CONSTANT_WEIGHT": 0.0048543689320388345,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.0048543689320388345,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.019417475728155338,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.0048543689320388345,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.009708737864077669,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.0048543689320388345
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 5,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 5,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 7,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 6,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 6,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 6,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 7,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_48",
        "description": "find the indices of all elements",
        "target_program": "tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)",
        "source": "https://stackoverflow.com/questions/58481332/getting-the-indices-of-several-elements-in-a-tensorflow-at-once",
        "constants": "[]",
        "examples": {
            "inputs": "[[32, 53, 45, 38, 29, 89, 64, 23],[38, 53, 89, 38, 32, 64],]",
            "outputs": "[3, 1, 5, 3, 0, 6]"
        },
        "completions": [
            "def transform(in1, in2):\n    return tf.argsort(tf.constant(in1), axis=-1, stable=True).numpy()[tf.argsort(in1, in2)].numpy()\n",
            "def transform(in1, in2):\n    return tf.argsort(tf.constant(in1), stable=True), tf.argsort(tf.constant(in1), tf.constant(in2), stable=True)\n",
            "return tf.where(tf.equal(tf.expand_dims(in1, axis=1), in2))",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "def transform(in1, in2):\n    return tf.argsort(in1, axis=-1)\n",
            "def transform(in1, in2):\n    return tf.argsort(in1, stable=True)\n",
            "return tf.searchsorted(tf.sort(in1), in2)",
            "return tf.searchsorted(tf.sort(in1), in2, side='left')\n"
        ],
        "tf_operators": {
            "tf.constant": 2,
            "tf.argsort": 4,
            "tf.where": 1,
            "tf.equal": 1,
            "tf.expand_dims": 1,
            "tf.searchsorted": 5,
            "tf.sort": 5
        },
        "coverage_percentage": 40.0,
        "total_covered": 2,
        "total_in_target": 5,
        "parsed_constants": [
            [
                -1
            ],
            [],
            [
                1
            ],
            [],
            [],
            [],
            [
                -1
            ],
            [],
            [],
            []
        ],
        "all_constants": [
            1,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 20,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 7,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005128205128205128,
                "tf.add(x, y)": 0.005128205128205128,
                "tf.add_n(inputs)": 0.005128205128205128,
                "tf.argmax(input, axis)": 0.005128205128205128,
                "tf.argmin(input, axis)": 0.005128205128205128,
                "tf.argsort(values, axis, stable=True)": 0.020512820512820513,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.010256410256410256,
                "tf.boolean_mask(tensor, mask)": 0.005128205128205128,
                "tf.broadcast_to(input, shape)": 0.005128205128205128,
                "tf.cast(x, dtype)": 0.005128205128205128,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005128205128205128,
                "tf.concat(values, axis)": 0.005128205128205128,
                "tf.constant(value)": 0.02564102564102564,
                "tf.constant(value, dtype)": 0.005128205128205128,
                "tf.divide(x, y)": 0.005128205128205128,
                "tf.equal(x, y)": 0.010256410256410256,
                "tf.exp(x)": 0.005128205128205128,
                "tf.expand_dims(input, axis)": 0.010256410256410256,
                "tf.eye(num_rows)": 0.005128205128205128,
                "tf.eye(num_rows, num_columns)": 0.005128205128205128,
                "tf.eye(num_rows, dtype)": 0.005128205128205128,
                "tf.fill(dims, value)": 0.005128205128205128,
                "tf.gather(params, indices)": 0.005128205128205128,
                "tf.gather(params, indices, axis, batch_dims)": 0.005128205128205128,
                "tf.gather_nd(params, indices)": 0.005128205128205128,
                "tf.gather_nd(params, indices, batch_dims)": 0.005128205128205128,
                "tf.greater(x, y)": 0.005128205128205128,
                "tf.greater_equal(x, y)": 0.005128205128205128,
                "tf.math.bincount(arr)": 0.005128205128205128,
                "tf.math.ceil(x)": 0.005128205128205128,
                "tf.math.count_nonzero(input)": 0.005128205128205128,
                "tf.math.count_nonzero(input, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis)": 0.005128205128205128,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005128205128205128,
                "tf.math.divide_no_nan(x, y)": 0.005128205128205128,
                "tf.math.floor(x)": 0.005128205128205128,
                "tf.math.log(x)": 0.005128205128205128,
                "tf.math.logical_and(x, y)": 0.005128205128205128,
                "tf.math.logical_not(x)": 0.005128205128205128,
                "tf.math.logical_or(x, y)": 0.005128205128205128,
                "tf.math.logical_xor(x, y)": 0.005128205128205128,
                "tf.math.negative(x)": 0.005128205128205128,
                "tf.math.reciprocal(x)": 0.005128205128205128,
                "tf.math.reciprocal_no_nan(x)": 0.005128205128205128,
                "tf.math.segment_max(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_mean(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_min(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_prod(data, segment_ids)": 0.005128205128205128,
                "tf.math.segment_sum(data, segment_ids)": 0.005128205128205128,
                "tf.math.squared_difference(x, y)": 0.005128205128205128,
                "tf.math.top_k(input, k)": 0.005128205128205128,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005128205128205128,
                "tf.matmul(a, b)": 0.005128205128205128,
                "tf.maximum(x, y)": 0.005128205128205128,
                "tf.minimum(x, y)": 0.005128205128205128,
                "tf.multiply(x, y)": 0.005128205128205128,
                "tf.not_equal(x, y)": 0.005128205128205128,
                "tf.one_hot(indices, depth)": 0.005128205128205128,
                "tf.ones(shape)": 0.005128205128205128,
                "tf.ones_like(input)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005128205128205128,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005128205128205128,
                "tf.range(start)": 0.005128205128205128,
                "tf.range(start, limit, delta)": 0.005128205128205128,
                "tf.reduce_any(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_all(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_max(input_tensor)": 0.005128205128205128,
                "tf.reduce_max(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor)": 0.005128205128205128,
                "tf.reduce_mean(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_min(input_tensor)": 0.005128205128205128,
                "tf.reduce_min(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_prod(input_tensor, axis)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor)": 0.005128205128205128,
                "tf.reduce_sum(input_tensor, axis)": 0.005128205128205128,
                "tf.repeat(input, repeats)": 0.005128205128205128,
                "tf.repeat(input, repeats, axis)": 0.005128205128205128,
                "tf.reshape(tensor, shape)": 0.005128205128205128,
                "tf.reverse(tensor, axis)": 0.005128205128205128,
                "tf.roll(input, shift, axis)": 0.005128205128205128,
                "tf.round(x)": 0.005128205128205128,
                "tf.scatter_nd(indices, updates, shape)": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005128205128205128,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005128205128205128,
                "tf.sequence_mask(lengths)": 0.005128205128205128,
                "tf.sequence_mask(lengths, maxlen)": 0.005128205128205128,
                "tf.shape(input)": 0.005128205128205128,
                "tf.sign(x)": 0.005128205128205128,
                "tf.sort(values, axis)": 0.005128205128205128,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005128205128205128,
                "tf.sqrt(x)": 0.005128205128205128,
                "tf.square(x)": 0.005128205128205128,
                "tf.squeeze(input)": 0.005128205128205128,
                "tf.squeeze(input, axis)": 0.005128205128205128,
                "tf.stack(values, axis)": 0.005128205128205128,
                "tf.subtract(x, y)": 0.005128205128205128,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005128205128205128,
                "tf.tensordot(a, b, axes)": 0.005128205128205128,
                "tf.tile(input, multiples)": 0.005128205128205128,
                "tf.transpose(a)": 0.005128205128205128,
                "tf.transpose(a, perm)": 0.005128205128205128,
                "tf.unique_with_counts(x)": 0.005128205128205128,
                "tf.unstack(value, axis)": 0.005128205128205128,
                "tf.where(condition)": 0.010256410256410256,
                "tf.where(condition, x, y)": 0.005128205128205128,
                "tf.zeros(shape)": 0.005128205128205128,
                "tf.zeros_like(input)": 0.005128205128205128,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005128205128205128,
                "tf.sparse.add(a, b)": 0.005128205128205128,
                "tf.sparse.concat(axis, sp_inputs)": 0.005128205128205128,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005128205128205128,
                "tf.sparse.from_dense(tensor)": 0.005128205128205128,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005128205128205128,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005128205128205128,
                "tf.sparse.reset_shape(sp_input)": 0.005128205128205128,
                "tf.sparse.reshape(sp_input, shape)": 0.005128205128205128,
                "tf.sparse.retain(sp_input, to_retain)": 0.005128205128205128,
                "tf.sparse.slice(sp_input, start, size)": 0.005128205128205128,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input)": 0.005128205128205128,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005128205128205128,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input)": 0.005128205128205128,
                "tf.sparse.transpose(sp_input, perm)": 0.005128205128205128,
                "IndexingAxis1Operation": 0.005128205128205128,
                "IndexingOperation": 0.010256410256410256,
                "PairCreationOperation": 0.010256410256410256,
                "SingletonTupleCreationOperation": 0.005128205128205128,
                "SlicingAxis0BothOperation": 0.005128205128205128,
                "SlicingAxis0LeftOperation": 0.005128205128205128,
                "SlicingAxis0RightOperation": 0.005128205128205128,
                "SlicingAxis1BothOperation": 0.005128205128205128,
                "SlicingAxis1LeftOperation": 0.005128205128205128,
                "SlicingAxis1RightOperation": 0.005128205128205128,
                "TripleCreationOperation": 0.005128205128205128,
                "PROVIDED_CONSTANT_WEIGHT": 0.005128205128205128,
                "COMMON_CONSTANT_WEIGHT": 0.041025641025641026,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005128205128205128,
                "INPUT_VARIABLE_WEIGHT": 0.1076923076923077,
                "AXIS_CONSTANT_WEIGHT": 0.005128205128205128,
                "SHAPE_CONSTANT_WEIGHT": 0.005128205128205128,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005128205128205128,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005128205128205128
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 6,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 7,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 5,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 7,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 7,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 7,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 7,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 5,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_49",
        "description": "multiply tensors by scalars in a batched way",
        "target_program": "tf.transpose(tf.multiply(in2, tf.transpose(in1)))",
        "source": "https://stackoverflow.com/questions/58466562/given-a-batch-of-n-images-how-to-scalar-multiply-each-image-by-a-different-scal",
        "constants": "[]",
        "examples": {
            "inputs": "[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]],[2.0, 0.5, 1.0],]",
            "outputs": "[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]],    [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]],    [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]]"
        },
        "completions": [
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, -1), -1))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.multiply(in1, tf.reshape(in2, [3, 1, 1]))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n",
            "return tf.multiply(in1, tf.expand_dims(tf.expand_dims(in2, 1), 2))\n",
            "return tf.math.multiply(in1, tf.expand_dims(in2, (1, 2)))\n",
            "return tf.multiply(in1, tf.expand_dims(in2, axis=(1, 2)))\n",
            "tf.multiply(in1, tf.reshape(in2, (1, 1, 1, -1)))\n",
            "return tf.multiply(in1, tf.reshape(in2, [tf.shape(in2)[0], 1, 1, 1]))\n"
        ],
        "tf_operators": {
            "tf.expand_dims": 6,
            "tf.multiply": 9,
            "tf.reshape": 4,
            "tf.math.multiply": 1,
            "tf.shape": 1
        },
        "coverage_percentage": 50.0,
        "total_covered": 1,
        "total_in_target": 2,
        "parsed_constants": [
            [
                -1,
                -1
            ],
            [
                3,
                1,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                3,
                1,
                1
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                2
            ],
            [
                1,
                1,
                1,
                -1
            ],
            [
                0,
                1,
                1,
                1
            ]
        ],
        "all_constants": [
            0,
            1,
            2,
            3,
            -1
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 3,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 2,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 1,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 1,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 2,
                "shape_tuple": 0
            },
            {
                "common": 4,
                "axis": 0,
                "shape": 0,
                "provided": 0,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 3,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 21,
            "shape": 0,
            "tf_bool": 0,
            "provided": 0,
            "common": 14,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 4,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.004524886877828055,
                "tf.add(x, y)": 0.004524886877828055,
                "tf.add_n(inputs)": 0.004524886877828055,
                "tf.argmax(input, axis)": 0.004524886877828055,
                "tf.argmin(input, axis)": 0.004524886877828055,
                "tf.argsort(values, axis, stable=True)": 0.004524886877828055,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.004524886877828055,
                "tf.boolean_mask(tensor, mask)": 0.004524886877828055,
                "tf.broadcast_to(input, shape)": 0.004524886877828055,
                "tf.cast(x, dtype)": 0.004524886877828055,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.004524886877828055,
                "tf.concat(values, axis)": 0.004524886877828055,
                "tf.constant(value)": 0.004524886877828055,
                "tf.constant(value, dtype)": 0.004524886877828055,
                "tf.divide(x, y)": 0.004524886877828055,
                "tf.equal(x, y)": 0.004524886877828055,
                "tf.exp(x)": 0.004524886877828055,
                "tf.expand_dims(input, axis)": 0.04524886877828054,
                "tf.eye(num_rows)": 0.004524886877828055,
                "tf.eye(num_rows, num_columns)": 0.004524886877828055,
                "tf.eye(num_rows, dtype)": 0.004524886877828055,
                "tf.fill(dims, value)": 0.004524886877828055,
                "tf.gather(params, indices)": 0.004524886877828055,
                "tf.gather(params, indices, axis, batch_dims)": 0.004524886877828055,
                "tf.gather_nd(params, indices)": 0.004524886877828055,
                "tf.gather_nd(params, indices, batch_dims)": 0.004524886877828055,
                "tf.greater(x, y)": 0.004524886877828055,
                "tf.greater_equal(x, y)": 0.004524886877828055,
                "tf.math.bincount(arr)": 0.004524886877828055,
                "tf.math.ceil(x)": 0.004524886877828055,
                "tf.math.count_nonzero(input)": 0.004524886877828055,
                "tf.math.count_nonzero(input, axis)": 0.004524886877828055,
                "tf.math.cumsum(x, axis)": 0.004524886877828055,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.004524886877828055,
                "tf.math.divide_no_nan(x, y)": 0.004524886877828055,
                "tf.math.floor(x)": 0.004524886877828055,
                "tf.math.log(x)": 0.004524886877828055,
                "tf.math.logical_and(x, y)": 0.004524886877828055,
                "tf.math.logical_not(x)": 0.004524886877828055,
                "tf.math.logical_or(x, y)": 0.004524886877828055,
                "tf.math.logical_xor(x, y)": 0.004524886877828055,
                "tf.math.negative(x)": 0.004524886877828055,
                "tf.math.reciprocal(x)": 0.004524886877828055,
                "tf.math.reciprocal_no_nan(x)": 0.004524886877828055,
                "tf.math.segment_max(data, segment_ids)": 0.004524886877828055,
                "tf.math.segment_mean(data, segment_ids)": 0.004524886877828055,
                "tf.math.segment_min(data, segment_ids)": 0.004524886877828055,
                "tf.math.segment_prod(data, segment_ids)": 0.004524886877828055,
                "tf.math.segment_sum(data, segment_ids)": 0.004524886877828055,
                "tf.math.squared_difference(x, y)": 0.004524886877828055,
                "tf.math.top_k(input, k)": 0.004524886877828055,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.004524886877828055,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.004524886877828055,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.004524886877828055,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.004524886877828055,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.004524886877828055,
                "tf.matmul(a, b)": 0.004524886877828055,
                "tf.maximum(x, y)": 0.004524886877828055,
                "tf.minimum(x, y)": 0.004524886877828055,
                "tf.multiply(x, y)": 0.04524886877828054,
                "tf.not_equal(x, y)": 0.004524886877828055,
                "tf.one_hot(indices, depth)": 0.004524886877828055,
                "tf.ones(shape)": 0.004524886877828055,
                "tf.ones_like(input)": 0.004524886877828055,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.004524886877828055,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.004524886877828055,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.004524886877828055,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.004524886877828055,
                "tf.range(start)": 0.004524886877828055,
                "tf.range(start, limit, delta)": 0.004524886877828055,
                "tf.reduce_any(input_tensor, axis)": 0.004524886877828055,
                "tf.reduce_all(input_tensor, axis)": 0.004524886877828055,
                "tf.reduce_max(input_tensor)": 0.004524886877828055,
                "tf.reduce_max(input_tensor, axis)": 0.004524886877828055,
                "tf.reduce_mean(input_tensor)": 0.004524886877828055,
                "tf.reduce_mean(input_tensor, axis)": 0.004524886877828055,
                "tf.reduce_min(input_tensor)": 0.004524886877828055,
                "tf.reduce_min(input_tensor, axis)": 0.004524886877828055,
                "tf.reduce_prod(input_tensor, axis)": 0.004524886877828055,
                "tf.reduce_sum(input_tensor)": 0.004524886877828055,
                "tf.reduce_sum(input_tensor, axis)": 0.004524886877828055,
                "tf.repeat(input, repeats)": 0.004524886877828055,
                "tf.repeat(input, repeats, axis)": 0.004524886877828055,
                "tf.reshape(tensor, shape)": 0.02262443438914027,
                "tf.reverse(tensor, axis)": 0.004524886877828055,
                "tf.roll(input, shift, axis)": 0.004524886877828055,
                "tf.round(x)": 0.004524886877828055,
                "tf.scatter_nd(indices, updates, shape)": 0.004524886877828055,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.004524886877828055,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.004524886877828055,
                "tf.sequence_mask(lengths)": 0.004524886877828055,
                "tf.sequence_mask(lengths, maxlen)": 0.004524886877828055,
                "tf.shape(input)": 0.00904977375565611,
                "tf.sign(x)": 0.004524886877828055,
                "tf.sort(values, axis)": 0.004524886877828055,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.004524886877828055,
                "tf.sqrt(x)": 0.004524886877828055,
                "tf.square(x)": 0.004524886877828055,
                "tf.squeeze(input)": 0.004524886877828055,
                "tf.squeeze(input, axis)": 0.004524886877828055,
                "tf.stack(values, axis)": 0.004524886877828055,
                "tf.subtract(x, y)": 0.004524886877828055,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.004524886877828055,
                "tf.tensordot(a, b, axes)": 0.004524886877828055,
                "tf.tile(input, multiples)": 0.004524886877828055,
                "tf.transpose(a)": 0.004524886877828055,
                "tf.transpose(a, perm)": 0.004524886877828055,
                "tf.unique_with_counts(x)": 0.004524886877828055,
                "tf.unstack(value, axis)": 0.004524886877828055,
                "tf.where(condition)": 0.004524886877828055,
                "tf.where(condition, x, y)": 0.004524886877828055,
                "tf.zeros(shape)": 0.004524886877828055,
                "tf.zeros_like(input)": 0.004524886877828055,
                "tf.SparseTensor(indices, values, dense_shape)": 0.004524886877828055,
                "tf.sparse.add(a, b)": 0.004524886877828055,
                "tf.sparse.concat(axis, sp_inputs)": 0.004524886877828055,
                "tf.sparse.expand_dims(sp_input, axis)": 0.004524886877828055,
                "tf.sparse.from_dense(tensor)": 0.004524886877828055,
                "tf.sparse.maximum(sp_a, sp_b)": 0.004524886877828055,
                "tf.sparse.minimum(sp_a, sp_b)": 0.004524886877828055,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.004524886877828055,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.004524886877828055,
                "tf.sparse.reset_shape(sp_input)": 0.004524886877828055,
                "tf.sparse.reshape(sp_input, shape)": 0.004524886877828055,
                "tf.sparse.retain(sp_input, to_retain)": 0.004524886877828055,
                "tf.sparse.slice(sp_input, start, size)": 0.004524886877828055,
                "tf.sparse.split(sp_input, num_split, axis)": 0.004524886877828055,
                "tf.sparse.to_dense(sp_input)": 0.004524886877828055,
                "tf.sparse.to_dense(sp_input, default_value)": 0.004524886877828055,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.004524886877828055,
                "tf.sparse.transpose(sp_input)": 0.004524886877828055,
                "tf.sparse.transpose(sp_input, perm)": 0.004524886877828055,
                "IndexingAxis1Operation": 0.004524886877828055,
                "IndexingOperation": 0.00904977375565611,
                "PairCreationOperation": 0.01809954751131222,
                "SingletonTupleCreationOperation": 0.004524886877828055,
                "SlicingAxis0BothOperation": 0.004524886877828055,
                "SlicingAxis0LeftOperation": 0.004524886877828055,
                "SlicingAxis0RightOperation": 0.004524886877828055,
                "SlicingAxis1BothOperation": 0.004524886877828055,
                "SlicingAxis1LeftOperation": 0.004524886877828055,
                "SlicingAxis1RightOperation": 0.004524886877828055,
                "TripleCreationOperation": 0.004524886877828055,
                "PROVIDED_CONSTANT_WEIGHT": 0.004524886877828055,
                "COMMON_CONSTANT_WEIGHT": 0.06787330316742081,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.004524886877828055,
                "INPUT_VARIABLE_WEIGHT": 0.09954751131221719,
                "AXIS_CONSTANT_WEIGHT": 0.02262443438914027,
                "SHAPE_CONSTANT_WEIGHT": 0.004524886877828055,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.004524886877828055,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.004524886877828055,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.004524886877828055,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.004524886877828055,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.004524886877828055
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 8,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 4,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 4,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 8,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 5,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 7,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 8,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 7,
                "PairCreationOperation": 6,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 8,
                "PROVIDED_CONSTANT_WEIGHT": 8,
                "COMMON_CONSTANT_WEIGHT": 4,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 3,
                "AXIS_CONSTANT_WEIGHT": 5,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    },
    {
        "name": "stackoverflow_50",
        "description": "create a binary matrix where a specified column is set to one",
        "target_program": "tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)",
        "source": "https://stackoverflow.com/questions/58537495/tensorflow-initialize-a-sparse-tensor-with-only-one-line-column-not-zero",
        "constants": "[]",
        "examples": {
            "inputs": "[5]",
            "outputs": "[[0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0],    [0, 0, 0, 1, 0, 0]]"
        },
        "completions": [
            "return tf.one_hot(in1, depth=6, on_value=1, off_value=0)\n",
            "import tensorflow as tf\n\ndef transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)\n",
            "return tf.transpose(tf.one_hot(indices=in1, depth=6))\n",
            "return tf.one_hot(in1, depth=6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, 6)\n",
            "return tf.one_hot(tf.constant(in1), 6)\n",
            "def transform(in1):\n    return tf.one_hot(in1, depth=6)\n",
            "return tf.one_hot(in1, depth=6)[:, :, 3]\n",
            "return tf.one_hot([3], in1)\n"
        ],
        "tf_operators": {
            "tf.one_hot": 10,
            "tf.transpose": 1,
            "tf.constant": 1
        },
        "coverage_percentage": 25.0,
        "total_covered": 1,
        "total_in_target": 4,
        "parsed_constants": [
            [
                6,
                1,
                0
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6
            ],
            [
                6,
                3
            ],
            [
                3
            ]
        ],
        "all_constants": [
            0,
            1,
            3,
            6
        ],
        "constant_counts": [
            {
                "common": 2,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            },
            {
                "common": 0,
                "axis": 0,
                "shape": 0,
                "provided": 1,
                "tf_int32": 0,
                "tf_float32": 0,
                "tf_int64": 0,
                "tf_bool": 0,
                "input_var": 1,
                "shape_tuple": 0
            }
        ],
        "aggregate_constant_count": {
            "input_var": 10,
            "shape": 0,
            "tf_bool": 0,
            "provided": 10,
            "common": 2,
            "shape_tuple": 0,
            "tf_float32": 0,
            "axis": 0,
            "tf_int64": 0,
            "tf_int32": 0
        },
        "smoothed_probabilities": {
            "Tensor-Operations": {
                "tf.abs(x)": 0.005263157894736842,
                "tf.add(x, y)": 0.005263157894736842,
                "tf.add_n(inputs)": 0.005263157894736842,
                "tf.argmax(input, axis)": 0.005263157894736842,
                "tf.argmin(input, axis)": 0.005263157894736842,
                "tf.argsort(values, axis, stable=True)": 0.005263157894736842,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 0.005263157894736842,
                "tf.boolean_mask(tensor, mask)": 0.005263157894736842,
                "tf.broadcast_to(input, shape)": 0.005263157894736842,
                "tf.cast(x, dtype)": 0.005263157894736842,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 0.005263157894736842,
                "tf.concat(values, axis)": 0.005263157894736842,
                "tf.constant(value)": 0.010526315789473684,
                "tf.constant(value, dtype)": 0.005263157894736842,
                "tf.divide(x, y)": 0.005263157894736842,
                "tf.equal(x, y)": 0.005263157894736842,
                "tf.exp(x)": 0.005263157894736842,
                "tf.expand_dims(input, axis)": 0.005263157894736842,
                "tf.eye(num_rows)": 0.005263157894736842,
                "tf.eye(num_rows, num_columns)": 0.005263157894736842,
                "tf.eye(num_rows, dtype)": 0.005263157894736842,
                "tf.fill(dims, value)": 0.005263157894736842,
                "tf.gather(params, indices)": 0.005263157894736842,
                "tf.gather(params, indices, axis, batch_dims)": 0.005263157894736842,
                "tf.gather_nd(params, indices)": 0.005263157894736842,
                "tf.gather_nd(params, indices, batch_dims)": 0.005263157894736842,
                "tf.greater(x, y)": 0.005263157894736842,
                "tf.greater_equal(x, y)": 0.005263157894736842,
                "tf.math.bincount(arr)": 0.005263157894736842,
                "tf.math.ceil(x)": 0.005263157894736842,
                "tf.math.count_nonzero(input)": 0.005263157894736842,
                "tf.math.count_nonzero(input, axis)": 0.005263157894736842,
                "tf.math.cumsum(x, axis)": 0.005263157894736842,
                "tf.math.cumsum(x, axis, exclusive=True)": 0.005263157894736842,
                "tf.math.divide_no_nan(x, y)": 0.005263157894736842,
                "tf.math.floor(x)": 0.005263157894736842,
                "tf.math.log(x)": 0.005263157894736842,
                "tf.math.logical_and(x, y)": 0.005263157894736842,
                "tf.math.logical_not(x)": 0.005263157894736842,
                "tf.math.logical_or(x, y)": 0.005263157894736842,
                "tf.math.logical_xor(x, y)": 0.005263157894736842,
                "tf.math.negative(x)": 0.005263157894736842,
                "tf.math.reciprocal(x)": 0.005263157894736842,
                "tf.math.reciprocal_no_nan(x)": 0.005263157894736842,
                "tf.math.segment_max(data, segment_ids)": 0.005263157894736842,
                "tf.math.segment_mean(data, segment_ids)": 0.005263157894736842,
                "tf.math.segment_min(data, segment_ids)": 0.005263157894736842,
                "tf.math.segment_prod(data, segment_ids)": 0.005263157894736842,
                "tf.math.segment_sum(data, segment_ids)": 0.005263157894736842,
                "tf.math.squared_difference(x, y)": 0.005263157894736842,
                "tf.math.top_k(input, k)": 0.005263157894736842,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 0.005263157894736842,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 0.005263157894736842,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 0.005263157894736842,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 0.005263157894736842,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 0.005263157894736842,
                "tf.matmul(a, b)": 0.005263157894736842,
                "tf.maximum(x, y)": 0.005263157894736842,
                "tf.minimum(x, y)": 0.005263157894736842,
                "tf.multiply(x, y)": 0.005263157894736842,
                "tf.not_equal(x, y)": 0.005263157894736842,
                "tf.one_hot(indices, depth)": 0.05789473684210526,
                "tf.ones(shape)": 0.005263157894736842,
                "tf.ones_like(input)": 0.005263157894736842,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 0.005263157894736842,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 0.005263157894736842,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 0.005263157894736842,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 0.005263157894736842,
                "tf.range(start)": 0.005263157894736842,
                "tf.range(start, limit, delta)": 0.005263157894736842,
                "tf.reduce_any(input_tensor, axis)": 0.005263157894736842,
                "tf.reduce_all(input_tensor, axis)": 0.005263157894736842,
                "tf.reduce_max(input_tensor)": 0.005263157894736842,
                "tf.reduce_max(input_tensor, axis)": 0.005263157894736842,
                "tf.reduce_mean(input_tensor)": 0.005263157894736842,
                "tf.reduce_mean(input_tensor, axis)": 0.005263157894736842,
                "tf.reduce_min(input_tensor)": 0.005263157894736842,
                "tf.reduce_min(input_tensor, axis)": 0.005263157894736842,
                "tf.reduce_prod(input_tensor, axis)": 0.005263157894736842,
                "tf.reduce_sum(input_tensor)": 0.005263157894736842,
                "tf.reduce_sum(input_tensor, axis)": 0.005263157894736842,
                "tf.repeat(input, repeats)": 0.005263157894736842,
                "tf.repeat(input, repeats, axis)": 0.005263157894736842,
                "tf.reshape(tensor, shape)": 0.005263157894736842,
                "tf.reverse(tensor, axis)": 0.005263157894736842,
                "tf.roll(input, shift, axis)": 0.005263157894736842,
                "tf.round(x)": 0.005263157894736842,
                "tf.scatter_nd(indices, updates, shape)": 0.005263157894736842,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 0.005263157894736842,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 0.005263157894736842,
                "tf.sequence_mask(lengths)": 0.005263157894736842,
                "tf.sequence_mask(lengths, maxlen)": 0.005263157894736842,
                "tf.shape(input)": 0.005263157894736842,
                "tf.sign(x)": 0.005263157894736842,
                "tf.sort(values, axis)": 0.005263157894736842,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 0.005263157894736842,
                "tf.sqrt(x)": 0.005263157894736842,
                "tf.square(x)": 0.005263157894736842,
                "tf.squeeze(input)": 0.005263157894736842,
                "tf.squeeze(input, axis)": 0.005263157894736842,
                "tf.stack(values, axis)": 0.005263157894736842,
                "tf.subtract(x, y)": 0.005263157894736842,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 0.005263157894736842,
                "tf.tensordot(a, b, axes)": 0.005263157894736842,
                "tf.tile(input, multiples)": 0.005263157894736842,
                "tf.transpose(a)": 0.010526315789473684,
                "tf.transpose(a, perm)": 0.005263157894736842,
                "tf.unique_with_counts(x)": 0.005263157894736842,
                "tf.unstack(value, axis)": 0.005263157894736842,
                "tf.where(condition)": 0.005263157894736842,
                "tf.where(condition, x, y)": 0.005263157894736842,
                "tf.zeros(shape)": 0.005263157894736842,
                "tf.zeros_like(input)": 0.005263157894736842,
                "tf.SparseTensor(indices, values, dense_shape)": 0.005263157894736842,
                "tf.sparse.add(a, b)": 0.005263157894736842,
                "tf.sparse.concat(axis, sp_inputs)": 0.005263157894736842,
                "tf.sparse.expand_dims(sp_input, axis)": 0.005263157894736842,
                "tf.sparse.from_dense(tensor)": 0.005263157894736842,
                "tf.sparse.maximum(sp_a, sp_b)": 0.005263157894736842,
                "tf.sparse.minimum(sp_a, sp_b)": 0.005263157894736842,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 0.005263157894736842,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 0.005263157894736842,
                "tf.sparse.reset_shape(sp_input)": 0.005263157894736842,
                "tf.sparse.reshape(sp_input, shape)": 0.005263157894736842,
                "tf.sparse.retain(sp_input, to_retain)": 0.005263157894736842,
                "tf.sparse.slice(sp_input, start, size)": 0.005263157894736842,
                "tf.sparse.split(sp_input, num_split, axis)": 0.005263157894736842,
                "tf.sparse.to_dense(sp_input)": 0.005263157894736842,
                "tf.sparse.to_dense(sp_input, default_value)": 0.005263157894736842,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 0.005263157894736842,
                "tf.sparse.transpose(sp_input)": 0.005263157894736842,
                "tf.sparse.transpose(sp_input, perm)": 0.005263157894736842,
                "IndexingAxis1Operation": 0.005263157894736842,
                "IndexingOperation": 0.005263157894736842,
                "PairCreationOperation": 0.005263157894736842,
                "SingletonTupleCreationOperation": 0.005263157894736842,
                "SlicingAxis0BothOperation": 0.005263157894736842,
                "SlicingAxis0LeftOperation": 0.005263157894736842,
                "SlicingAxis0RightOperation": 0.005263157894736842,
                "SlicingAxis1BothOperation": 0.005263157894736842,
                "SlicingAxis1LeftOperation": 0.005263157894736842,
                "SlicingAxis1RightOperation": 0.005263157894736842,
                "TripleCreationOperation": 0.010526315789473684,
                "PROVIDED_CONSTANT_WEIGHT": 0.05789473684210526,
                "COMMON_CONSTANT_WEIGHT": 0.015789473684210527,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 0.005263157894736842,
                "INPUT_VARIABLE_WEIGHT": 0.05789473684210526,
                "AXIS_CONSTANT_WEIGHT": 0.005263157894736842,
                "SHAPE_CONSTANT_WEIGHT": 0.005263157894736842,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 0.005263157894736842,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 0.005263157894736842,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 0.005263157894736842,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 0.005263157894736842,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 0.005263157894736842
            }
        },
        "costs": {
            "Tensor-Operations": {
                "tf.abs(x)": 8,
                "tf.add(x, y)": 8,
                "tf.add_n(inputs)": 8,
                "tf.argmax(input, axis)": 8,
                "tf.argmin(input, axis)": 8,
                "tf.argsort(values, axis, stable=True)": 8,
                "tf.argsort(values, axis, direction=\"DESCENDING\", stable=True)": 8,
                "tf.boolean_mask(tensor, mask)": 8,
                "tf.broadcast_to(input, shape)": 8,
                "tf.cast(x, dtype)": 8,
                "tf.clip_by_value(t, clip_value_min, clip_value_max)": 8,
                "tf.concat(values, axis)": 8,
                "tf.constant(value)": 7,
                "tf.constant(value, dtype)": 8,
                "tf.divide(x, y)": 8,
                "tf.equal(x, y)": 8,
                "tf.exp(x)": 8,
                "tf.expand_dims(input, axis)": 8,
                "tf.eye(num_rows)": 8,
                "tf.eye(num_rows, num_columns)": 8,
                "tf.eye(num_rows, dtype)": 8,
                "tf.fill(dims, value)": 8,
                "tf.gather(params, indices)": 8,
                "tf.gather(params, indices, axis, batch_dims)": 8,
                "tf.gather_nd(params, indices)": 8,
                "tf.gather_nd(params, indices, batch_dims)": 8,
                "tf.greater(x, y)": 8,
                "tf.greater_equal(x, y)": 8,
                "tf.math.bincount(arr)": 8,
                "tf.math.ceil(x)": 8,
                "tf.math.count_nonzero(input)": 8,
                "tf.math.count_nonzero(input, axis)": 8,
                "tf.math.cumsum(x, axis)": 8,
                "tf.math.cumsum(x, axis, exclusive=True)": 8,
                "tf.math.divide_no_nan(x, y)": 8,
                "tf.math.floor(x)": 8,
                "tf.math.log(x)": 8,
                "tf.math.logical_and(x, y)": 8,
                "tf.math.logical_not(x)": 8,
                "tf.math.logical_or(x, y)": 8,
                "tf.math.logical_xor(x, y)": 8,
                "tf.math.negative(x)": 8,
                "tf.math.reciprocal(x)": 8,
                "tf.math.reciprocal_no_nan(x)": 8,
                "tf.math.segment_max(data, segment_ids)": 8,
                "tf.math.segment_mean(data, segment_ids)": 8,
                "tf.math.segment_min(data, segment_ids)": 8,
                "tf.math.segment_prod(data, segment_ids)": 8,
                "tf.math.segment_sum(data, segment_ids)": 8,
                "tf.math.squared_difference(x, y)": 8,
                "tf.math.top_k(input, k)": 8,
                "tf.math.unsorted_segment_max(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_mean(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_min(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_prod(data, segment_ids, num_segments)": 8,
                "tf.math.unsorted_segment_sum(data, segment_ids, num_segments)": 8,
                "tf.matmul(a, b)": 8,
                "tf.maximum(x, y)": 8,
                "tf.minimum(x, y)": 8,
                "tf.multiply(x, y)": 8,
                "tf.not_equal(x, y)": 8,
                "tf.one_hot(indices, depth)": 4,
                "tf.ones(shape)": 8,
                "tf.ones_like(input)": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\")": 8,
                "tf.pad(tensor, paddings, mode=\"CONSTANT\", constant_values)": 8,
                "tf.pad(tensor, paddings, mode=\"REFLECT\")": 8,
                "tf.pad(tensor, paddings, mode=\"SYMMETRIC\")": 8,
                "tf.range(start)": 8,
                "tf.range(start, limit, delta)": 8,
                "tf.reduce_any(input_tensor, axis)": 8,
                "tf.reduce_all(input_tensor, axis)": 8,
                "tf.reduce_max(input_tensor)": 8,
                "tf.reduce_max(input_tensor, axis)": 8,
                "tf.reduce_mean(input_tensor)": 8,
                "tf.reduce_mean(input_tensor, axis)": 8,
                "tf.reduce_min(input_tensor)": 8,
                "tf.reduce_min(input_tensor, axis)": 8,
                "tf.reduce_prod(input_tensor, axis)": 8,
                "tf.reduce_sum(input_tensor)": 8,
                "tf.reduce_sum(input_tensor, axis)": 8,
                "tf.repeat(input, repeats)": 8,
                "tf.repeat(input, repeats, axis)": 8,
                "tf.reshape(tensor, shape)": 8,
                "tf.reverse(tensor, axis)": 8,
                "tf.roll(input, shift, axis)": 8,
                "tf.round(x)": 8,
                "tf.scatter_nd(indices, updates, shape)": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"left\")": 8,
                "tf.searchsorted(sorted_sequence, values, side=\"right\")": 8,
                "tf.sequence_mask(lengths)": 8,
                "tf.sequence_mask(lengths, maxlen)": 8,
                "tf.shape(input)": 8,
                "tf.sign(x)": 8,
                "tf.sort(values, axis)": 8,
                "tf.sort(values, axis, direction=\"DESCENDING\")": 8,
                "tf.sqrt(x)": 8,
                "tf.square(x)": 8,
                "tf.squeeze(input)": 8,
                "tf.squeeze(input, axis)": 8,
                "tf.stack(values, axis)": 8,
                "tf.subtract(x, y)": 8,
                "tf.tensor_scatter_nd_update(tensor, indices, updates)": 8,
                "tf.tensordot(a, b, axes)": 8,
                "tf.tile(input, multiples)": 8,
                "tf.transpose(a)": 7,
                "tf.transpose(a, perm)": 8,
                "tf.unique_with_counts(x)": 8,
                "tf.unstack(value, axis)": 8,
                "tf.where(condition)": 8,
                "tf.where(condition, x, y)": 8,
                "tf.zeros(shape)": 8,
                "tf.zeros_like(input)": 8,
                "tf.SparseTensor(indices, values, dense_shape)": 8,
                "tf.sparse.add(a, b)": 8,
                "tf.sparse.concat(axis, sp_inputs)": 8,
                "tf.sparse.expand_dims(sp_input, axis)": 8,
                "tf.sparse.from_dense(tensor)": 8,
                "tf.sparse.maximum(sp_a, sp_b)": 8,
                "tf.sparse.minimum(sp_a, sp_b)": 8,
                "tf.sparse.reduce_max(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reduce_sum(sp_input, axis, output_is_sparse)": 8,
                "tf.sparse.reset_shape(sp_input)": 8,
                "tf.sparse.reshape(sp_input, shape)": 8,
                "tf.sparse.retain(sp_input, to_retain)": 8,
                "tf.sparse.slice(sp_input, start, size)": 8,
                "tf.sparse.split(sp_input, num_split, axis)": 8,
                "tf.sparse.to_dense(sp_input)": 8,
                "tf.sparse.to_dense(sp_input, default_value)": 8,
                "tf.sparse.to_indicator(sp_input, vocab_size)": 8,
                "tf.sparse.transpose(sp_input)": 8,
                "tf.sparse.transpose(sp_input, perm)": 8,
                "IndexingAxis1Operation": 8,
                "IndexingOperation": 8,
                "PairCreationOperation": 8,
                "SingletonTupleCreationOperation": 8,
                "SlicingAxis0BothOperation": 8,
                "SlicingAxis0LeftOperation": 8,
                "SlicingAxis0RightOperation": 8,
                "SlicingAxis1BothOperation": 8,
                "SlicingAxis1LeftOperation": 8,
                "SlicingAxis1RightOperation": 8,
                "TripleCreationOperation": 7,
                "PROVIDED_CONSTANT_WEIGHT": 4,
                "COMMON_CONSTANT_WEIGHT": 6,
                "PRIMITIVE_INPUT_AS_TENSOR_WEIGHT": 8,
                "INPUT_VARIABLE_WEIGHT": 4,
                "AXIS_CONSTANT_WEIGHT": 8,
                "SHAPE_CONSTANT_WEIGHT": 8,
                "OUTPUT_SHAPE_TUPLE_WEIGHT": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.float32]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.bool]": 8,
                "CONSTANT_DTYPES_AND_WEIGHTS[tf.int64]": 8
            }
        }
    }
]